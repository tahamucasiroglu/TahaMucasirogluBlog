# CodeFuser Output
# Generated: 2025-07-13 18:47:58
# Total Files: 429

================================================================================


=== DOSYA: Publishes\AdminSite\TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC.deps.json ===

[İÇERİK]
{
  "runtimeTarget": {
    "name": ".NETCoreApp,Version=v8.0",
    "signature": ""
  },
  "compilationOptions": {},
  "targets": {
    ".NETCoreApp,Version=v8.0": {
      "TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC/1.0.0": {
        "dependencies": {
          "Microsoft.AspNetCore.Mvc.NewtonsoftJson": "8.0.11",
          "TahaMucasirogluBlog.Application.Managers": "1.0.0",
          "TahaMucasirogluBlog.Application.Mapper": "1.0.0",
          "TahaMucasirogluBlog.Application.Validation": "1.0.0"
        },
        "runtime": {
          "TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC.dll": {}
        }
      },
      "AutoMapper/14.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Options": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/AutoMapper.dll": {
            "assemblyVersion": "14.0.0.0",
            "fileVersion": "14.0.0.0"
          }
        }
      },
      "Azure.Core/1.38.0": {
        "dependencies": {
          "Microsoft.Bcl.AsyncInterfaces": "1.1.1",
          "System.ClientModel": "1.0.0",
          "System.Diagnostics.DiagnosticSource": "9.0.0",
          "System.Memory.Data": "1.0.2",
          "System.Numerics.Vectors": "4.5.0",
          "System.Text.Encodings.Web": "9.0.0",
          "System.Text.Json": "9.0.0",
          "System.Threading.Tasks.Extensions": "4.5.4"
        },
        "runtime": {
          "lib/net6.0/Azure.Core.dll": {
            "assemblyVersion": "1.38.0.0",
            "fileVersion": "1.3800.24.12602"
          }
        }
      },
      "Azure.Identity/1.11.4": {
        "dependencies": {
          "Azure.Core": "1.38.0",
          "Microsoft.Identity.Client": "4.61.3",
          "Microsoft.Identity.Client.Extensions.Msal": "4.61.3",
          "System.Memory": "4.5.4",
          "System.Security.Cryptography.ProtectedData": "6.0.0",
          "System.Text.Json": "9.0.0",
          "System.Threading.Tasks.Extensions": "4.5.4"
        },
        "runtime": {
          "lib/netstandard2.0/Azure.Identity.dll": {
            "assemblyVersion": "1.11.4.0",
            "fileVersion": "1.1100.424.31005"
          }
        }
      },
      "FluentValidation/12.0.0": {
        "runtime": {
          "lib/net8.0/FluentValidation.dll": {
            "assemblyVersion": "12.0.0.0",
            "fileVersion": "12.0.0.0"
          }
        }
      },
      "FluentValidation.DependencyInjectionExtensions/12.0.0": {
        "dependencies": {
          "FluentValidation": "12.0.0",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/FluentValidation.DependencyInjectionExtensions.dll": {
            "assemblyVersion": "12.0.0.0",
            "fileVersion": "12.0.0.0"
          }
        }
      },
      "Microsoft.AspNetCore.JsonPatch/8.0.11": {
        "dependencies": {
          "Microsoft.CSharp": "4.7.0",
          "Newtonsoft.Json": "13.0.3"
        },
        "runtime": {
          "lib/net8.0/Microsoft.AspNetCore.JsonPatch.dll": {
            "assemblyVersion": "8.0.11.0",
            "fileVersion": "8.0.1124.52116"
          }
        }
      },
      "Microsoft.AspNetCore.Mvc.NewtonsoftJson/8.0.11": {
        "dependencies": {
          "Microsoft.AspNetCore.JsonPatch": "8.0.11",
          "Newtonsoft.Json": "13.0.3",
          "Newtonsoft.Json.Bson": "1.0.2"
        },
        "runtime": {
          "lib/net8.0/Microsoft.AspNetCore.Mvc.NewtonsoftJson.dll": {
            "assemblyVersion": "8.0.11.0",
            "fileVersion": "8.0.1124.52116"
          }
        }
      },
      "Microsoft.Bcl.AsyncInterfaces/1.1.1": {
        "runtime": {
          "lib/netstandard2.1/Microsoft.Bcl.AsyncInterfaces.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "4.700.20.21406"
          }
        }
      },
      "Microsoft.CSharp/4.7.0": {},
      "Microsoft.Data.SqlClient/5.1.6": {
        "dependencies": {
          "Azure.Identity": "1.11.4",
          "Microsoft.Data.SqlClient.SNI.runtime": "5.1.1",
          "Microsoft.Identity.Client": "4.61.3",
          "Microsoft.IdentityModel.JsonWebTokens": "6.35.0",
          "Microsoft.IdentityModel.Protocols.OpenIdConnect": "6.35.0",
          "Microsoft.SqlServer.Server": "1.0.0",
          "System.Configuration.ConfigurationManager": "6.0.1",
          "System.Diagnostics.DiagnosticSource": "9.0.0",
          "System.Runtime.Caching": "6.0.0",
          "System.Security.Cryptography.Cng": "5.0.0",
          "System.Security.Principal.Windows": "5.0.0",
          "System.Text.Encoding.CodePages": "6.0.0",
          "System.Text.Encodings.Web": "9.0.0"
        },
        "runtime": {
          "lib/net6.0/Microsoft.Data.SqlClient.dll": {
            "assemblyVersion": "5.0.0.0",
            "fileVersion": "5.16.24240.5"
          }
        },
        "runtimeTargets": {
          "runtimes/unix/lib/net6.0/Microsoft.Data.SqlClient.dll": {
            "rid": "unix",
            "assetType": "runtime",
            "assemblyVersion": "5.0.0.0",
            "fileVersion": "5.16.24240.5"
          },
          "runtimes/win/lib/net6.0/Microsoft.Data.SqlClient.dll": {
            "rid": "win",
            "assetType": "runtime",
            "assemblyVersion": "5.0.0.0",
            "fileVersion": "5.16.24240.5"
          }
        }
      },
      "Microsoft.Data.SqlClient.SNI.runtime/5.1.1": {
        "runtimeTargets": {
          "runtimes/win-arm/native/Microsoft.Data.SqlClient.SNI.dll": {
            "rid": "win-arm",
            "assetType": "native",
            "fileVersion": "5.1.1.0"
          },
          "runtimes/win-arm64/native/Microsoft.Data.SqlClient.SNI.dll": {
            "rid": "win-arm64",
            "assetType": "native",
            "fileVersion": "5.1.1.0"
          },
          "runtimes/win-x64/native/Microsoft.Data.SqlClient.SNI.dll": {
            "rid": "win-x64",
            "assetType": "native",
            "fileVersion": "5.1.1.0"
          },
          "runtimes/win-x86/native/Microsoft.Data.SqlClient.SNI.dll": {
            "rid": "win-x86",
            "assetType": "native",
            "fileVersion": "5.1.1.0"
          }
        }
      },
      "Microsoft.EntityFrameworkCore/8.0.11": {
        "dependencies": {
          "Microsoft.EntityFrameworkCore.Abstractions": "8.0.11",
          "Microsoft.EntityFrameworkCore.Analyzers": "8.0.11",
          "Microsoft.Extensions.Caching.Memory": "8.0.1",
          "Microsoft.Extensions.Logging": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.dll": {
            "assemblyVersion": "8.0.11.0",
            "fileVersion": "8.0.1124.52104"
          }
        }
      },
      "Microsoft.EntityFrameworkCore.Abstractions/8.0.11": {
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Abstractions.dll": {
            "assemblyVersion": "8.0.11.0",
            "fileVersion": "8.0.1124.52104"
          }
        }
      },
      "Microsoft.EntityFrameworkCore.Analyzers/8.0.11": {},
      "Microsoft.EntityFrameworkCore.Relational/8.0.11": {
        "dependencies": {
          "Microsoft.EntityFrameworkCore": "8.0.11",
          "Microsoft.Extensions.Configuration.Abstractions": "9.0.7"
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Relational.dll": {
            "assemblyVersion": "8.0.11.0",
            "fileVersion": "8.0.1124.52104"
          }
        }
      },
      "Microsoft.EntityFrameworkCore.SqlServer/8.0.11": {
        "dependencies": {
          "Microsoft.Data.SqlClient": "5.1.6",
          "Microsoft.EntityFrameworkCore.Relational": "8.0.11",
          "System.Formats.Asn1": "8.0.1"
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.SqlServer.dll": {
            "assemblyVersion": "8.0.11.0",
            "fileVersion": "8.0.1124.52104"
          }
        }
      },
      "Microsoft.Extensions.Caching.Abstractions/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Primitives": "9.0.7"
        }
      },
      "Microsoft.Extensions.Caching.Memory/8.0.1": {
        "dependencies": {
          "Microsoft.Extensions.Caching.Abstractions": "8.0.0",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "9.0.0",
          "Microsoft.Extensions.Options": "9.0.0",
          "Microsoft.Extensions.Primitives": "9.0.7"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Caching.Memory.dll": {
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.1024.46610"
          }
        }
      },
      "Microsoft.Extensions.Configuration/9.0.7": {
        "dependencies": {
          "Microsoft.Extensions.Configuration.Abstractions": "9.0.7",
          "Microsoft.Extensions.Primitives": "9.0.7"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Configuration.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.725.31616"
          }
        }
      },
      "Microsoft.Extensions.Configuration.Abstractions/9.0.7": {
        "dependencies": {
          "Microsoft.Extensions.Primitives": "9.0.7"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Configuration.Abstractions.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.725.31616"
          }
        }
      },
      "Microsoft.Extensions.Configuration.Binder/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Configuration.Abstractions": "9.0.7"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Configuration.Binder.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.DependencyInjection/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.DependencyInjection.Abstractions/9.0.0": {
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.DependencyModel/9.0.0": {
        "dependencies": {
          "System.Text.Encodings.Web": "9.0.0",
          "System.Text.Json": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyModel.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.Diagnostics.Abstractions/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0",
          "Microsoft.Extensions.Options": "9.0.0",
          "System.Diagnostics.DiagnosticSource": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Diagnostics.Abstractions.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.FileProviders.Abstractions/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Primitives": "9.0.7"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.FileProviders.Abstractions.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.Hosting.Abstractions/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Configuration.Abstractions": "9.0.7",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0",
          "Microsoft.Extensions.Diagnostics.Abstractions": "9.0.0",
          "Microsoft.Extensions.FileProviders.Abstractions": "9.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Hosting.Abstractions.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.Logging/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection": "9.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "9.0.0",
          "Microsoft.Extensions.Options": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Logging.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.Logging.Abstractions/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0",
          "System.Diagnostics.DiagnosticSource": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Logging.Abstractions.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.Options/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0",
          "Microsoft.Extensions.Primitives": "9.0.7"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Options.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.Primitives/9.0.7": {
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Primitives.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.725.31616"
          }
        }
      },
      "Microsoft.Identity.Client/4.61.3": {
        "dependencies": {
          "Microsoft.IdentityModel.Abstractions": "6.35.0",
          "System.Diagnostics.DiagnosticSource": "9.0.0"
        },
        "runtime": {
          "lib/net6.0/Microsoft.Identity.Client.dll": {
            "assemblyVersion": "4.61.3.0",
            "fileVersion": "4.61.3.0"
          }
        }
      },
      "Microsoft.Identity.Client.Extensions.Msal/4.61.3": {
        "dependencies": {
          "Microsoft.Identity.Client": "4.61.3",
          "System.Security.Cryptography.ProtectedData": "6.0.0"
        },
        "runtime": {
          "lib/net6.0/Microsoft.Identity.Client.Extensions.Msal.dll": {
            "assemblyVersion": "4.61.3.0",
            "fileVersion": "4.61.3.0"
          }
        }
      },
      "Microsoft.IdentityModel.Abstractions/6.35.0": {
        "runtime": {
          "lib/net6.0/Microsoft.IdentityModel.Abstractions.dll": {
            "assemblyVersion": "6.35.0.0",
            "fileVersion": "6.35.0.41201"
          }
        }
      },
      "Microsoft.IdentityModel.JsonWebTokens/6.35.0": {
        "dependencies": {
          "Microsoft.IdentityModel.Tokens": "6.35.0",
          "System.Text.Encoding": "4.3.0",
          "System.Text.Encodings.Web": "9.0.0",
          "System.Text.Json": "9.0.0"
        },
        "runtime": {
          "lib/net6.0/Microsoft.IdentityModel.JsonWebTokens.dll": {
            "assemblyVersion": "6.35.0.0",
            "fileVersion": "6.35.0.41201"
          }
        }
      },
      "Microsoft.IdentityModel.Logging/6.35.0": {
        "dependencies": {
          "Microsoft.IdentityModel.Abstractions": "6.35.0"
        },
        "runtime": {
          "lib/net6.0/Microsoft.IdentityModel.Logging.dll": {
            "assemblyVersion": "6.35.0.0",
            "fileVersion": "6.35.0.41201"
          }
        }
      },
      "Microsoft.IdentityModel.Protocols/6.35.0": {
        "dependencies": {
          "Microsoft.IdentityModel.Logging": "6.35.0",
          "Microsoft.IdentityModel.Tokens": "6.35.0"
        },
        "runtime": {
          "lib/net6.0/Microsoft.IdentityModel.Protocols.dll": {
            "assemblyVersion": "6.35.0.0",
            "fileVersion": "6.35.0.41201"
          }
        }
      },
      "Microsoft.IdentityModel.Protocols.OpenIdConnect/6.35.0": {
        "dependencies": {
          "Microsoft.IdentityModel.Protocols": "6.35.0",
          "System.IdentityModel.Tokens.Jwt": "6.35.0"
        },
        "runtime": {
          "lib/net6.0/Microsoft.IdentityModel.Protocols.OpenIdConnect.dll": {
            "assemblyVersion": "6.35.0.0",
            "fileVersion": "6.35.0.41201"
          }
        }
      },
      "Microsoft.IdentityModel.Tokens/6.35.0": {
        "dependencies": {
          "Microsoft.CSharp": "4.7.0",
          "Microsoft.IdentityModel.Logging": "6.35.0",
          "System.Security.Cryptography.Cng": "5.0.0"
        },
        "runtime": {
          "lib/net6.0/Microsoft.IdentityModel.Tokens.dll": {
            "assemblyVersion": "6.35.0.0",
            "fileVersion": "6.35.0.41201"
          }
        }
      },
      "Microsoft.NETCore.Platforms/1.1.0": {},
      "Microsoft.NETCore.Targets/1.1.0": {},
      "Microsoft.SqlServer.Server/1.0.0": {
        "runtime": {
          "lib/netstandard2.0/Microsoft.SqlServer.Server.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "Microsoft.Win32.SystemEvents/6.0.0": {
        "runtime": {
          "lib/net6.0/Microsoft.Win32.SystemEvents.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        },
        "runtimeTargets": {
          "runtimes/win/lib/net6.0/Microsoft.Win32.SystemEvents.dll": {
            "rid": "win",
            "assetType": "runtime",
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "Newtonsoft.Json/13.0.3": {
        "runtime": {
          "lib/net6.0/Newtonsoft.Json.dll": {
            "assemblyVersion": "13.0.0.0",
            "fileVersion": "13.0.3.27908"
          }
        }
      },
      "Newtonsoft.Json.Bson/1.0.2": {
        "dependencies": {
          "Newtonsoft.Json": "13.0.3"
        },
        "runtime": {
          "lib/netstandard2.0/Newtonsoft.Json.Bson.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.2.22727"
          }
        }
      },
      "Serilog/4.3.0": {
        "runtime": {
          "lib/net8.0/Serilog.dll": {
            "assemblyVersion": "4.3.0.0",
            "fileVersion": "4.3.0.0"
          }
        }
      },
      "Serilog.AspNetCore/9.0.0": {
        "dependencies": {
          "Serilog": "4.3.0",
          "Serilog.Extensions.Hosting": "9.0.0",
          "Serilog.Formatting.Compact": "3.0.0",
          "Serilog.Settings.Configuration": "9.0.0",
          "Serilog.Sinks.Console": "6.0.0",
          "Serilog.Sinks.Debug": "3.0.0",
          "Serilog.Sinks.File": "7.0.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.AspNetCore.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.0.0"
          }
        }
      },
      "Serilog.Extensions.Hosting/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0",
          "Microsoft.Extensions.Hosting.Abstractions": "9.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "9.0.0",
          "Serilog": "4.3.0",
          "Serilog.Extensions.Logging": "9.0.2"
        },
        "runtime": {
          "lib/net8.0/Serilog.Extensions.Hosting.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.0.0"
          }
        }
      },
      "Serilog.Extensions.Logging/9.0.2": {
        "dependencies": {
          "Microsoft.Extensions.Logging": "9.0.0",
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Extensions.Logging.dll": {
            "assemblyVersion": "9.0.2.0",
            "fileVersion": "9.0.2.0"
          }
        }
      },
      "Serilog.Formatting.Compact/3.0.0": {
        "dependencies": {
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Formatting.Compact.dll": {
            "assemblyVersion": "3.0.0.0",
            "fileVersion": "3.0.0.0"
          }
        }
      },
      "Serilog.Settings.Configuration/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Configuration.Binder": "9.0.0",
          "Microsoft.Extensions.DependencyModel": "9.0.0",
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Settings.Configuration.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.0.0"
          }
        }
      },
      "Serilog.Sinks.Async/2.1.0": {
        "dependencies": {
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Sinks.Async.dll": {
            "assemblyVersion": "2.1.0.0",
            "fileVersion": "2.1.0.0"
          }
        }
      },
      "Serilog.Sinks.Console/6.0.0": {
        "dependencies": {
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Sinks.Console.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.0.0"
          }
        }
      },
      "Serilog.Sinks.Debug/3.0.0": {
        "dependencies": {
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Sinks.Debug.dll": {
            "assemblyVersion": "3.0.0.0",
            "fileVersion": "3.0.0.0"
          }
        }
      },
      "Serilog.Sinks.File/7.0.0": {
        "dependencies": {
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Sinks.File.dll": {
            "assemblyVersion": "7.0.0.0",
            "fileVersion": "7.0.0.0"
          }
        }
      },
      "Serilog.Sinks.PeriodicBatching/5.0.0": {
        "dependencies": {
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Sinks.PeriodicBatching.dll": {
            "assemblyVersion": "5.0.0.0",
            "fileVersion": "5.0.0.0"
          }
        }
      },
      "System.ClientModel/1.0.0": {
        "dependencies": {
          "System.Memory.Data": "1.0.2",
          "System.Text.Json": "9.0.0"
        },
        "runtime": {
          "lib/net6.0/System.ClientModel.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.24.5302"
          }
        }
      },
      "System.Configuration.ConfigurationManager/6.0.1": {
        "dependencies": {
          "System.Security.Cryptography.ProtectedData": "6.0.0",
          "System.Security.Permissions": "6.0.0"
        },
        "runtime": {
          "lib/net6.0/System.Configuration.ConfigurationManager.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.922.41905"
          }
        }
      },
      "System.Diagnostics.DiagnosticSource/9.0.0": {
        "runtime": {
          "lib/net8.0/System.Diagnostics.DiagnosticSource.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "System.Drawing.Common/6.0.0": {
        "dependencies": {
          "Microsoft.Win32.SystemEvents": "6.0.0"
        },
        "runtime": {
          "lib/net6.0/System.Drawing.Common.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        },
        "runtimeTargets": {
          "runtimes/unix/lib/net6.0/System.Drawing.Common.dll": {
            "rid": "unix",
            "assetType": "runtime",
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          },
          "runtimes/win/lib/net6.0/System.Drawing.Common.dll": {
            "rid": "win",
            "assetType": "runtime",
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "System.Formats.Asn1/8.0.1": {},
      "System.IdentityModel.Tokens.Jwt/6.35.0": {
        "dependencies": {
          "Microsoft.IdentityModel.JsonWebTokens": "6.35.0",
          "Microsoft.IdentityModel.Tokens": "6.35.0"
        },
        "runtime": {
          "lib/net6.0/System.IdentityModel.Tokens.Jwt.dll": {
            "assemblyVersion": "6.35.0.0",
            "fileVersion": "6.35.0.41201"
          }
        }
      },
      "System.IO.Pipelines/9.0.0": {
        "runtime": {
          "lib/net8.0/System.IO.Pipelines.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "System.Memory/4.5.4": {},
      "System.Memory.Data/1.0.2": {
        "dependencies": {
          "System.Text.Encodings.Web": "9.0.0",
          "System.Text.Json": "9.0.0"
        },
        "runtime": {
          "lib/netstandard2.0/System.Memory.Data.dll": {
            "assemblyVersion": "1.0.2.0",
            "fileVersion": "1.0.221.20802"
          }
        }
      },
      "System.Numerics.Vectors/4.5.0": {},
      "System.Runtime/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0"
        }
      },
      "System.Runtime.Caching/6.0.0": {
        "dependencies": {
          "System.Configuration.ConfigurationManager": "6.0.1"
        },
        "runtime": {
          "lib/net6.0/System.Runtime.Caching.dll": {
            "assemblyVersion": "4.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        },
        "runtimeTargets": {
          "runtimes/win/lib/net6.0/System.Runtime.Caching.dll": {
            "rid": "win",
            "assetType": "runtime",
            "assemblyVersion": "4.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "System.Runtime.CompilerServices.Unsafe/6.0.0": {},
      "System.Security.AccessControl/6.0.0": {},
      "System.Security.Cryptography.Cng/5.0.0": {
        "dependencies": {
          "System.Formats.Asn1": "8.0.1"
        }
      },
      "System.Security.Cryptography.ProtectedData/6.0.0": {
        "runtime": {
          "lib/net6.0/System.Security.Cryptography.ProtectedData.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        },
        "runtimeTargets": {
          "runtimes/win/lib/net6.0/System.Security.Cryptography.ProtectedData.dll": {
            "rid": "win",
            "assetType": "runtime",
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "System.Security.Permissions/6.0.0": {
        "dependencies": {
          "System.Security.AccessControl": "6.0.0",
          "System.Windows.Extensions": "6.0.0"
        },
        "runtime": {
          "lib/net6.0/System.Security.Permissions.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "System.Security.Principal.Windows/5.0.0": {},
      "System.Text.Encoding/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0",
          "System.Runtime": "4.3.0"
        }
      },
      "System.Text.Encoding.CodePages/6.0.0": {
        "dependencies": {
          "System.Runtime.CompilerServices.Unsafe": "6.0.0"
        }
      },
      "System.Text.Encodings.Web/9.0.0": {
        "runtime": {
          "lib/net8.0/System.Text.Encodings.Web.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        },
        "runtimeTargets": {
          "runtimes/browser/lib/net8.0/System.Text.Encodings.Web.dll": {
            "rid": "browser",
            "assetType": "runtime",
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "System.Text.Json/9.0.0": {
        "dependencies": {
          "System.IO.Pipelines": "9.0.0",
          "System.Text.Encodings.Web": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/System.Text.Json.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "System.Threading.Tasks.Extensions/4.5.4": {},
      "System.Windows.Extensions/6.0.0": {
        "dependencies": {
          "System.Drawing.Common": "6.0.0"
        },
        "runtime": {
          "lib/net6.0/System.Windows.Extensions.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        },
        "runtimeTargets": {
          "runtimes/win/lib/net6.0/System.Windows.Extensions.dll": {
            "rid": "win",
            "assetType": "runtime",
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "TahaMucasirogluBlog.Application.Managers/1.0.0": {
        "dependencies": {
          "Serilog": "4.3.0",
          "Serilog.AspNetCore": "9.0.0",
          "Serilog.Extensions.Logging": "9.0.2",
          "Serilog.Settings.Configuration": "9.0.0",
          "Serilog.Sinks.Async": "2.1.0",
          "Serilog.Sinks.Console": "6.0.0",
          "Serilog.Sinks.Debug": "3.0.0",
          "Serilog.Sinks.File": "7.0.0",
          "Serilog.Sinks.PeriodicBatching": "5.0.0",
          "TahaMucasirogluBlog.Domain.Constant": "1.0.0",
          "TahaMucasirogluBlog.Domain.DTOs": "1.0.0",
          "TahaMucasirogluBlog.Domain.Entities": "1.0.0",
          "TahaMucasirogluBlog.Domain.Extensions": "1.0.0",
          "TahaMucasirogluBlog.Domain.Models": "1.0.0",
          "TahaMucasirogluBlog.Domain.Return": "1.0.0"
        },
        "runtime": {
          "TahaMucasirogluBlog.Application.Managers.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Application.Mapper/1.0.0": {
        "dependencies": {
          "AutoMapper": "14.0.0",
          "TahaMucasirogluBlog.Domain.Constant": "1.0.0",
          "TahaMucasirogluBlog.Domain.DTOs": "1.0.0",
          "TahaMucasirogluBlog.Domain.Entities": "1.0.0",
          "TahaMucasirogluBlog.Domain.Extensions": "1.0.0",
          "TahaMucasirogluBlog.Domain.Models": "1.0.0",
          "TahaMucasirogluBlog.Domain.Return": "1.0.0"
        },
        "runtime": {
          "TahaMucasirogluBlog.Application.Mapper.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Application.Validation/1.0.0": {
        "dependencies": {
          "FluentValidation": "12.0.0",
          "FluentValidation.DependencyInjectionExtensions": "12.0.0",
          "TahaMucasirogluBlog.Domain.Constant": "1.0.0",
          "TahaMucasirogluBlog.Domain.DTOs": "1.0.0",
          "TahaMucasirogluBlog.Domain.Entities": "1.0.0",
          "TahaMucasirogluBlog.Domain.Extensions": "1.0.0",
          "TahaMucasirogluBlog.Domain.Models": "1.0.0",
          "TahaMucasirogluBlog.Domain.Return": "1.0.0"
        },
        "runtime": {
          "TahaMucasirogluBlog.Application.Validation.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Domain.Constant/1.0.0": {
        "runtime": {
          "TahaMucasirogluBlog.Domain.Constant.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Domain.DTOs/1.0.0": {
        "runtime": {
          "TahaMucasirogluBlog.Domain.DTOs.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Domain.Entities/1.0.0": {
        "runtime": {
          "TahaMucasirogluBlog.Domain.Entities.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Domain.Extensions/1.0.0": {
        "dependencies": {
          "Microsoft.EntityFrameworkCore": "8.0.11",
          "Microsoft.EntityFrameworkCore.Abstractions": "8.0.11",
          "Microsoft.EntityFrameworkCore.Analyzers": "8.0.11",
          "Microsoft.EntityFrameworkCore.SqlServer": "8.0.11",
          "Microsoft.Extensions.Configuration": "9.0.7",
          "Newtonsoft.Json": "13.0.3"
        },
        "runtime": {
          "TahaMucasirogluBlog.Domain.Extensions.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Domain.Models/1.0.0": {
        "runtime": {
          "TahaMucasirogluBlog.Domain.Models.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Domain.Return/1.0.0": {
        "runtime": {
          "TahaMucasirogluBlog.Domain.Return.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      }
    }
  },
  "libraries": {
    "TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "AutoMapper/14.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-OC+1neAPM4oCCqQj3g2GJ2shziNNhOkxmNB9cVS8jtx4JbgmRzLcUOxB9Tsz6cVPHugdkHgCaCrTjjSI0Z5sCQ==",
      "path": "automapper/14.0.0",
      "hashPath": "automapper.14.0.0.nupkg.sha512"
    },
    "Azure.Core/1.38.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-IuEgCoVA0ef7E4pQtpC3+TkPbzaoQfa77HlfJDmfuaJUCVJmn7fT0izamZiryW5sYUFKizsftIxMkXKbgIcPMQ==",
      "path": "azure.core/1.38.0",
      "hashPath": "azure.core.1.38.0.nupkg.sha512"
    },
    "Azure.Identity/1.11.4": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-Sf4BoE6Q3jTgFkgBkx7qztYOFELBCo+wQgpYDwal/qJ1unBH73ywPztIJKXBXORRzAeNijsuxhk94h0TIMvfYg==",
      "path": "azure.identity/1.11.4",
      "hashPath": "azure.identity.1.11.4.nupkg.sha512"
    },
    "FluentValidation/12.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-8NVLxtMUXynRHJIX3Hn1ACovaqZIJASufXIIFkD0EUbcd5PmMsL1xUD5h548gCezJ5BzlITaR9CAMrGe29aWpA==",
      "path": "fluentvalidation/12.0.0",
      "hashPath": "fluentvalidation.12.0.0.nupkg.sha512"
    },
    "FluentValidation.DependencyInjectionExtensions/12.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-B28fBRL1UjhGsBC8fwV6YBZosh+SiU1FxdD7l7p5dGPgRlVI7UnM+Lgzmg+unZtV1Zxzpaw96UY2MYfMaAd8cg==",
      "path": "fluentvalidation.dependencyinjectionextensions/12.0.0",
      "hashPath": "fluentvalidation.dependencyinjectionextensions.12.0.0.nupkg.sha512"
    },
    "Microsoft.AspNetCore.JsonPatch/8.0.11": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-l1tFnQm2LtFE3M9YRM/bdwtxxCV50Y5jnN0LjliQH1sqvWsN46++Uu3QCJL9IdOweFvXSf3Shi7DI/Vc1jkdKA==",
      "path": "microsoft.aspnetcore.jsonpatch/8.0.11",
      "hashPath": "microsoft.aspnetcore.jsonpatch.8.0.11.nupkg.sha512"
    },
    "Microsoft.AspNetCore.Mvc.NewtonsoftJson/8.0.11": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-XcfFd8e0g2M0mcAKVNgoHJtWYJfKrPntHhgqiZ1Ci37i3AEJbM0GHIa715i0UPSksiKmDxsJWXnM3rg8keF/Zg==",
      "path": "microsoft.aspnetcore.mvc.newtonsoftjson/8.0.11",
      "hashPath": "microsoft.aspnetcore.mvc.newtonsoftjson.8.0.11.nupkg.sha512"
    },
    "Microsoft.Bcl.AsyncInterfaces/1.1.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-yuvf07qFWFqtK3P/MRkEKLhn5r2UbSpVueRziSqj0yJQIKFwG1pq9mOayK3zE5qZCTs0CbrwL9M6R8VwqyGy2w==",
      "path": "microsoft.bcl.asyncinterfaces/1.1.1",
      "hashPath": "microsoft.bcl.asyncinterfaces.1.1.1.nupkg.sha512"
    },
    "Microsoft.CSharp/4.7.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-pTj+D3uJWyN3My70i2Hqo+OXixq3Os2D1nJ2x92FFo6sk8fYS1m1WLNTs0Dc1uPaViH0YvEEwvzddQ7y4rhXmA==",
      "path": "microsoft.csharp/4.7.0",
      "hashPath": "microsoft.csharp.4.7.0.nupkg.sha512"
    },
    "Microsoft.Data.SqlClient/5.1.6": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-+pz7gIPh5ydsBcQvivt4R98PwJXer86fyQBBToIBLxZ5kuhW4N13Ijz87s9WpuPtF1vh4JesYCgpDPAOgkMhdg==",
      "path": "microsoft.data.sqlclient/5.1.6",
      "hashPath": "microsoft.data.sqlclient.5.1.6.nupkg.sha512"
    },
    "Microsoft.Data.SqlClient.SNI.runtime/5.1.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-wNGM5ZTQCa2blc9ikXQouybGiyMd6IHPVJvAlBEPtr6JepZEOYeDxGyprYvFVeOxlCXs7avridZQ0nYkHzQWCQ==",
      "path": "microsoft.data.sqlclient.sni.runtime/5.1.1",
      "hashPath": "microsoft.data.sqlclient.sni.runtime.5.1.1.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore/8.0.11": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-stbjWBTtpQ1HtqXMFyKnXFTr76PvaOHI2b2h85JqBi3eZr00nspvR/a90Zwh8CQ4rVawqLiTG0+0yZQWaav+sQ==",
      "path": "microsoft.entityframeworkcore/8.0.11",
      "hashPath": "microsoft.entityframeworkcore.8.0.11.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.Abstractions/8.0.11": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-++zY0Ea724ku1jptWJmF7jm3I4IXTexfT4qi1ETcSFFF7qj+qm6rRgN7mTuKkwIETuXk0ikfzudryRjUGrrNKQ==",
      "path": "microsoft.entityframeworkcore.abstractions/8.0.11",
      "hashPath": "microsoft.entityframeworkcore.abstractions.8.0.11.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.Analyzers/8.0.11": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-NI/AJQjtC7qgWM8Nr85sRkwlog2AnFer5RKP8xTUH0RuPF3nN0tGXBEeYJOLZWp+/+M/C6O7MMDRhKRE8bZwIA==",
      "path": "microsoft.entityframeworkcore.analyzers/8.0.11",
      "hashPath": "microsoft.entityframeworkcore.analyzers.8.0.11.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.Relational/8.0.11": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-3TuuW3i5I4Ro0yoaHmi2MqEDGObOVuhLaMEnd/heaLB1fcvm4fu4PevmC4BOWnI0vo176AIlV5o4rEQciLoohw==",
      "path": "microsoft.entityframeworkcore.relational/8.0.11",
      "hashPath": "microsoft.entityframeworkcore.relational.8.0.11.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.SqlServer/8.0.11": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-rYYo8RyteIfRns+GuCcPRf3J7jS8gu8AxUWmFejrGoHTTKINhylL27N+SkFwCjxK4mscokjhQ1zjjJoNQ9oijA==",
      "path": "microsoft.entityframeworkcore.sqlserver/8.0.11",
      "hashPath": "microsoft.entityframeworkcore.sqlserver.8.0.11.nupkg.sha512"
    },
    "Microsoft.Extensions.Caching.Abstractions/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-3KuSxeHoNYdxVYfg2IRZCThcrlJ1XJqIXkAWikCsbm5C/bCjv7G0WoKDyuR98Q+T607QT2Zl5GsbGRkENcV2yQ==",
      "path": "microsoft.extensions.caching.abstractions/8.0.0",
      "hashPath": "microsoft.extensions.caching.abstractions.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Caching.Memory/8.0.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-HFDnhYLccngrzyGgHkjEDU5FMLn4MpOsr5ElgsBMC4yx6lJh4jeWO7fHS8+TXPq+dgxCmUa/Trl8svObmwW4QA==",
      "path": "microsoft.extensions.caching.memory/8.0.1",
      "hashPath": "microsoft.extensions.caching.memory.8.0.1.nupkg.sha512"
    },
    "Microsoft.Extensions.Configuration/9.0.7": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-oxGR51+w5cXm5B9gU6XwpAB2sTiyPSmZm7hjvv0rzRnmL5o/KZzE103AuQj7sK26OBupjVzU/bZxDWvvU4nhEg==",
      "path": "microsoft.extensions.configuration/9.0.7",
      "hashPath": "microsoft.extensions.configuration.9.0.7.nupkg.sha512"
    },
    "Microsoft.Extensions.Configuration.Abstractions/9.0.7": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-lut/kiVvNsQ120VERMUYSFhpXPpKjjql+giy03LesASPBBcC0o6+aoFdzJH9GaYpFTQ3fGVhVjKjvJDoAW5/IQ==",
      "path": "microsoft.extensions.configuration.abstractions/9.0.7",
      "hashPath": "microsoft.extensions.configuration.abstractions.9.0.7.nupkg.sha512"
    },
    "Microsoft.Extensions.Configuration.Binder/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-RiScL99DcyngY9zJA2ROrri7Br8tn5N4hP4YNvGdTN/bvg1A3dwvDOxHnNZ3Im7x2SJ5i4LkX1uPiR/MfSFBLQ==",
      "path": "microsoft.extensions.configuration.binder/9.0.0",
      "hashPath": "microsoft.extensions.configuration.binder.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.DependencyInjection/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-MCPrg7v3QgNMr0vX4vzRXvkNGgLg8vKWX0nKCWUxu2uPyMsaRgiRc1tHBnbTcfJMhMKj2slE/j2M9oGkd25DNw==",
      "path": "microsoft.extensions.dependencyinjection/9.0.0",
      "hashPath": "microsoft.extensions.dependencyinjection.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.DependencyInjection.Abstractions/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-+6f2qv2a3dLwd5w6JanPIPs47CxRbnk+ZocMJUhv9NxP88VlOcJYZs9jY+MYSjxvady08bUZn6qgiNh7DadGgg==",
      "path": "microsoft.extensions.dependencyinjection.abstractions/9.0.0",
      "hashPath": "microsoft.extensions.dependencyinjection.abstractions.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.DependencyModel/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-saxr2XzwgDU77LaQfYFXmddEDRUKHF4DaGMZkNB3qjdVSZlax3//dGJagJkKrGMIPNZs2jVFXITyCCR6UHJNdA==",
      "path": "microsoft.extensions.dependencymodel/9.0.0",
      "hashPath": "microsoft.extensions.dependencymodel.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Diagnostics.Abstractions/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-1K8P7XzuzX8W8pmXcZjcrqS6x5eSSdvhQohmcpgiQNY/HlDAlnrhR9dvlURfFz428A+RTCJpUyB+aKTA6AgVcQ==",
      "path": "microsoft.extensions.diagnostics.abstractions/9.0.0",
      "hashPath": "microsoft.extensions.diagnostics.abstractions.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.FileProviders.Abstractions/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-uK439QzYR0q2emLVtYzwyK3x+T5bTY4yWsd/k/ZUS9LR6Sflp8MIdhGXW8kQCd86dQD4tLqvcbLkku8qHY263Q==",
      "path": "microsoft.extensions.fileproviders.abstractions/9.0.0",
      "hashPath": "microsoft.extensions.fileproviders.abstractions.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Hosting.Abstractions/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-yUKJgu81ExjvqbNWqZKshBbLntZMbMVz/P7Way2SBx7bMqA08Mfdc9O7hWDKAiSp+zPUGT6LKcSCQIPeDK+CCw==",
      "path": "microsoft.extensions.hosting.abstractions/9.0.0",
      "hashPath": "microsoft.extensions.hosting.abstractions.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Logging/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-crjWyORoug0kK7RSNJBTeSE6VX8IQgLf3nUpTB9m62bPXp/tzbnOsnbe8TXEG0AASNaKZddnpHKw7fET8E++Pg==",
      "path": "microsoft.extensions.logging/9.0.0",
      "hashPath": "microsoft.extensions.logging.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Logging.Abstractions/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-g0UfujELzlLbHoVG8kPKVBaW470Ewi+jnptGS9KUi6jcb+k2StujtK3m26DFSGGwQ/+bVgZfsWqNzlP6YOejvw==",
      "path": "microsoft.extensions.logging.abstractions/9.0.0",
      "hashPath": "microsoft.extensions.logging.abstractions.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Options/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-y2146b3jrPI3Q0lokKXdKLpmXqakYbDIPDV6r3M8SqvSf45WwOTzkyfDpxnZXJsJQEpAsAqjUq5Pu8RCJMjubg==",
      "path": "microsoft.extensions.options/9.0.0",
      "hashPath": "microsoft.extensions.options.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Primitives/9.0.7": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-ti/zD9BuuO50IqlvhWQs9GHxkCmoph5BHjGiWKdg2t6Or8XoyAfRJiKag+uvd/fpASnNklfsB01WpZ4fhAe0VQ==",
      "path": "microsoft.extensions.primitives/9.0.7",
      "hashPath": "microsoft.extensions.primitives.9.0.7.nupkg.sha512"
    },
    "Microsoft.Identity.Client/4.61.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-naJo/Qm35Caaoxp5utcw+R8eU8ZtLz2ALh8S+gkekOYQ1oazfCQMWVT4NJ/FnHzdIJlm8dMz0oMpMGCabx5odA==",
      "path": "microsoft.identity.client/4.61.3",
      "hashPath": "microsoft.identity.client.4.61.3.nupkg.sha512"
    },
    "Microsoft.Identity.Client.Extensions.Msal/4.61.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-PWnJcznrSGr25MN8ajlc2XIDW4zCFu0U6FkpaNLEWLgd1NgFCp5uDY3mqLDgM8zCN8hqj8yo5wHYfLB2HjcdGw==",
      "path": "microsoft.identity.client.extensions.msal/4.61.3",
      "hashPath": "microsoft.identity.client.extensions.msal.4.61.3.nupkg.sha512"
    },
    "Microsoft.IdentityModel.Abstractions/6.35.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-xuR8E4Rd96M41CnUSCiOJ2DBh+z+zQSmyrYHdYhD6K4fXBcQGVnRCFQ0efROUYpP+p0zC1BLKr0JRpVuujTZSg==",
      "path": "microsoft.identitymodel.abstractions/6.35.0",
      "hashPath": "microsoft.identitymodel.abstractions.6.35.0.nupkg.sha512"
    },
    "Microsoft.IdentityModel.JsonWebTokens/6.35.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-9wxai3hKgZUb4/NjdRKfQd0QJvtXKDlvmGMYACbEC8DFaicMFCFhQFZq9ZET1kJLwZahf2lfY5Gtcpsx8zYzbg==",
      "path": "microsoft.identitymodel.jsonwebtokens/6.35.0",
      "hashPath": "microsoft.identitymodel.jsonwebtokens.6.35.0.nupkg.sha512"
    },
    "Microsoft.IdentityModel.Logging/6.35.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-jePrSfGAmqT81JDCNSY+fxVWoGuJKt9e6eJ+vT7+quVS55nWl//jGjUQn4eFtVKt4rt5dXaleZdHRB9J9AJZ7Q==",
      "path": "microsoft.identitymodel.logging/6.35.0",
      "hashPath": "microsoft.identitymodel.logging.6.35.0.nupkg.sha512"
    },
    "Microsoft.IdentityModel.Protocols/6.35.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-BPQhlDzdFvv1PzaUxNSk+VEPwezlDEVADIKmyxubw7IiELK18uJ06RQ9QKKkds30XI+gDu9n8j24XQ8w7fjWcg==",
      "path": "microsoft.identitymodel.protocols/6.35.0",
      "hashPath": "microsoft.identitymodel.protocols.6.35.0.nupkg.sha512"
    },
    "Microsoft.IdentityModel.Protocols.OpenIdConnect/6.35.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-LMtVqnECCCdSmyFoCOxIE5tXQqkOLrvGrL7OxHg41DIm1bpWtaCdGyVcTAfOQpJXvzND9zUKIN/lhngPkYR8vg==",
      "path": "microsoft.identitymodel.protocols.openidconnect/6.35.0",
      "hashPath": "microsoft.identitymodel.protocols.openidconnect.6.35.0.nupkg.sha512"
    },
    "Microsoft.IdentityModel.Tokens/6.35.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-RN7lvp7s3Boucg1NaNAbqDbxtlLj5Qeb+4uSS1TeK5FSBVM40P4DKaTKChT43sHyKfh7V0zkrMph6DdHvyA4bg==",
      "path": "microsoft.identitymodel.tokens/6.35.0",
      "hashPath": "microsoft.identitymodel.tokens.6.35.0.nupkg.sha512"
    },
    "Microsoft.NETCore.Platforms/1.1.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-kz0PEW2lhqygehI/d6XsPCQzD7ff7gUJaVGPVETX611eadGsA3A877GdSlU0LRVMCTH/+P3o2iDTak+S08V2+A==",
      "path": "microsoft.netcore.platforms/1.1.0",
      "hashPath": "microsoft.netcore.platforms.1.1.0.nupkg.sha512"
    },
    "Microsoft.NETCore.Targets/1.1.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-aOZA3BWfz9RXjpzt0sRJJMjAscAUm3Hoa4UWAfceV9UTYxgwZ1lZt5nO2myFf+/jetYQo4uTP7zS8sJY67BBxg==",
      "path": "microsoft.netcore.targets/1.1.0",
      "hashPath": "microsoft.netcore.targets.1.1.0.nupkg.sha512"
    },
    "Microsoft.SqlServer.Server/1.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-N4KeF3cpcm1PUHym1RmakkzfkEv3GRMyofVv40uXsQhCQeglr2OHNcUk2WOG51AKpGO8ynGpo9M/kFXSzghwug==",
      "path": "microsoft.sqlserver.server/1.0.0",
      "hashPath": "microsoft.sqlserver.server.1.0.0.nupkg.sha512"
    },
    "Microsoft.Win32.SystemEvents/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-hqTM5628jSsQiv+HGpiq3WKBl2c8v1KZfby2J6Pr7pEPlK9waPdgEO6b8A/+/xn/yZ9ulv8HuqK71ONy2tg67A==",
      "path": "microsoft.win32.systemevents/6.0.0",
      "hashPath": "microsoft.win32.systemevents.6.0.0.nupkg.sha512"
    },
    "Newtonsoft.Json/13.0.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-HrC5BXdl00IP9zeV+0Z848QWPAoCr9P3bDEZguI+gkLcBKAOxix/tLEAAHC+UvDNPv4a2d18lOReHMOagPa+zQ==",
      "path": "newtonsoft.json/13.0.3",
      "hashPath": "newtonsoft.json.13.0.3.nupkg.sha512"
    },
    "Newtonsoft.Json.Bson/1.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-QYFyxhaABwmq3p/21VrZNYvCg3DaEoN/wUuw5nmfAf0X3HLjgupwhkEWdgfb9nvGAUIv3osmZoD3kKl4jxEmYQ==",
      "path": "newtonsoft.json.bson/1.0.2",
      "hashPath": "newtonsoft.json.bson.1.0.2.nupkg.sha512"
    },
    "Serilog/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-+cDryFR0GRhsGOnZSKwaDzRRl4MupvJ42FhCE4zhQRVanX0Jpg6WuCBk59OVhVDPmab1bB+nRykAnykYELA9qQ==",
      "path": "serilog/4.3.0",
      "hashPath": "serilog.4.3.0.nupkg.sha512"
    },
    "Serilog.AspNetCore/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-JslDajPlBsn3Pww1554flJFTqROvK9zz9jONNQgn0D8Lx2Trw8L0A8/n6zEQK1DAZWXrJwiVLw8cnTR3YFuYsg==",
      "path": "serilog.aspnetcore/9.0.0",
      "hashPath": "serilog.aspnetcore.9.0.0.nupkg.sha512"
    },
    "Serilog.Extensions.Hosting/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-u2TRxuxbjvTAldQn7uaAwePkWxTHIqlgjelekBtilAGL5sYyF3+65NWctN4UrwwGLsDC7c3Vz3HnOlu+PcoxXg==",
      "path": "serilog.extensions.hosting/9.0.0",
      "hashPath": "serilog.extensions.hosting.9.0.0.nupkg.sha512"
    },
    "Serilog.Extensions.Logging/9.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-p8kk2McN6LxuQfLyCoOkL7+nJIhVKnV1WFUxAaGTQTQk0wySbgmCHe98j+xSQvIbYHtzKXROOE2G2R0TLwBfig==",
      "path": "serilog.extensions.logging/9.0.2",
      "hashPath": "serilog.extensions.logging.9.0.2.nupkg.sha512"
    },
    "Serilog.Formatting.Compact/3.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-wQsv14w9cqlfB5FX2MZpNsTawckN4a8dryuNGbebB/3Nh1pXnROHZov3swtu3Nj5oNG7Ba+xdu7Et/ulAUPanQ==",
      "path": "serilog.formatting.compact/3.0.0",
      "hashPath": "serilog.formatting.compact.3.0.0.nupkg.sha512"
    },
    "Serilog.Settings.Configuration/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-4/Et4Cqwa+F88l5SeFeNZ4c4Z6dEAIKbu3MaQb2Zz9F/g27T5a3wvfMcmCOaAiACjfUb4A6wrlTVfyYUZk3RRQ==",
      "path": "serilog.settings.configuration/9.0.0",
      "hashPath": "serilog.settings.configuration.9.0.0.nupkg.sha512"
    },
    "Serilog.Sinks.Async/2.1.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-SnmRknWsSMgyo9wDXeZZCqSp48kkQYy44taSM6vcpxfiRICzSf09oLKEmVr0RCwQnfd8mJQ2WNN6nvhqf0RowQ==",
      "path": "serilog.sinks.async/2.1.0",
      "hashPath": "serilog.sinks.async.2.1.0.nupkg.sha512"
    },
    "Serilog.Sinks.Console/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-fQGWqVMClCP2yEyTXPIinSr5c+CBGUvBybPxjAGcf7ctDhadFhrQw03Mv8rJ07/wR5PDfFjewf2LimvXCDzpbA==",
      "path": "serilog.sinks.console/6.0.0",
      "hashPath": "serilog.sinks.console.6.0.0.nupkg.sha512"
    },
    "Serilog.Sinks.Debug/3.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-4BzXcdrgRX7wde9PmHuYd9U6YqycCC28hhpKonK7hx0wb19eiuRj16fPcPSVp0o/Y1ipJuNLYQ00R3q2Zs8FDA==",
      "path": "serilog.sinks.debug/3.0.0",
      "hashPath": "serilog.sinks.debug.3.0.0.nupkg.sha512"
    },
    "Serilog.Sinks.File/7.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-fKL7mXv7qaiNBUC71ssvn/dU0k9t0o45+qm2XgKAlSt19xF+ijjxyA3R6HmCgfKEKwfcfkwWjayuQtRueZFkYw==",
      "path": "serilog.sinks.file/7.0.0",
      "hashPath": "serilog.sinks.file.7.0.0.nupkg.sha512"
    },
    "Serilog.Sinks.PeriodicBatching/5.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-k57sDVgYitVdA5h9XSvy8lSlEts1ZzqlApHINUNV5WIuvnt6Z18LNynUQI6JYioKdqbUhkY6+KP844w7/awcOw==",
      "path": "serilog.sinks.periodicbatching/5.0.0",
      "hashPath": "serilog.sinks.periodicbatching.5.0.0.nupkg.sha512"
    },
    "System.ClientModel/1.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-I3CVkvxeqFYjIVEP59DnjbeoGNfo/+SZrCLpRz2v/g0gpCHaEMPtWSY0s9k/7jR1rAsLNg2z2u1JRB76tPjnIw==",
      "path": "system.clientmodel/1.0.0",
      "hashPath": "system.clientmodel.1.0.0.nupkg.sha512"
    },
    "System.Configuration.ConfigurationManager/6.0.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-jXw9MlUu/kRfEU0WyTptAVueupqIeE3/rl0EZDMlf8pcvJnitQ8HeVEp69rZdaStXwTV72boi/Bhw8lOeO+U2w==",
      "path": "system.configuration.configurationmanager/6.0.1",
      "hashPath": "system.configuration.configurationmanager.6.0.1.nupkg.sha512"
    },
    "System.Diagnostics.DiagnosticSource/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-ddppcFpnbohLWdYKr/ZeLZHmmI+DXFgZ3Snq+/E7SwcdW4UnvxmaugkwGywvGVWkHPGCSZjCP+MLzu23AL5SDw==",
      "path": "system.diagnostics.diagnosticsource/9.0.0",
      "hashPath": "system.diagnostics.diagnosticsource.9.0.0.nupkg.sha512"
    },
    "System.Drawing.Common/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-NfuoKUiP2nUWwKZN6twGqXioIe1zVD0RIj2t976A+czLHr2nY454RwwXs6JU9Htc6mwqL6Dn/nEL3dpVf2jOhg==",
      "path": "system.drawing.common/6.0.0",
      "hashPath": "system.drawing.common.6.0.0.nupkg.sha512"
    },
    "System.Formats.Asn1/8.0.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-XqKba7Mm/koKSjKMfW82olQdmfbI5yqeoLV/tidRp7fbh5rmHAQ5raDI/7SU0swTzv+jgqtUGkzmFxuUg0it1A==",
      "path": "system.formats.asn1/8.0.1",
      "hashPath": "system.formats.asn1.8.0.1.nupkg.sha512"
    },
    "System.IdentityModel.Tokens.Jwt/6.35.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-yxGIQd3BFK7F6S62/7RdZk3C/mfwyVxvh6ngd1VYMBmbJ1YZZA9+Ku6suylVtso0FjI0wbElpJ0d27CdsyLpBQ==",
      "path": "system.identitymodel.tokens.jwt/6.35.0",
      "hashPath": "system.identitymodel.tokens.jwt.6.35.0.nupkg.sha512"
    },
    "System.IO.Pipelines/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-eA3cinogwaNB4jdjQHOP3Z3EuyiDII7MT35jgtnsA4vkn0LUrrSHsU0nzHTzFzmaFYeKV7MYyMxOocFzsBHpTw==",
      "path": "system.io.pipelines/9.0.0",
      "hashPath": "system.io.pipelines.9.0.0.nupkg.sha512"
    },
    "System.Memory/4.5.4": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-1MbJTHS1lZ4bS4FmsJjnuGJOu88ZzTT2rLvrhW7Ygic+pC0NWA+3hgAen0HRdsocuQXCkUTdFn9yHJJhsijDXw==",
      "path": "system.memory/4.5.4",
      "hashPath": "system.memory.4.5.4.nupkg.sha512"
    },
    "System.Memory.Data/1.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-JGkzeqgBsiZwKJZ1IxPNsDFZDhUvuEdX8L8BDC8N3KOj+6zMcNU28CNN59TpZE/VJYy9cP+5M+sbxtWJx3/xtw==",
      "path": "system.memory.data/1.0.2",
      "hashPath": "system.memory.data.1.0.2.nupkg.sha512"
    },
    "System.Numerics.Vectors/4.5.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-QQTlPTl06J/iiDbJCiepZ4H//BVraReU4O4EoRw1U02H5TLUIT7xn3GnDp9AXPSlJUDyFs4uWjWafNX6WrAojQ==",
      "path": "system.numerics.vectors/4.5.0",
      "hashPath": "system.numerics.vectors.4.5.0.nupkg.sha512"
    },
    "System.Runtime/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-JufQi0vPQ0xGnAczR13AUFglDyVYt4Kqnz1AZaiKZ5+GICq0/1MH/mO/eAJHt/mHW1zjKBJd7kV26SrxddAhiw==",
      "path": "system.runtime/4.3.0",
      "hashPath": "system.runtime.4.3.0.nupkg.sha512"
    },
    "System.Runtime.Caching/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-E0e03kUp5X2k+UAoVl6efmI7uU7JRBWi5EIdlQ7cr0NpBGjHG4fWII35PgsBY9T4fJQ8E4QPsL0rKksU9gcL5A==",
      "path": "system.runtime.caching/6.0.0",
      "hashPath": "system.runtime.caching.6.0.0.nupkg.sha512"
    },
    "System.Runtime.CompilerServices.Unsafe/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-/iUeP3tq1S0XdNNoMz5C9twLSrM/TH+qElHkXWaPvuNOt+99G75NrV0OS2EqHx5wMN7popYjpc8oTjC1y16DLg==",
      "path": "system.runtime.compilerservices.unsafe/6.0.0",
      "hashPath": "system.runtime.compilerservices.unsafe.6.0.0.nupkg.sha512"
    },
    "System.Security.AccessControl/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-AUADIc0LIEQe7MzC+I0cl0rAT8RrTAKFHl53yHjEUzNVIaUlhFY11vc2ebiVJzVBuOzun6F7FBA+8KAbGTTedQ==",
      "path": "system.security.accesscontrol/6.0.0",
      "hashPath": "system.security.accesscontrol.6.0.0.nupkg.sha512"
    },
    "System.Security.Cryptography.Cng/5.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-jIMXsKn94T9JY7PvPq/tMfqa6GAaHpElRDpmG+SuL+D3+sTw2M8VhnibKnN8Tq+4JqbPJ/f+BwtLeDMEnzAvRg==",
      "path": "system.security.cryptography.cng/5.0.0",
      "hashPath": "system.security.cryptography.cng.5.0.0.nupkg.sha512"
    },
    "System.Security.Cryptography.ProtectedData/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-rp1gMNEZpvx9vP0JW0oHLxlf8oSiQgtno77Y4PLUBjSiDYoD77Y8uXHr1Ea5XG4/pIKhqAdxZ8v8OTUtqo9PeQ==",
      "path": "system.security.cryptography.protecteddata/6.0.0",
      "hashPath": "system.security.cryptography.protecteddata.6.0.0.nupkg.sha512"
    },
    "System.Security.Permissions/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-T/uuc7AklkDoxmcJ7LGkyX1CcSviZuLCa4jg3PekfJ7SU0niF0IVTXwUiNVP9DSpzou2PpxJ+eNY2IfDM90ZCg==",
      "path": "system.security.permissions/6.0.0",
      "hashPath": "system.security.permissions.6.0.0.nupkg.sha512"
    },
    "System.Security.Principal.Windows/5.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-t0MGLukB5WAVU9bO3MGzvlGnyJPgUlcwerXn1kzBRjwLKixT96XV0Uza41W49gVd8zEMFu9vQEFlv0IOrytICA==",
      "path": "system.security.principal.windows/5.0.0",
      "hashPath": "system.security.principal.windows.5.0.0.nupkg.sha512"
    },
    "System.Text.Encoding/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-BiIg+KWaSDOITze6jGQynxg64naAPtqGHBwDrLaCtixsa5bKiR8dpPOHA7ge3C0JJQizJE+sfkz1wV+BAKAYZw==",
      "path": "system.text.encoding/4.3.0",
      "hashPath": "system.text.encoding.4.3.0.nupkg.sha512"
    },
    "System.Text.Encoding.CodePages/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-ZFCILZuOvtKPauZ/j/swhvw68ZRi9ATCfvGbk1QfydmcXBkIWecWKn/250UH7rahZ5OoDBaiAudJtPvLwzw85A==",
      "path": "system.text.encoding.codepages/6.0.0",
      "hashPath": "system.text.encoding.codepages.6.0.0.nupkg.sha512"
    },
    "System.Text.Encodings.Web/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-e2hMgAErLbKyUUwt18qSBf9T5Y+SFAL3ZedM8fLupkVj8Rj2PZ9oxQ37XX2LF8fTO1wNIxvKpihD7Of7D/NxZw==",
      "path": "system.text.encodings.web/9.0.0",
      "hashPath": "system.text.encodings.web.9.0.0.nupkg.sha512"
    },
    "System.Text.Json/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-js7+qAu/9mQvnhA4EfGMZNEzXtJCDxgkgj8ohuxq/Qxv+R56G+ljefhiJHOxTNiw54q8vmABCWUwkMulNdlZ4A==",
      "path": "system.text.json/9.0.0",
      "hashPath": "system.text.json.9.0.0.nupkg.sha512"
    },
    "System.Threading.Tasks.Extensions/4.5.4": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-zteT+G8xuGu6mS+mzDzYXbzS7rd3K6Fjb9RiZlYlJPam2/hU7JCBZBVEcywNuR+oZ1ncTvc/cq0faRr3P01OVg==",
      "path": "system.threading.tasks.extensions/4.5.4",
      "hashPath": "system.threading.tasks.extensions.4.5.4.nupkg.sha512"
    },
    "System.Windows.Extensions/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-IXoJOXIqc39AIe+CIR7koBtRGMiCt/LPM3lI+PELtDIy9XdyeSrwXFdWV9dzJ2Awl0paLWUaknLxFQ5HpHZUog==",
      "path": "system.windows.extensions/6.0.0",
      "hashPath": "system.windows.extensions.6.0.0.nupkg.sha512"
    },
    "TahaMucasirogluBlog.Application.Managers/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Application.Mapper/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Application.Validation/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Domain.Constant/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Domain.DTOs/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Domain.Entities/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Domain.Extensions/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Domain.Models/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Domain.Return/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    }
  }
}


=== DOSYA: Publishes\AdminSite\TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC.runtimeconfig.json ===

[İÇERİK]
{
  "runtimeOptions": {
    "tfm": "net8.0",
    "frameworks": [
      {
        "name": "Microsoft.NETCore.App",
        "version": "8.0.0"
      },
      {
        "name": "Microsoft.AspNetCore.App",
        "version": "8.0.0"
      }
    ],
    "configProperties": {
      "System.GC.Server": true,
      "System.Reflection.Metadata.MetadataUpdater.IsSupported": false,
      "System.Reflection.NullabilityInfoContext.IsSupported": true,
      "System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization": false
    }
  }
}


=== DOSYA: Publishes\AdminSite\TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC.staticwebassets.endpoints.json ===

[İÇERİK]
{"Version":1,"ManifestType":"Publish","Endpoints":[{"Route":"Pages/MaintenancePageAsset/main.3vr8wgql8t.js","AssetFile":"Pages/MaintenancePageAsset/main.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"3079"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"8YDsaXmQCin053wrMVaU9voIGhWY5niSTeayCbvduGY=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 20:44:38 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"3vr8wgql8t"},{"Name":"integrity","Value":"sha256-8YDsaXmQCin053wrMVaU9voIGhWY5niSTeayCbvduGY="},{"Name":"label","Value":"Pages/MaintenancePageAsset/main.js"}]},{"Route":"Pages/MaintenancePageAsset/main.bhuu9vrjvo.css","AssetFile":"Pages/MaintenancePageAsset/main.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"9080"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"z+rK+qeh2ip+hlGDLfvJG06pEdc4TaNkLjL5Gq3WaWI=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 20:44:38 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"bhuu9vrjvo"},{"Name":"integrity","Value":"sha256-z+rK+qeh2ip+hlGDLfvJG06pEdc4TaNkLjL5Gq3WaWI="},{"Name":"label","Value":"Pages/MaintenancePageAsset/main.css"}]},{"Route":"Pages/MaintenancePageAsset/main.css","AssetFile":"Pages/MaintenancePageAsset/main.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"9080"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"z+rK+qeh2ip+hlGDLfvJG06pEdc4TaNkLjL5Gq3WaWI=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 20:44:38 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-z+rK+qeh2ip+hlGDLfvJG06pEdc4TaNkLjL5Gq3WaWI="}]},{"Route":"Pages/MaintenancePageAsset/main.js","AssetFile":"Pages/MaintenancePageAsset/main.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"3079"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"8YDsaXmQCin053wrMVaU9voIGhWY5niSTeayCbvduGY=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 20:44:38 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-8YDsaXmQCin053wrMVaU9voIGhWY5niSTeayCbvduGY="}]},{"Route":"TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC.ncyvqd5yqe.styles.css","AssetFile":"TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC.styles.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"1169"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"WcLS5887DvvoshgD9eco01ALUHEeNVukTIkSWeooldQ=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 21:04:25 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"ncyvqd5yqe"},{"Name":"integrity","Value":"sha256-WcLS5887DvvoshgD9eco01ALUHEeNVukTIkSWeooldQ="},{"Name":"label","Value":"TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC.styles.css"}]},{"Route":"TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC.styles.css","AssetFile":"TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC.styles.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"1169"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"WcLS5887DvvoshgD9eco01ALUHEeNVukTIkSWeooldQ=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 21:04:25 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-WcLS5887DvvoshgD9eco01ALUHEeNVukTIkSWeooldQ="}]},{"Route":"css/site.c2tiyv64ts.css","AssetFile":"css/site.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"362"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"pAGv4ietcJNk/EwsQZ5BN9+K4MuNYS2a9wl4Jw+q9D0=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"c2tiyv64ts"},{"Name":"integrity","Value":"sha256-pAGv4ietcJNk/EwsQZ5BN9+K4MuNYS2a9wl4Jw+q9D0="},{"Name":"label","Value":"css/site.css"}]},{"Route":"css/site.css","AssetFile":"css/site.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"362"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"pAGv4ietcJNk/EwsQZ5BN9+K4MuNYS2a9wl4Jw+q9D0=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-pAGv4ietcJNk/EwsQZ5BN9+K4MuNYS2a9wl4Jw+q9D0="}]},{"Route":"favicon.61n19gt1b8.ico","AssetFile":"favicon.ico","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"5430"},{"Name":"Content-Type","Value":"image/x-icon"},{"Name":"ETag","Value":"\"Jtxf9L+5ITKRc1gIRl4VbUpGkRNfOBXjYTdhJD4facM=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"61n19gt1b8"},{"Name":"integrity","Value":"sha256-Jtxf9L+5ITKRc1gIRl4VbUpGkRNfOBXjYTdhJD4facM="},{"Name":"label","Value":"favicon.ico"}]},{"Route":"favicon.ico","AssetFile":"favicon.ico","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"5430"},{"Name":"Content-Type","Value":"image/x-icon"},{"Name":"ETag","Value":"\"Jtxf9L+5ITKRc1gIRl4VbUpGkRNfOBXjYTdhJD4facM=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-Jtxf9L+5ITKRc1gIRl4VbUpGkRNfOBXjYTdhJD4facM="}]},{"Route":"js/site.js","AssetFile":"js/site.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"231"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"hRQyftXiu1lLX2P9Ly9xa4gHJgLeR1uGN5qegUobtGo=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-hRQyftXiu1lLX2P9Ly9xa4gHJgLeR1uGN5qegUobtGo="}]},{"Route":"js/site.xtxxf3hu2r.js","AssetFile":"js/site.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"231"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"hRQyftXiu1lLX2P9Ly9xa4gHJgLeR1uGN5qegUobtGo=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"xtxxf3hu2r"},{"Name":"integrity","Value":"sha256-hRQyftXiu1lLX2P9Ly9xa4gHJgLeR1uGN5qegUobtGo="},{"Name":"label","Value":"js/site.js"}]},{"Route":"lib/bootstrap/LICENSE","AssetFile":"lib/bootstrap/LICENSE","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"1153"},{"Name":"Content-Type","Value":"application/octet-stream"},{"Name":"ETag","Value":"\"ZH6pA6BSx6fuHZvdaKph1DwUJ+VSYilIiEQu8ilnvqk=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-ZH6pA6BSx6fuHZvdaKph1DwUJ+VSYilIiEQu8ilnvqk="}]},{"Route":"lib/bootstrap/LICENSE.81b7ukuj9c","AssetFile":"lib/bootstrap/LICENSE","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"1153"},{"Name":"Content-Type","Value":"application/octet-stream"},{"Name":"ETag","Value":"\"ZH6pA6BSx6fuHZvdaKph1DwUJ+VSYilIiEQu8ilnvqk=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"81b7ukuj9c"},{"Name":"integrity","Value":"sha256-ZH6pA6BSx6fuHZvdaKph1DwUJ+VSYilIiEQu8ilnvqk="},{"Name":"label","Value":"lib/bootstrap/LICENSE"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.agp80tu62r.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"70538"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"JtktgiuQAd+AXerCnPMrHCDz1h5AtkH5tobvpuG7xZ4=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"agp80tu62r"},{"Name":"integrity","Value":"sha256-JtktgiuQAd+AXerCnPMrHCDz1h5AtkH5tobvpuG7xZ4="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-grid.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"70538"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"JtktgiuQAd+AXerCnPMrHCDz1h5AtkH5tobvpuG7xZ4=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-JtktgiuQAd+AXerCnPMrHCDz1h5AtkH5tobvpuG7xZ4="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"196535"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"QO8cMbVkLiktUX1cHeXSUSe5nXMXUgyL9cjwnMyxPqc=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-QO8cMbVkLiktUX1cHeXSUSe5nXMXUgyL9cjwnMyxPqc="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.css.st1cbwfwo5.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"196535"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"QO8cMbVkLiktUX1cHeXSUSe5nXMXUgyL9cjwnMyxPqc=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"st1cbwfwo5"},{"Name":"integrity","Value":"sha256-QO8cMbVkLiktUX1cHeXSUSe5nXMXUgyL9cjwnMyxPqc="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-grid.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.min.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"51319"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"ysBT/JYxH9gcMnwxT4+MB4sPxOx/JMg9wi77FA13T9A=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-ysBT/JYxH9gcMnwxT4+MB4sPxOx/JMg9wi77FA13T9A="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.min.css.5vj65cig9w.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"117439"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"72C/qDCGu+OwWeVA03bf9Ke0T8oIozCub0lfJkhzhvE=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"5vj65cig9w"},{"Name":"integrity","Value":"sha256-72C/qDCGu+OwWeVA03bf9Ke0T8oIozCub0lfJkhzhvE="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-grid.min.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.min.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"117439"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"72C/qDCGu+OwWeVA03bf9Ke0T8oIozCub0lfJkhzhvE=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-72C/qDCGu+OwWeVA03bf9Ke0T8oIozCub0lfJkhzhvE="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.min.unj9p35syc.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"51319"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"ysBT/JYxH9gcMnwxT4+MB4sPxOx/JMg9wi77FA13T9A=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"unj9p35syc"},{"Name":"integrity","Value":"sha256-ysBT/JYxH9gcMnwxT4+MB4sPxOx/JMg9wi77FA13T9A="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-grid.min.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.rtl.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"70612"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"3vUJkZSpKL/zG7x6GNvDjs0TxYUo9zMt6dAc8hp9CVo=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-3vUJkZSpKL/zG7x6GNvDjs0TxYUo9zMt6dAc8hp9CVo="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.rtl.css.2q4vfeazbq.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"196539"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"qvA39OMlEs53jaewqVFmE8DQQrio47bZtlTs+Wu6U8g=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"2q4vfeazbq"},{"Name":"integrity","Value":"sha256-qvA39OMlEs53jaewqVFmE8DQQrio47bZtlTs+Wu6U8g="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-grid.rtl.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.rtl.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"196539"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"qvA39OMlEs53jaewqVFmE8DQQrio47bZtlTs+Wu6U8g=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-qvA39OMlEs53jaewqVFmE8DQQrio47bZtlTs+Wu6U8g="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"51394"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"O6lb2kXarGgVw4/RDD42yYPhZIwREthThQFKGmD+3j0=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-O6lb2kXarGgVw4/RDD42yYPhZIwREthThQFKGmD+3j0="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"117516"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"NDSZjIiMPRIoO7/w7+jHef8retP4riQa8PMj4BVRGok=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-NDSZjIiMPRIoO7/w7+jHef8retP4riQa8PMj4BVRGok="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.css.o371a8zbv2.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"117516"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"NDSZjIiMPRIoO7/w7+jHef8retP4riQa8PMj4BVRGok=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"o371a8zbv2"},{"Name":"integrity","Value":"sha256-NDSZjIiMPRIoO7/w7+jHef8retP4riQa8PMj4BVRGok="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.n1oizzvkh6.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"51394"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"O6lb2kXarGgVw4/RDD42yYPhZIwREthThQFKGmD+3j0=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"n1oizzvkh6"},{"Name":"integrity","Value":"sha256-O6lb2kXarGgVw4/RDD42yYPhZIwREthThQFKGmD+3j0="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.rtl.q2ku51ktnl.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"70612"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"3vUJkZSpKL/zG7x6GNvDjs0TxYUo9zMt6dAc8hp9CVo=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"q2ku51ktnl"},{"Name":"integrity","Value":"sha256-3vUJkZSpKL/zG7x6GNvDjs0TxYUo9zMt6dAc8hp9CVo="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-grid.rtl.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.7na4sro3qu.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"5850"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"4zbWr0QNFhpUwGkn4WdGWXt80KnhRFv0qXkZyVnhajY=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"7na4sro3qu"},{"Name":"integrity","Value":"sha256-4zbWr0QNFhpUwGkn4WdGWXt80KnhRFv0qXkZyVnhajY="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-reboot.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"5850"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"4zbWr0QNFhpUwGkn4WdGWXt80KnhRFv0qXkZyVnhajY=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-4zbWr0QNFhpUwGkn4WdGWXt80KnhRFv0qXkZyVnhajY="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.css.jeal3x0ldm.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"105138"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"FZG0KxbNqITUi4QY7QvPFRS/TccntMfFWfSTdHN/pws=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"jeal3x0ldm"},{"Name":"integrity","Value":"sha256-FZG0KxbNqITUi4QY7QvPFRS/TccntMfFWfSTdHN/pws="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-reboot.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"105138"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"FZG0KxbNqITUi4QY7QvPFRS/TccntMfFWfSTdHN/pws=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-FZG0KxbNqITUi4QY7QvPFRS/TccntMfFWfSTdHN/pws="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.min.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"4646"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"z0OApR88UEocYXTXHU7Ueycaiib9XbDUmel9Gx0gbx4=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-z0OApR88UEocYXTXHU7Ueycaiib9XbDUmel9Gx0gbx4="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.min.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"35330"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"2BbRsE/+czX1ufmDPGpnEieC9u6I3m5BKNDSX1ob3lg=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-2BbRsE/+czX1ufmDPGpnEieC9u6I3m5BKNDSX1ob3lg="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.min.css.okkk44j0xs.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"35330"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"2BbRsE/+czX1ufmDPGpnEieC9u6I3m5BKNDSX1ob3lg=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"okkk44j0xs"},{"Name":"integrity","Value":"sha256-2BbRsE/+czX1ufmDPGpnEieC9u6I3m5BKNDSX1ob3lg="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-reboot.min.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.min.f8imaxxbri.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"4646"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"z0OApR88UEocYXTXHU7Ueycaiib9XbDUmel9Gx0gbx4=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"f8imaxxbri"},{"Name":"integrity","Value":"sha256-z0OApR88UEocYXTXHU7Ueycaiib9XbDUmel9Gx0gbx4="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-reboot.min.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.0wve5yxp74.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"5827"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"8NXw3kF49FkQVPMdjnGDqoXXRU0TwzsLfCGbK9U8gnk=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"0wve5yxp74"},{"Name":"integrity","Value":"sha256-8NXw3kF49FkQVPMdjnGDqoXXRU0TwzsLfCGbK9U8gnk="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"5827"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"8NXw3kF49FkQVPMdjnGDqoXXRU0TwzsLfCGbK9U8gnk=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-8NXw3kF49FkQVPMdjnGDqoXXRU0TwzsLfCGbK9U8gnk="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.css.cwzlr5n8x4.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"105151"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"/EdWHN6t5XYPplC88vixGfrBvfEii19kAssb+0YBVU8=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"cwzlr5n8x4"},{"Name":"integrity","Value":"sha256-/EdWHN6t5XYPplC88vixGfrBvfEii19kAssb+0YBVU8="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"105151"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"/EdWHN6t5XYPplC88vixGfrBvfEii19kAssb+0YBVU8=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-/EdWHN6t5XYPplC88vixGfrBvfEii19kAssb+0YBVU8="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"4718"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"a5KlgysZ4fQXw4rzIvXDHErFDPeHRSLccP7kX6HuvSQ=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-a5KlgysZ4fQXw4rzIvXDHErFDPeHRSLccP7kX6HuvSQ="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"41570"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"GMDk5pA5dFkOimkBAWeEjYZ+7lgHPS0jYln6p/WJVYs=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-GMDk5pA5dFkOimkBAWeEjYZ+7lgHPS0jYln6p/WJVYs="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.css.wmug9u23qg.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"41570"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"GMDk5pA5dFkOimkBAWeEjYZ+7lgHPS0jYln6p/WJVYs=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"wmug9u23qg"},{"Name":"integrity","Value":"sha256-GMDk5pA5dFkOimkBAWeEjYZ+7lgHPS0jYln6p/WJVYs="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.npxfuf8dg6.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"4718"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"a5KlgysZ4fQXw4rzIvXDHErFDPeHRSLccP7kX6HuvSQ=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"npxfuf8dg6"},{"Name":"integrity","Value":"sha256-a5KlgysZ4fQXw4rzIvXDHErFDPeHRSLccP7kX6HuvSQ="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"71584"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"NbFZxZLmBVNLzb/7B0WdFfb6+8jXHGX6XY190uwgbec=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-NbFZxZLmBVNLzb/7B0WdFfb6+8jXHGX6XY190uwgbec="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.css.j75batdsum.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"192271"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"4WIqPof/vrXYO/jeJ4fDOQKUYWIwe64V3d+9/qNju20=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"j75batdsum"},{"Name":"integrity","Value":"sha256-4WIqPof/vrXYO/jeJ4fDOQKUYWIwe64V3d+9/qNju20="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-utilities.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"192271"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"4WIqPof/vrXYO/jeJ4fDOQKUYWIwe64V3d+9/qNju20=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-4WIqPof/vrXYO/jeJ4fDOQKUYWIwe64V3d+9/qNju20="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.min.16095smhkz.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"53479"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"5+ExmMkiaI3keYQRLhNibJ5ZXnNuWRbwrXOAZoTXMFg=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"16095smhkz"},{"Name":"integrity","Value":"sha256-5+ExmMkiaI3keYQRLhNibJ5ZXnNuWRbwrXOAZoTXMFg="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-utilities.min.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.min.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"53479"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"5+ExmMkiaI3keYQRLhNibJ5ZXnNuWRbwrXOAZoTXMFg=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-5+ExmMkiaI3keYQRLhNibJ5ZXnNuWRbwrXOAZoTXMFg="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.min.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"111875"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"p1dop4slefZhL4zG2pa6+2HUrOY1UUArGJXmet8Md9c=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-p1dop4slefZhL4zG2pa6+2HUrOY1UUArGJXmet8Md9c="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.min.css.vy0bq9ydhf.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"111875"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"p1dop4slefZhL4zG2pa6+2HUrOY1UUArGJXmet8Md9c=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"vy0bq9ydhf"},{"Name":"integrity","Value":"sha256-p1dop4slefZhL4zG2pa6+2HUrOY1UUArGJXmet8Md9c="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-utilities.min.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.b4skse8du6.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"71451"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"peAGH8Gu/ZL9VnbUGSMN69Ji5MxwbvOb53gDXU2cPaQ=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"b4skse8du6"},{"Name":"integrity","Value":"sha256-peAGH8Gu/ZL9VnbUGSMN69Ji5MxwbvOb53gDXU2cPaQ="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"71451"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"peAGH8Gu/ZL9VnbUGSMN69Ji5MxwbvOb53gDXU2cPaQ=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-peAGH8Gu/ZL9VnbUGSMN69Ji5MxwbvOb53gDXU2cPaQ="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.css.ab1c3rmv7g.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"192214"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"puDgKwvlFAord9R8G8of9P2CVYIJUFSoIbjDLEsKEH0=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"ab1c3rmv7g"},{"Name":"integrity","Value":"sha256-puDgKwvlFAord9R8G8of9P2CVYIJUFSoIbjDLEsKEH0="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"192214"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"puDgKwvlFAord9R8G8of9P2CVYIJUFSoIbjDLEsKEH0=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-puDgKwvlFAord9R8G8of9P2CVYIJUFSoIbjDLEsKEH0="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"53407"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"Wi5ZuFSHLfx6dlEgjvW3BY9TC/1NqdBjj+XFifSSqN4=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-Wi5ZuFSHLfx6dlEgjvW3BY9TC/1NqdBjj+XFifSSqN4="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.css.56d2bn4wt9.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"111710"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"02ka4ymoE5yEecLUncLG3/SouTQMnTJOktX+96Pt/88=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"56d2bn4wt9"},{"Name":"integrity","Value":"sha256-02ka4ymoE5yEecLUncLG3/SouTQMnTJOktX+96Pt/88="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"111710"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"02ka4ymoE5yEecLUncLG3/SouTQMnTJOktX+96Pt/88=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-02ka4ymoE5yEecLUncLG3/SouTQMnTJOktX+96Pt/88="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.u3xrusw2ol.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"53407"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"Wi5ZuFSHLfx6dlEgjvW3BY9TC/1NqdBjj+XFifSSqN4=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"u3xrusw2ol"},{"Name":"integrity","Value":"sha256-Wi5ZuFSHLfx6dlEgjvW3BY9TC/1NqdBjj+XFifSSqN4="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.tey0rigmnh.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"71584"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"NbFZxZLmBVNLzb/7B0WdFfb6+8jXHGX6XY190uwgbec=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"tey0rigmnh"},{"Name":"integrity","Value":"sha256-NbFZxZLmBVNLzb/7B0WdFfb6+8jXHGX6XY190uwgbec="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-utilities.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap.css","AssetFile":"lib/bootstrap/dist/css/bootstrap.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"204136"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"xlexqj9/k3uobVwGfciZcj/eDdooaNgcf4OFLtLUygM=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-xlexqj9/k3uobVwGfciZcj/eDdooaNgcf4OFLtLUygM="}]},{"Route":"lib/bootstrap/dist/css/bootstrap.css.73kdqttayv.map","AssetFile":"lib/bootstrap/dist/css/bootstrap.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"536547"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"DRvWr0gangj5/5Q3DRn6ttzpcWDzl3OpHoAwAzNDR5Q=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"73kdqttayv"},{"Name":"integrity","Value":"sha256-DRvWr0gangj5/5Q3DRn6ttzpcWDzl3OpHoAwAzNDR5Q="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"536547"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"DRvWr0gangj5/5Q3DRn6ttzpcWDzl3OpHoAwAzNDR5Q=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-DRvWr0gangj5/5Q3DRn6ttzpcWDzl3OpHoAwAzNDR5Q="}]},{"Route":"lib/bootstrap/dist/css/bootstrap.min.bpk8xqwxhs.css","AssetFile":"lib/bootstrap/dist/css/bootstrap.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"162720"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"z8OR40MowJ8GgK6P89Y+hiJK5+cclzFHzLhFQLL92bg=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"bpk8xqwxhs"},{"Name":"integrity","Value":"sha256-z8OR40MowJ8GgK6P89Y+hiJK5+cclzFHzLhFQLL92bg="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap.min.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap.min.css","AssetFile":"lib/bootstrap/dist/css/bootstrap.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"162720"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"z8OR40MowJ8GgK6P89Y+hiJK5+cclzFHzLhFQLL92bg=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-z8OR40MowJ8GgK6P89Y+hiJK5+cclzFHzLhFQLL92bg="}]},{"Route":"lib/bootstrap/dist/css/bootstrap.min.css.8inm30yfxf.map","AssetFile":"lib/bootstrap/dist/css/bootstrap.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"449111"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"gBwg2tmA0Ci2u54gMF1jNCVku6vznarkLS6D76htNNQ=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"8inm30yfxf"},{"Name":"integrity","Value":"sha256-gBwg2tmA0Ci2u54gMF1jNCVku6vznarkLS6D76htNNQ="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap.min.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap.min.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"449111"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"gBwg2tmA0Ci2u54gMF1jNCVku6vznarkLS6D76htNNQ=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-gBwg2tmA0Ci2u54gMF1jNCVku6vznarkLS6D76htNNQ="}]},{"Route":"lib/bootstrap/dist/css/bootstrap.mpyigms19s.css","AssetFile":"lib/bootstrap/dist/css/bootstrap.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"204136"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"xlexqj9/k3uobVwGfciZcj/eDdooaNgcf4OFLtLUygM=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"mpyigms19s"},{"Name":"integrity","Value":"sha256-xlexqj9/k3uobVwGfciZcj/eDdooaNgcf4OFLtLUygM="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap.rtl.css","AssetFile":"lib/bootstrap/dist/css/bootstrap.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"203803"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"SZ2mKaD4A+b+HIvttwl+TvLFnVy8o8/X40j+EKVwyvY=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-SZ2mKaD4A+b+HIvttwl+TvLFnVy8o8/X40j+EKVwyvY="}]},{"Route":"lib/bootstrap/dist/css/bootstrap.rtl.css.4gxs3k148c.map","AssetFile":"lib/bootstrap/dist/css/bootstrap.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"536461"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"VFvmi/ZSwQFmjS6Pry9B8zXeZ/GA168TXLyykDhNMZE=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"4gxs3k148c"},{"Name":"integrity","Value":"sha256-VFvmi/ZSwQFmjS6Pry9B8zXeZ/GA168TXLyykDhNMZE="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap.rtl.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap.rtl.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"536461"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"VFvmi/ZSwQFmjS6Pry9B8zXeZ/GA168TXLyykDhNMZE=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-VFvmi/ZSwQFmjS6Pry9B8zXeZ/GA168TXLyykDhNMZE="}]},{"Route":"lib/bootstrap/dist/css/bootstrap.rtl.min.9b9oa1qrmt.css","AssetFile":"lib/bootstrap/dist/css/bootstrap.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"162825"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"22wR6QTidoeiRZXp6zkRQyMSUb/FB+Av11jqmZJF6uU=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"9b9oa1qrmt"},{"Name":"integrity","Value":"sha256-22wR6QTidoeiRZXp6zkRQyMSUb/FB+Av11jqmZJF6uU="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap.rtl.min.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap.rtl.min.css","AssetFile":"lib/bootstrap/dist/css/bootstrap.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"162825"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"22wR6QTidoeiRZXp6zkRQyMSUb/FB+Av11jqmZJF6uU=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-22wR6QTidoeiRZXp6zkRQyMSUb/FB+Av11jqmZJF6uU="}]},{"Route":"lib/bootstrap/dist/css/bootstrap.rtl.min.css.fctod5rc9n.map","AssetFile":"lib/bootstrap/dist/css/bootstrap.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"661035"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"j7uqK5VoTT4rUHMr911QEU5Sa94lR3uh9E28XBMlzrM=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"fctod5rc9n"},{"Name":"integrity","Value":"sha256-j7uqK5VoTT4rUHMr911QEU5Sa94lR3uh9E28XBMlzrM="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap.rtl.min.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap.rtl.min.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"661035"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"j7uqK5VoTT4rUHMr911QEU5Sa94lR3uh9E28XBMlzrM=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-j7uqK5VoTT4rUHMr911QEU5Sa94lR3uh9E28XBMlzrM="}]},{"Route":"lib/bootstrap/dist/css/bootstrap.rtl.ve6x09088i.css","AssetFile":"lib/bootstrap/dist/css/bootstrap.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"203803"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"SZ2mKaD4A+b+HIvttwl+TvLFnVy8o8/X40j+EKVwyvY=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"ve6x09088i"},{"Name":"integrity","Value":"sha256-SZ2mKaD4A+b+HIvttwl+TvLFnVy8o8/X40j+EKVwyvY="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap.rtl.css"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.bundle.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.bundle.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"208492"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"vQTf4d3WJi9vmWQNA4kJnjoedgEhMFXFDEMXqtHtgzk=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-vQTf4d3WJi9vmWQNA4kJnjoedgEhMFXFDEMXqtHtgzk="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.bundle.js.kbynt5jhd9.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.bundle.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"425643"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"gO4uhxfGuK0ONjRlHuwfghGfEXT5azm1oHWnTEFGTfk=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"kbynt5jhd9"},{"Name":"integrity","Value":"sha256-gO4uhxfGuK0ONjRlHuwfghGfEXT5azm1oHWnTEFGTfk="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.bundle.js.map"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.bundle.js.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.bundle.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"425643"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"gO4uhxfGuK0ONjRlHuwfghGfEXT5azm1oHWnTEFGTfk=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-gO4uhxfGuK0ONjRlHuwfghGfEXT5azm1oHWnTEFGTfk="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.bundle.l2av4jpuoj.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.bundle.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"208492"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"vQTf4d3WJi9vmWQNA4kJnjoedgEhMFXFDEMXqtHtgzk=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"l2av4jpuoj"},{"Name":"integrity","Value":"sha256-vQTf4d3WJi9vmWQNA4kJnjoedgEhMFXFDEMXqtHtgzk="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.bundle.js"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.bundle.min.25iw1kog22.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.bundle.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"78468"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"KuvCVS19rfTjoLgMyDDCdOkRRlhNrY4psEM4uezts2M=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"25iw1kog22"},{"Name":"integrity","Value":"sha256-KuvCVS19rfTjoLgMyDDCdOkRRlhNrY4psEM4uezts2M="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.bundle.min.js"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.bundle.min.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.bundle.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"78468"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"KuvCVS19rfTjoLgMyDDCdOkRRlhNrY4psEM4uezts2M=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-KuvCVS19rfTjoLgMyDDCdOkRRlhNrY4psEM4uezts2M="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.bundle.min.js.c2nslu3uf3.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.bundle.min.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"327261"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"xIBBxDPvWhk8/JdaFEZoejadfaKFUfZFwRS1D4Jkuro=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"c2nslu3uf3"},{"Name":"integrity","Value":"sha256-xIBBxDPvWhk8/JdaFEZoejadfaKFUfZFwRS1D4Jkuro="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.bundle.min.js.map"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.bundle.min.js.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.bundle.min.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"327261"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"xIBBxDPvWhk8/JdaFEZoejadfaKFUfZFwRS1D4Jkuro=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-xIBBxDPvWhk8/JdaFEZoejadfaKFUfZFwRS1D4Jkuro="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.esm.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.esm.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"139019"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"EuDXUJYKnfZuO8dSLN0f5iVbVasz36AROuAU3NJ3JBo=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-EuDXUJYKnfZuO8dSLN0f5iVbVasz36AROuAU3NJ3JBo="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.esm.js.2lgwfvgpvi.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.esm.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"288320"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"CllC/sbLvyLE9cQljmFRlITfqdZRnBv2ysX5LJtl/dg=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"2lgwfvgpvi"},{"Name":"integrity","Value":"sha256-CllC/sbLvyLE9cQljmFRlITfqdZRnBv2ysX5LJtl/dg="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.esm.js.map"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.esm.js.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.esm.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"288320"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"CllC/sbLvyLE9cQljmFRlITfqdZRnBv2ysX5LJtl/dg=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-CllC/sbLvyLE9cQljmFRlITfqdZRnBv2ysX5LJtl/dg="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.esm.m39kt2b5c9.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.esm.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"139019"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"EuDXUJYKnfZuO8dSLN0f5iVbVasz36AROuAU3NJ3JBo=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"m39kt2b5c9"},{"Name":"integrity","Value":"sha256-EuDXUJYKnfZuO8dSLN0f5iVbVasz36AROuAU3NJ3JBo="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.esm.js"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.esm.min.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.esm.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"72016"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"Kj4irQWPwfSb5NFeos/h0IroI5/nIg0HtAjQ+w4v6TE=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-Kj4irQWPwfSb5NFeos/h0IroI5/nIg0HtAjQ+w4v6TE="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.esm.min.js.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.esm.min.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"222508"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"sPqzWcSS9aRa2gpWTVNQzemajn8hrFjgXPj3j9QItQo=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-sPqzWcSS9aRa2gpWTVNQzemajn8hrFjgXPj3j9QItQo="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.esm.min.js.wsezl0heh6.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.esm.min.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"222508"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"sPqzWcSS9aRa2gpWTVNQzemajn8hrFjgXPj3j9QItQo=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"wsezl0heh6"},{"Name":"integrity","Value":"sha256-sPqzWcSS9aRa2gpWTVNQzemajn8hrFjgXPj3j9QItQo="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.esm.min.js.map"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.esm.min.um2aeqy4ik.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.esm.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"72016"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"Kj4irQWPwfSb5NFeos/h0IroI5/nIg0HtAjQ+w4v6TE=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"um2aeqy4ik"},{"Name":"integrity","Value":"sha256-Kj4irQWPwfSb5NFeos/h0IroI5/nIg0HtAjQ+w4v6TE="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.esm.min.js"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"148168"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"6IStRQerBchYSw6J2GWTOWGOnDRrWXmaG0r6nCwN5s4=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-6IStRQerBchYSw6J2GWTOWGOnDRrWXmaG0r6nCwN5s4="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.js.6ukhryfubh.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"289522"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"Qkl5mZUZ64aYBaORRMP9jfD1kz8J6FwiV2M86JDJkdQ=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"6ukhryfubh"},{"Name":"integrity","Value":"sha256-Qkl5mZUZ64aYBaORRMP9jfD1kz8J6FwiV2M86JDJkdQ="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.js.map"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.js.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"289522"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"Qkl5mZUZ64aYBaORRMP9jfD1kz8J6FwiV2M86JDJkdQ=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-Qkl5mZUZ64aYBaORRMP9jfD1kz8J6FwiV2M86JDJkdQ="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.min.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"59511"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"c4Ll6eSIg6Eothk8pCWAF8aE923EvtU11pqjBy+NjNM=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-c4Ll6eSIg6Eothk8pCWAF8aE923EvtU11pqjBy+NjNM="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.min.js.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.min.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"217145"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"ui/FQI+y0IUsY8Pbi80b8s3GeEL+PsvdaLTONobpn88=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-ui/FQI+y0IUsY8Pbi80b8s3GeEL+PsvdaLTONobpn88="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.min.js.u33ctipx7g.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.min.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"217145"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"ui/FQI+y0IUsY8Pbi80b8s3GeEL+PsvdaLTONobpn88=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"u33ctipx7g"},{"Name":"integrity","Value":"sha256-ui/FQI+y0IUsY8Pbi80b8s3GeEL+PsvdaLTONobpn88="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.min.js.map"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.min.zwph15dxgs.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"59511"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"c4Ll6eSIg6Eothk8pCWAF8aE923EvtU11pqjBy+NjNM=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"zwph15dxgs"},{"Name":"integrity","Value":"sha256-c4Ll6eSIg6Eothk8pCWAF8aE923EvtU11pqjBy+NjNM="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.min.js"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.o4kw7cc6tf.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"148168"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"6IStRQerBchYSw6J2GWTOWGOnDRrWXmaG0r6nCwN5s4=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"o4kw7cc6tf"},{"Name":"integrity","Value":"sha256-6IStRQerBchYSw6J2GWTOWGOnDRrWXmaG0r6nCwN5s4="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.js"}]},{"Route":"lib/jquery-validation-unobtrusive/LICENSE.356vix0kms.txt","AssetFile":"lib/jquery-validation-unobtrusive/LICENSE.txt","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"1139"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"16aFlqtpsG9RyieKZUUUjkJpqTgcJtWXwT312I4Iz1s=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"356vix0kms"},{"Name":"integrity","Value":"sha256-16aFlqtpsG9RyieKZUUUjkJpqTgcJtWXwT312I4Iz1s="},{"Name":"label","Value":"lib/jquery-validation-unobtrusive/LICENSE.txt"}]},{"Route":"lib/jquery-validation-unobtrusive/LICENSE.txt","AssetFile":"lib/jquery-validation-unobtrusive/LICENSE.txt","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"1139"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"16aFlqtpsG9RyieKZUUUjkJpqTgcJtWXwT312I4Iz1s=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-16aFlqtpsG9RyieKZUUUjkJpqTgcJtWXwT312I4Iz1s="}]},{"Route":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.47otxtyo56.js","AssetFile":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"19385"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"wJQaJ0XynBE2fq6CexXXhxKu7fstVmQc7V2MHNTo+WQ=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"47otxtyo56"},{"Name":"integrity","Value":"sha256-wJQaJ0XynBE2fq6CexXXhxKu7fstVmQc7V2MHNTo+WQ="},{"Name":"label","Value":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js"}]},{"Route":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js","AssetFile":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"19385"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"wJQaJ0XynBE2fq6CexXXhxKu7fstVmQc7V2MHNTo+WQ=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-wJQaJ0XynBE2fq6CexXXhxKu7fstVmQc7V2MHNTo+WQ="}]},{"Route":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.4v8eqarkd7.js","AssetFile":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"5824"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"YJa7W8EiQdQpkk93iGEjjnLSUWRpRJbSfzfURh1kxz4=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"4v8eqarkd7"},{"Name":"integrity","Value":"sha256-YJa7W8EiQdQpkk93iGEjjnLSUWRpRJbSfzfURh1kxz4="},{"Name":"label","Value":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"}]},{"Route":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js","AssetFile":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"5824"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"YJa7W8EiQdQpkk93iGEjjnLSUWRpRJbSfzfURh1kxz4=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-YJa7W8EiQdQpkk93iGEjjnLSUWRpRJbSfzfURh1kxz4="}]},{"Route":"lib/jquery-validation/LICENSE.md","AssetFile":"lib/jquery-validation/LICENSE.md","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"1117"},{"Name":"Content-Type","Value":"text/markdown"},{"Name":"ETag","Value":"\"geHEkw/WGPdaHQMRq5HuNY9snliNzU/y2OW8ycnhGXw=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-geHEkw/WGPdaHQMRq5HuNY9snliNzU/y2OW8ycnhGXw="}]},{"Route":"lib/jquery-validation/LICENSE.x0q3zqp4vz.md","AssetFile":"lib/jquery-validation/LICENSE.md","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"1117"},{"Name":"Content-Type","Value":"text/markdown"},{"Name":"ETag","Value":"\"geHEkw/WGPdaHQMRq5HuNY9snliNzU/y2OW8ycnhGXw=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"x0q3zqp4vz"},{"Name":"integrity","Value":"sha256-geHEkw/WGPdaHQMRq5HuNY9snliNzU/y2OW8ycnhGXw="},{"Name":"label","Value":"lib/jquery-validation/LICENSE.md"}]},{"Route":"lib/jquery-validation/dist/additional-methods.ay5nd8zt9x.js","AssetFile":"lib/jquery-validation/dist/additional-methods.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"52977"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"4jrcLBsi0Ugm8iLKdqDsAyaCDjkscYZdoGuNH/zqs4E=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"ay5nd8zt9x"},{"Name":"integrity","Value":"sha256-4jrcLBsi0Ugm8iLKdqDsAyaCDjkscYZdoGuNH/zqs4E="},{"Name":"label","Value":"lib/jquery-validation/dist/additional-methods.js"}]},{"Route":"lib/jquery-validation/dist/additional-methods.js","AssetFile":"lib/jquery-validation/dist/additional-methods.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"52977"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"4jrcLBsi0Ugm8iLKdqDsAyaCDjkscYZdoGuNH/zqs4E=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-4jrcLBsi0Ugm8iLKdqDsAyaCDjkscYZdoGuNH/zqs4E="}]},{"Route":"lib/jquery-validation/dist/additional-methods.min.9oaff4kq20.js","AssetFile":"lib/jquery-validation/dist/additional-methods.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"22177"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"N11IyJpHTgDcSCb3AfX4VrBnpGQeem1NoNzzgcXVyCc=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"9oaff4kq20"},{"Name":"integrity","Value":"sha256-N11IyJpHTgDcSCb3AfX4VrBnpGQeem1NoNzzgcXVyCc="},{"Name":"label","Value":"lib/jquery-validation/dist/additional-methods.min.js"}]},{"Route":"lib/jquery-validation/dist/additional-methods.min.js","AssetFile":"lib/jquery-validation/dist/additional-methods.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"22177"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"N11IyJpHTgDcSCb3AfX4VrBnpGQeem1NoNzzgcXVyCc=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-N11IyJpHTgDcSCb3AfX4VrBnpGQeem1NoNzzgcXVyCc="}]},{"Route":"lib/jquery-validation/dist/jquery.validate.js","AssetFile":"lib/jquery-validation/dist/jquery.validate.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"51171"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"m0l81WDPiG7CcG7CDsTuZzvcGvyFmrQY5DLIxx3aRGw=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-m0l81WDPiG7CcG7CDsTuZzvcGvyFmrQY5DLIxx3aRGw="}]},{"Route":"lib/jquery-validation/dist/jquery.validate.min.b7iojwaux1.js","AssetFile":"lib/jquery-validation/dist/jquery.validate.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"24601"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"JwUksNJ6/R07ZiLRoXbGeNrtlFZMFDKX4hemPiHOmCA=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"b7iojwaux1"},{"Name":"integrity","Value":"sha256-JwUksNJ6/R07ZiLRoXbGeNrtlFZMFDKX4hemPiHOmCA="},{"Name":"label","Value":"lib/jquery-validation/dist/jquery.validate.min.js"}]},{"Route":"lib/jquery-validation/dist/jquery.validate.min.js","AssetFile":"lib/jquery-validation/dist/jquery.validate.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"24601"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"JwUksNJ6/R07ZiLRoXbGeNrtlFZMFDKX4hemPiHOmCA=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-JwUksNJ6/R07ZiLRoXbGeNrtlFZMFDKX4hemPiHOmCA="}]},{"Route":"lib/jquery-validation/dist/jquery.validate.pzqfkb6aqo.js","AssetFile":"lib/jquery-validation/dist/jquery.validate.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"51171"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"m0l81WDPiG7CcG7CDsTuZzvcGvyFmrQY5DLIxx3aRGw=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"pzqfkb6aqo"},{"Name":"integrity","Value":"sha256-m0l81WDPiG7CcG7CDsTuZzvcGvyFmrQY5DLIxx3aRGw="},{"Name":"label","Value":"lib/jquery-validation/dist/jquery.validate.js"}]},{"Route":"lib/jquery/LICENSE.mlv21k5csn.txt","AssetFile":"lib/jquery/LICENSE.txt","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"1117"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"hjIBkvmgxQXbNXK3B9YQ3t06RwLuQSQzC/dpvuB/lMk=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"mlv21k5csn"},{"Name":"integrity","Value":"sha256-hjIBkvmgxQXbNXK3B9YQ3t06RwLuQSQzC/dpvuB/lMk="},{"Name":"label","Value":"lib/jquery/LICENSE.txt"}]},{"Route":"lib/jquery/LICENSE.txt","AssetFile":"lib/jquery/LICENSE.txt","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"1117"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"hjIBkvmgxQXbNXK3B9YQ3t06RwLuQSQzC/dpvuB/lMk=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-hjIBkvmgxQXbNXK3B9YQ3t06RwLuQSQzC/dpvuB/lMk="}]},{"Route":"lib/jquery/dist/jquery.fwhahm2icz.js","AssetFile":"lib/jquery/dist/jquery.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"288580"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"fwhahm2icz"},{"Name":"integrity","Value":"sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk="},{"Name":"label","Value":"lib/jquery/dist/jquery.js"}]},{"Route":"lib/jquery/dist/jquery.js","AssetFile":"lib/jquery/dist/jquery.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"288580"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk="}]},{"Route":"lib/jquery/dist/jquery.min.5pze98is44.map","AssetFile":"lib/jquery/dist/jquery.min.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"137972"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"OZVI+w57FGwS9boYCZpH1ZSpcP7pYhLu4KtIUvPlZ4I=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"5pze98is44"},{"Name":"integrity","Value":"sha256-OZVI+w57FGwS9boYCZpH1ZSpcP7pYhLu4KtIUvPlZ4I="},{"Name":"label","Value":"lib/jquery/dist/jquery.min.map"}]},{"Route":"lib/jquery/dist/jquery.min.dd6z7egasc.js","AssetFile":"lib/jquery/dist/jquery.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"89501"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"dd6z7egasc"},{"Name":"integrity","Value":"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4="},{"Name":"label","Value":"lib/jquery/dist/jquery.min.js"}]},{"Route":"lib/jquery/dist/jquery.min.js","AssetFile":"lib/jquery/dist/jquery.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"89501"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4="}]},{"Route":"lib/jquery/dist/jquery.min.map","AssetFile":"lib/jquery/dist/jquery.min.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"137972"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"OZVI+w57FGwS9boYCZpH1ZSpcP7pYhLu4KtIUvPlZ4I=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 12:29:36 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-OZVI+w57FGwS9boYCZpH1ZSpcP7pYhLu4KtIUvPlZ4I="}]}]}


=== DOSYA: Publishes\AdminSite\appsettings.Development.json ===

[İÇERİK]
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}



=== DOSYA: Publishes\AdminSite\appsettings.json ===

[İÇERİK]
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",


  "ApiSettings": {
    "ApiUrl": "http://localhost:5000/api/"
  },

  "LoggerSettings": {
    "LogStatus": true,
    "LogLevel": 0
  },

  "Maintenance": {
    "Enabled": true,
    "EndDateTime": "2025-08-01T15:30:00" // bakım bitiş zamanı (yerel saatinize göre)
  }
}



=== DOSYA: Publishes\AdminSite\web.config ===

[İÇERİK]
﻿<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <location path="." inheritInChildApplications="false">
    <system.webServer>
      <handlers>
        <add name="aspNetCore" path="*" verb="*" modules="AspNetCoreModuleV2" resourceType="Unspecified" />
      </handlers>
      <aspNetCore processPath="dotnet" arguments=".\TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC.dll" stdoutLogEnabled="false" stdoutLogFile=".\logs\stdout" hostingModel="inprocess" />
    </system.webServer>
  </location>
</configuration>
<!--ProjectGuid: 26CCA221-3E4C-4BC7-A892-BFB815B6919C-->


=== DOSYA: Publishes\CvSite\TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC.deps.json ===

[İÇERİK]
{
  "runtimeTarget": {
    "name": ".NETCoreApp,Version=v8.0",
    "signature": ""
  },
  "compilationOptions": {},
  "targets": {
    ".NETCoreApp,Version=v8.0": {
      "TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC/1.0.0": {
        "dependencies": {
          "TahaMucasirogluBlog.Application.Managers": "1.0.0",
          "TahaMucasirogluBlog.Application.Mapper": "1.0.0",
          "TahaMucasirogluBlog.Application.Validation": "1.0.0",
          "bootstrap": "5.3.7"
        },
        "runtime": {
          "TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC.dll": {}
        }
      },
      "AutoMapper/14.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Options": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/AutoMapper.dll": {
            "assemblyVersion": "14.0.0.0",
            "fileVersion": "14.0.0.0"
          }
        }
      },
      "Azure.Core/1.38.0": {
        "dependencies": {
          "Microsoft.Bcl.AsyncInterfaces": "1.1.1",
          "System.ClientModel": "1.0.0",
          "System.Diagnostics.DiagnosticSource": "9.0.0",
          "System.Memory.Data": "1.0.2",
          "System.Numerics.Vectors": "4.5.0",
          "System.Text.Encodings.Web": "9.0.0",
          "System.Text.Json": "9.0.0",
          "System.Threading.Tasks.Extensions": "4.5.4"
        },
        "runtime": {
          "lib/net6.0/Azure.Core.dll": {
            "assemblyVersion": "1.38.0.0",
            "fileVersion": "1.3800.24.12602"
          }
        }
      },
      "Azure.Identity/1.11.4": {
        "dependencies": {
          "Azure.Core": "1.38.0",
          "Microsoft.Identity.Client": "4.61.3",
          "Microsoft.Identity.Client.Extensions.Msal": "4.61.3",
          "System.Memory": "4.5.4",
          "System.Security.Cryptography.ProtectedData": "6.0.0",
          "System.Text.Json": "9.0.0",
          "System.Threading.Tasks.Extensions": "4.5.4"
        },
        "runtime": {
          "lib/netstandard2.0/Azure.Identity.dll": {
            "assemblyVersion": "1.11.4.0",
            "fileVersion": "1.1100.424.31005"
          }
        }
      },
      "bootstrap/5.3.7": {},
      "FluentValidation/12.0.0": {
        "runtime": {
          "lib/net8.0/FluentValidation.dll": {
            "assemblyVersion": "12.0.0.0",
            "fileVersion": "12.0.0.0"
          }
        }
      },
      "FluentValidation.DependencyInjectionExtensions/12.0.0": {
        "dependencies": {
          "FluentValidation": "12.0.0",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/FluentValidation.DependencyInjectionExtensions.dll": {
            "assemblyVersion": "12.0.0.0",
            "fileVersion": "12.0.0.0"
          }
        }
      },
      "Microsoft.Bcl.AsyncInterfaces/1.1.1": {
        "runtime": {
          "lib/netstandard2.1/Microsoft.Bcl.AsyncInterfaces.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "4.700.20.21406"
          }
        }
      },
      "Microsoft.CSharp/4.5.0": {},
      "Microsoft.Data.SqlClient/5.1.6": {
        "dependencies": {
          "Azure.Identity": "1.11.4",
          "Microsoft.Data.SqlClient.SNI.runtime": "5.1.1",
          "Microsoft.Identity.Client": "4.61.3",
          "Microsoft.IdentityModel.JsonWebTokens": "6.35.0",
          "Microsoft.IdentityModel.Protocols.OpenIdConnect": "6.35.0",
          "Microsoft.SqlServer.Server": "1.0.0",
          "System.Configuration.ConfigurationManager": "6.0.1",
          "System.Diagnostics.DiagnosticSource": "9.0.0",
          "System.Runtime.Caching": "6.0.0",
          "System.Security.Cryptography.Cng": "5.0.0",
          "System.Security.Principal.Windows": "5.0.0",
          "System.Text.Encoding.CodePages": "6.0.0",
          "System.Text.Encodings.Web": "9.0.0"
        },
        "runtime": {
          "lib/net6.0/Microsoft.Data.SqlClient.dll": {
            "assemblyVersion": "5.0.0.0",
            "fileVersion": "5.16.24240.5"
          }
        },
        "runtimeTargets": {
          "runtimes/unix/lib/net6.0/Microsoft.Data.SqlClient.dll": {
            "rid": "unix",
            "assetType": "runtime",
            "assemblyVersion": "5.0.0.0",
            "fileVersion": "5.16.24240.5"
          },
          "runtimes/win/lib/net6.0/Microsoft.Data.SqlClient.dll": {
            "rid": "win",
            "assetType": "runtime",
            "assemblyVersion": "5.0.0.0",
            "fileVersion": "5.16.24240.5"
          }
        }
      },
      "Microsoft.Data.SqlClient.SNI.runtime/5.1.1": {
        "runtimeTargets": {
          "runtimes/win-arm/native/Microsoft.Data.SqlClient.SNI.dll": {
            "rid": "win-arm",
            "assetType": "native",
            "fileVersion": "5.1.1.0"
          },
          "runtimes/win-arm64/native/Microsoft.Data.SqlClient.SNI.dll": {
            "rid": "win-arm64",
            "assetType": "native",
            "fileVersion": "5.1.1.0"
          },
          "runtimes/win-x64/native/Microsoft.Data.SqlClient.SNI.dll": {
            "rid": "win-x64",
            "assetType": "native",
            "fileVersion": "5.1.1.0"
          },
          "runtimes/win-x86/native/Microsoft.Data.SqlClient.SNI.dll": {
            "rid": "win-x86",
            "assetType": "native",
            "fileVersion": "5.1.1.0"
          }
        }
      },
      "Microsoft.EntityFrameworkCore/8.0.11": {
        "dependencies": {
          "Microsoft.EntityFrameworkCore.Abstractions": "8.0.11",
          "Microsoft.EntityFrameworkCore.Analyzers": "8.0.11",
          "Microsoft.Extensions.Caching.Memory": "8.0.1",
          "Microsoft.Extensions.Logging": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.dll": {
            "assemblyVersion": "8.0.11.0",
            "fileVersion": "8.0.1124.52104"
          }
        }
      },
      "Microsoft.EntityFrameworkCore.Abstractions/8.0.11": {
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Abstractions.dll": {
            "assemblyVersion": "8.0.11.0",
            "fileVersion": "8.0.1124.52104"
          }
        }
      },
      "Microsoft.EntityFrameworkCore.Analyzers/8.0.11": {},
      "Microsoft.EntityFrameworkCore.Relational/8.0.11": {
        "dependencies": {
          "Microsoft.EntityFrameworkCore": "8.0.11",
          "Microsoft.Extensions.Configuration.Abstractions": "9.0.7"
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Relational.dll": {
            "assemblyVersion": "8.0.11.0",
            "fileVersion": "8.0.1124.52104"
          }
        }
      },
      "Microsoft.EntityFrameworkCore.SqlServer/8.0.11": {
        "dependencies": {
          "Microsoft.Data.SqlClient": "5.1.6",
          "Microsoft.EntityFrameworkCore.Relational": "8.0.11",
          "System.Formats.Asn1": "8.0.1"
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.SqlServer.dll": {
            "assemblyVersion": "8.0.11.0",
            "fileVersion": "8.0.1124.52104"
          }
        }
      },
      "Microsoft.Extensions.Caching.Abstractions/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Primitives": "9.0.7"
        }
      },
      "Microsoft.Extensions.Caching.Memory/8.0.1": {
        "dependencies": {
          "Microsoft.Extensions.Caching.Abstractions": "8.0.0",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "9.0.0",
          "Microsoft.Extensions.Options": "9.0.0",
          "Microsoft.Extensions.Primitives": "9.0.7"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Caching.Memory.dll": {
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.1024.46610"
          }
        }
      },
      "Microsoft.Extensions.Configuration/9.0.7": {
        "dependencies": {
          "Microsoft.Extensions.Configuration.Abstractions": "9.0.7",
          "Microsoft.Extensions.Primitives": "9.0.7"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Configuration.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.725.31616"
          }
        }
      },
      "Microsoft.Extensions.Configuration.Abstractions/9.0.7": {
        "dependencies": {
          "Microsoft.Extensions.Primitives": "9.0.7"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Configuration.Abstractions.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.725.31616"
          }
        }
      },
      "Microsoft.Extensions.Configuration.Binder/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Configuration.Abstractions": "9.0.7"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Configuration.Binder.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.DependencyInjection/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.DependencyInjection.Abstractions/9.0.0": {
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.DependencyModel/9.0.0": {
        "dependencies": {
          "System.Text.Encodings.Web": "9.0.0",
          "System.Text.Json": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyModel.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.Diagnostics.Abstractions/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0",
          "Microsoft.Extensions.Options": "9.0.0",
          "System.Diagnostics.DiagnosticSource": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Diagnostics.Abstractions.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.FileProviders.Abstractions/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Primitives": "9.0.7"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.FileProviders.Abstractions.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.Hosting.Abstractions/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Configuration.Abstractions": "9.0.7",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0",
          "Microsoft.Extensions.Diagnostics.Abstractions": "9.0.0",
          "Microsoft.Extensions.FileProviders.Abstractions": "9.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Hosting.Abstractions.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.Logging/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection": "9.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "9.0.0",
          "Microsoft.Extensions.Options": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Logging.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.Logging.Abstractions/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0",
          "System.Diagnostics.DiagnosticSource": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Logging.Abstractions.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.Options/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0",
          "Microsoft.Extensions.Primitives": "9.0.7"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Options.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.Primitives/9.0.7": {
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Primitives.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.725.31616"
          }
        }
      },
      "Microsoft.Identity.Client/4.61.3": {
        "dependencies": {
          "Microsoft.IdentityModel.Abstractions": "6.35.0",
          "System.Diagnostics.DiagnosticSource": "9.0.0"
        },
        "runtime": {
          "lib/net6.0/Microsoft.Identity.Client.dll": {
            "assemblyVersion": "4.61.3.0",
            "fileVersion": "4.61.3.0"
          }
        }
      },
      "Microsoft.Identity.Client.Extensions.Msal/4.61.3": {
        "dependencies": {
          "Microsoft.Identity.Client": "4.61.3",
          "System.Security.Cryptography.ProtectedData": "6.0.0"
        },
        "runtime": {
          "lib/net6.0/Microsoft.Identity.Client.Extensions.Msal.dll": {
            "assemblyVersion": "4.61.3.0",
            "fileVersion": "4.61.3.0"
          }
        }
      },
      "Microsoft.IdentityModel.Abstractions/6.35.0": {
        "runtime": {
          "lib/net6.0/Microsoft.IdentityModel.Abstractions.dll": {
            "assemblyVersion": "6.35.0.0",
            "fileVersion": "6.35.0.41201"
          }
        }
      },
      "Microsoft.IdentityModel.JsonWebTokens/6.35.0": {
        "dependencies": {
          "Microsoft.IdentityModel.Tokens": "6.35.0",
          "System.Text.Encoding": "4.3.0",
          "System.Text.Encodings.Web": "9.0.0",
          "System.Text.Json": "9.0.0"
        },
        "runtime": {
          "lib/net6.0/Microsoft.IdentityModel.JsonWebTokens.dll": {
            "assemblyVersion": "6.35.0.0",
            "fileVersion": "6.35.0.41201"
          }
        }
      },
      "Microsoft.IdentityModel.Logging/6.35.0": {
        "dependencies": {
          "Microsoft.IdentityModel.Abstractions": "6.35.0"
        },
        "runtime": {
          "lib/net6.0/Microsoft.IdentityModel.Logging.dll": {
            "assemblyVersion": "6.35.0.0",
            "fileVersion": "6.35.0.41201"
          }
        }
      },
      "Microsoft.IdentityModel.Protocols/6.35.0": {
        "dependencies": {
          "Microsoft.IdentityModel.Logging": "6.35.0",
          "Microsoft.IdentityModel.Tokens": "6.35.0"
        },
        "runtime": {
          "lib/net6.0/Microsoft.IdentityModel.Protocols.dll": {
            "assemblyVersion": "6.35.0.0",
            "fileVersion": "6.35.0.41201"
          }
        }
      },
      "Microsoft.IdentityModel.Protocols.OpenIdConnect/6.35.0": {
        "dependencies": {
          "Microsoft.IdentityModel.Protocols": "6.35.0",
          "System.IdentityModel.Tokens.Jwt": "6.35.0"
        },
        "runtime": {
          "lib/net6.0/Microsoft.IdentityModel.Protocols.OpenIdConnect.dll": {
            "assemblyVersion": "6.35.0.0",
            "fileVersion": "6.35.0.41201"
          }
        }
      },
      "Microsoft.IdentityModel.Tokens/6.35.0": {
        "dependencies": {
          "Microsoft.CSharp": "4.5.0",
          "Microsoft.IdentityModel.Logging": "6.35.0",
          "System.Security.Cryptography.Cng": "5.0.0"
        },
        "runtime": {
          "lib/net6.0/Microsoft.IdentityModel.Tokens.dll": {
            "assemblyVersion": "6.35.0.0",
            "fileVersion": "6.35.0.41201"
          }
        }
      },
      "Microsoft.NETCore.Platforms/1.1.0": {},
      "Microsoft.NETCore.Targets/1.1.0": {},
      "Microsoft.SqlServer.Server/1.0.0": {
        "runtime": {
          "lib/netstandard2.0/Microsoft.SqlServer.Server.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "Microsoft.Win32.SystemEvents/6.0.0": {
        "runtime": {
          "lib/net6.0/Microsoft.Win32.SystemEvents.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        },
        "runtimeTargets": {
          "runtimes/win/lib/net6.0/Microsoft.Win32.SystemEvents.dll": {
            "rid": "win",
            "assetType": "runtime",
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "Newtonsoft.Json/13.0.3": {
        "runtime": {
          "lib/net6.0/Newtonsoft.Json.dll": {
            "assemblyVersion": "13.0.0.0",
            "fileVersion": "13.0.3.27908"
          }
        }
      },
      "Serilog/4.3.0": {
        "runtime": {
          "lib/net8.0/Serilog.dll": {
            "assemblyVersion": "4.3.0.0",
            "fileVersion": "4.3.0.0"
          }
        }
      },
      "Serilog.AspNetCore/9.0.0": {
        "dependencies": {
          "Serilog": "4.3.0",
          "Serilog.Extensions.Hosting": "9.0.0",
          "Serilog.Formatting.Compact": "3.0.0",
          "Serilog.Settings.Configuration": "9.0.0",
          "Serilog.Sinks.Console": "6.0.0",
          "Serilog.Sinks.Debug": "3.0.0",
          "Serilog.Sinks.File": "7.0.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.AspNetCore.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.0.0"
          }
        }
      },
      "Serilog.Extensions.Hosting/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0",
          "Microsoft.Extensions.Hosting.Abstractions": "9.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "9.0.0",
          "Serilog": "4.3.0",
          "Serilog.Extensions.Logging": "9.0.2"
        },
        "runtime": {
          "lib/net8.0/Serilog.Extensions.Hosting.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.0.0"
          }
        }
      },
      "Serilog.Extensions.Logging/9.0.2": {
        "dependencies": {
          "Microsoft.Extensions.Logging": "9.0.0",
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Extensions.Logging.dll": {
            "assemblyVersion": "9.0.2.0",
            "fileVersion": "9.0.2.0"
          }
        }
      },
      "Serilog.Formatting.Compact/3.0.0": {
        "dependencies": {
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Formatting.Compact.dll": {
            "assemblyVersion": "3.0.0.0",
            "fileVersion": "3.0.0.0"
          }
        }
      },
      "Serilog.Settings.Configuration/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Configuration.Binder": "9.0.0",
          "Microsoft.Extensions.DependencyModel": "9.0.0",
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Settings.Configuration.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.0.0"
          }
        }
      },
      "Serilog.Sinks.Async/2.1.0": {
        "dependencies": {
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Sinks.Async.dll": {
            "assemblyVersion": "2.1.0.0",
            "fileVersion": "2.1.0.0"
          }
        }
      },
      "Serilog.Sinks.Console/6.0.0": {
        "dependencies": {
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Sinks.Console.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.0.0"
          }
        }
      },
      "Serilog.Sinks.Debug/3.0.0": {
        "dependencies": {
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Sinks.Debug.dll": {
            "assemblyVersion": "3.0.0.0",
            "fileVersion": "3.0.0.0"
          }
        }
      },
      "Serilog.Sinks.File/7.0.0": {
        "dependencies": {
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Sinks.File.dll": {
            "assemblyVersion": "7.0.0.0",
            "fileVersion": "7.0.0.0"
          }
        }
      },
      "Serilog.Sinks.PeriodicBatching/5.0.0": {
        "dependencies": {
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Sinks.PeriodicBatching.dll": {
            "assemblyVersion": "5.0.0.0",
            "fileVersion": "5.0.0.0"
          }
        }
      },
      "System.ClientModel/1.0.0": {
        "dependencies": {
          "System.Memory.Data": "1.0.2",
          "System.Text.Json": "9.0.0"
        },
        "runtime": {
          "lib/net6.0/System.ClientModel.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.24.5302"
          }
        }
      },
      "System.Configuration.ConfigurationManager/6.0.1": {
        "dependencies": {
          "System.Security.Cryptography.ProtectedData": "6.0.0",
          "System.Security.Permissions": "6.0.0"
        },
        "runtime": {
          "lib/net6.0/System.Configuration.ConfigurationManager.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.922.41905"
          }
        }
      },
      "System.Diagnostics.DiagnosticSource/9.0.0": {
        "runtime": {
          "lib/net8.0/System.Diagnostics.DiagnosticSource.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "System.Drawing.Common/6.0.0": {
        "dependencies": {
          "Microsoft.Win32.SystemEvents": "6.0.0"
        },
        "runtime": {
          "lib/net6.0/System.Drawing.Common.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        },
        "runtimeTargets": {
          "runtimes/unix/lib/net6.0/System.Drawing.Common.dll": {
            "rid": "unix",
            "assetType": "runtime",
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          },
          "runtimes/win/lib/net6.0/System.Drawing.Common.dll": {
            "rid": "win",
            "assetType": "runtime",
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "System.Formats.Asn1/8.0.1": {},
      "System.IdentityModel.Tokens.Jwt/6.35.0": {
        "dependencies": {
          "Microsoft.IdentityModel.JsonWebTokens": "6.35.0",
          "Microsoft.IdentityModel.Tokens": "6.35.0"
        },
        "runtime": {
          "lib/net6.0/System.IdentityModel.Tokens.Jwt.dll": {
            "assemblyVersion": "6.35.0.0",
            "fileVersion": "6.35.0.41201"
          }
        }
      },
      "System.IO.Pipelines/9.0.0": {
        "runtime": {
          "lib/net8.0/System.IO.Pipelines.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "System.Memory/4.5.4": {},
      "System.Memory.Data/1.0.2": {
        "dependencies": {
          "System.Text.Encodings.Web": "9.0.0",
          "System.Text.Json": "9.0.0"
        },
        "runtime": {
          "lib/netstandard2.0/System.Memory.Data.dll": {
            "assemblyVersion": "1.0.2.0",
            "fileVersion": "1.0.221.20802"
          }
        }
      },
      "System.Numerics.Vectors/4.5.0": {},
      "System.Runtime/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0"
        }
      },
      "System.Runtime.Caching/6.0.0": {
        "dependencies": {
          "System.Configuration.ConfigurationManager": "6.0.1"
        },
        "runtime": {
          "lib/net6.0/System.Runtime.Caching.dll": {
            "assemblyVersion": "4.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        },
        "runtimeTargets": {
          "runtimes/win/lib/net6.0/System.Runtime.Caching.dll": {
            "rid": "win",
            "assetType": "runtime",
            "assemblyVersion": "4.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "System.Runtime.CompilerServices.Unsafe/6.0.0": {},
      "System.Security.AccessControl/6.0.0": {},
      "System.Security.Cryptography.Cng/5.0.0": {
        "dependencies": {
          "System.Formats.Asn1": "8.0.1"
        }
      },
      "System.Security.Cryptography.ProtectedData/6.0.0": {
        "runtime": {
          "lib/net6.0/System.Security.Cryptography.ProtectedData.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        },
        "runtimeTargets": {
          "runtimes/win/lib/net6.0/System.Security.Cryptography.ProtectedData.dll": {
            "rid": "win",
            "assetType": "runtime",
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "System.Security.Permissions/6.0.0": {
        "dependencies": {
          "System.Security.AccessControl": "6.0.0",
          "System.Windows.Extensions": "6.0.0"
        },
        "runtime": {
          "lib/net6.0/System.Security.Permissions.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "System.Security.Principal.Windows/5.0.0": {},
      "System.Text.Encoding/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0",
          "System.Runtime": "4.3.0"
        }
      },
      "System.Text.Encoding.CodePages/6.0.0": {
        "dependencies": {
          "System.Runtime.CompilerServices.Unsafe": "6.0.0"
        }
      },
      "System.Text.Encodings.Web/9.0.0": {
        "runtime": {
          "lib/net8.0/System.Text.Encodings.Web.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        },
        "runtimeTargets": {
          "runtimes/browser/lib/net8.0/System.Text.Encodings.Web.dll": {
            "rid": "browser",
            "assetType": "runtime",
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "System.Text.Json/9.0.0": {
        "dependencies": {
          "System.IO.Pipelines": "9.0.0",
          "System.Text.Encodings.Web": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/System.Text.Json.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "System.Threading.Tasks.Extensions/4.5.4": {},
      "System.Windows.Extensions/6.0.0": {
        "dependencies": {
          "System.Drawing.Common": "6.0.0"
        },
        "runtime": {
          "lib/net6.0/System.Windows.Extensions.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        },
        "runtimeTargets": {
          "runtimes/win/lib/net6.0/System.Windows.Extensions.dll": {
            "rid": "win",
            "assetType": "runtime",
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "TahaMucasirogluBlog.Application.Managers/1.0.0": {
        "dependencies": {
          "Serilog": "4.3.0",
          "Serilog.AspNetCore": "9.0.0",
          "Serilog.Extensions.Logging": "9.0.2",
          "Serilog.Settings.Configuration": "9.0.0",
          "Serilog.Sinks.Async": "2.1.0",
          "Serilog.Sinks.Console": "6.0.0",
          "Serilog.Sinks.Debug": "3.0.0",
          "Serilog.Sinks.File": "7.0.0",
          "Serilog.Sinks.PeriodicBatching": "5.0.0",
          "TahaMucasirogluBlog.Domain.Constant": "1.0.0",
          "TahaMucasirogluBlog.Domain.DTOs": "1.0.0",
          "TahaMucasirogluBlog.Domain.Entities": "1.0.0",
          "TahaMucasirogluBlog.Domain.Extensions": "1.0.0",
          "TahaMucasirogluBlog.Domain.Models": "1.0.0",
          "TahaMucasirogluBlog.Domain.Return": "1.0.0"
        },
        "runtime": {
          "TahaMucasirogluBlog.Application.Managers.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Application.Mapper/1.0.0": {
        "dependencies": {
          "AutoMapper": "14.0.0",
          "TahaMucasirogluBlog.Domain.Constant": "1.0.0",
          "TahaMucasirogluBlog.Domain.DTOs": "1.0.0",
          "TahaMucasirogluBlog.Domain.Entities": "1.0.0",
          "TahaMucasirogluBlog.Domain.Extensions": "1.0.0",
          "TahaMucasirogluBlog.Domain.Models": "1.0.0",
          "TahaMucasirogluBlog.Domain.Return": "1.0.0"
        },
        "runtime": {
          "TahaMucasirogluBlog.Application.Mapper.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Application.Validation/1.0.0": {
        "dependencies": {
          "FluentValidation": "12.0.0",
          "FluentValidation.DependencyInjectionExtensions": "12.0.0",
          "TahaMucasirogluBlog.Domain.Constant": "1.0.0",
          "TahaMucasirogluBlog.Domain.DTOs": "1.0.0",
          "TahaMucasirogluBlog.Domain.Entities": "1.0.0",
          "TahaMucasirogluBlog.Domain.Extensions": "1.0.0",
          "TahaMucasirogluBlog.Domain.Models": "1.0.0",
          "TahaMucasirogluBlog.Domain.Return": "1.0.0"
        },
        "runtime": {
          "TahaMucasirogluBlog.Application.Validation.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Domain.Constant/1.0.0": {
        "runtime": {
          "TahaMucasirogluBlog.Domain.Constant.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Domain.DTOs/1.0.0": {
        "runtime": {
          "TahaMucasirogluBlog.Domain.DTOs.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Domain.Entities/1.0.0": {
        "runtime": {
          "TahaMucasirogluBlog.Domain.Entities.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Domain.Extensions/1.0.0": {
        "dependencies": {
          "Microsoft.EntityFrameworkCore": "8.0.11",
          "Microsoft.EntityFrameworkCore.Abstractions": "8.0.11",
          "Microsoft.EntityFrameworkCore.Analyzers": "8.0.11",
          "Microsoft.EntityFrameworkCore.SqlServer": "8.0.11",
          "Microsoft.Extensions.Configuration": "9.0.7",
          "Newtonsoft.Json": "13.0.3"
        },
        "runtime": {
          "TahaMucasirogluBlog.Domain.Extensions.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Domain.Models/1.0.0": {
        "runtime": {
          "TahaMucasirogluBlog.Domain.Models.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Domain.Return/1.0.0": {
        "runtime": {
          "TahaMucasirogluBlog.Domain.Return.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      }
    }
  },
  "libraries": {
    "TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "AutoMapper/14.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-OC+1neAPM4oCCqQj3g2GJ2shziNNhOkxmNB9cVS8jtx4JbgmRzLcUOxB9Tsz6cVPHugdkHgCaCrTjjSI0Z5sCQ==",
      "path": "automapper/14.0.0",
      "hashPath": "automapper.14.0.0.nupkg.sha512"
    },
    "Azure.Core/1.38.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-IuEgCoVA0ef7E4pQtpC3+TkPbzaoQfa77HlfJDmfuaJUCVJmn7fT0izamZiryW5sYUFKizsftIxMkXKbgIcPMQ==",
      "path": "azure.core/1.38.0",
      "hashPath": "azure.core.1.38.0.nupkg.sha512"
    },
    "Azure.Identity/1.11.4": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-Sf4BoE6Q3jTgFkgBkx7qztYOFELBCo+wQgpYDwal/qJ1unBH73ywPztIJKXBXORRzAeNijsuxhk94h0TIMvfYg==",
      "path": "azure.identity/1.11.4",
      "hashPath": "azure.identity.1.11.4.nupkg.sha512"
    },
    "bootstrap/5.3.7": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-VTOHw4PIzt/LqCszm7KZWMUpYU8Kmylk4DhEVwlIJ7p8I1jhP9L5Ej9Y+clpP7tjAVV4nXrNuNqGqfQI3axUFA==",
      "path": "bootstrap/5.3.7",
      "hashPath": "bootstrap.5.3.7.nupkg.sha512"
    },
    "FluentValidation/12.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-8NVLxtMUXynRHJIX3Hn1ACovaqZIJASufXIIFkD0EUbcd5PmMsL1xUD5h548gCezJ5BzlITaR9CAMrGe29aWpA==",
      "path": "fluentvalidation/12.0.0",
      "hashPath": "fluentvalidation.12.0.0.nupkg.sha512"
    },
    "FluentValidation.DependencyInjectionExtensions/12.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-B28fBRL1UjhGsBC8fwV6YBZosh+SiU1FxdD7l7p5dGPgRlVI7UnM+Lgzmg+unZtV1Zxzpaw96UY2MYfMaAd8cg==",
      "path": "fluentvalidation.dependencyinjectionextensions/12.0.0",
      "hashPath": "fluentvalidation.dependencyinjectionextensions.12.0.0.nupkg.sha512"
    },
    "Microsoft.Bcl.AsyncInterfaces/1.1.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-yuvf07qFWFqtK3P/MRkEKLhn5r2UbSpVueRziSqj0yJQIKFwG1pq9mOayK3zE5qZCTs0CbrwL9M6R8VwqyGy2w==",
      "path": "microsoft.bcl.asyncinterfaces/1.1.1",
      "hashPath": "microsoft.bcl.asyncinterfaces.1.1.1.nupkg.sha512"
    },
    "Microsoft.CSharp/4.5.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-kaj6Wb4qoMuH3HySFJhxwQfe8R/sJsNJnANrvv8WdFPMoNbKY5htfNscv+LHCu5ipz+49m2e+WQXpLXr9XYemQ==",
      "path": "microsoft.csharp/4.5.0",
      "hashPath": "microsoft.csharp.4.5.0.nupkg.sha512"
    },
    "Microsoft.Data.SqlClient/5.1.6": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-+pz7gIPh5ydsBcQvivt4R98PwJXer86fyQBBToIBLxZ5kuhW4N13Ijz87s9WpuPtF1vh4JesYCgpDPAOgkMhdg==",
      "path": "microsoft.data.sqlclient/5.1.6",
      "hashPath": "microsoft.data.sqlclient.5.1.6.nupkg.sha512"
    },
    "Microsoft.Data.SqlClient.SNI.runtime/5.1.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-wNGM5ZTQCa2blc9ikXQouybGiyMd6IHPVJvAlBEPtr6JepZEOYeDxGyprYvFVeOxlCXs7avridZQ0nYkHzQWCQ==",
      "path": "microsoft.data.sqlclient.sni.runtime/5.1.1",
      "hashPath": "microsoft.data.sqlclient.sni.runtime.5.1.1.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore/8.0.11": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-stbjWBTtpQ1HtqXMFyKnXFTr76PvaOHI2b2h85JqBi3eZr00nspvR/a90Zwh8CQ4rVawqLiTG0+0yZQWaav+sQ==",
      "path": "microsoft.entityframeworkcore/8.0.11",
      "hashPath": "microsoft.entityframeworkcore.8.0.11.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.Abstractions/8.0.11": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-++zY0Ea724ku1jptWJmF7jm3I4IXTexfT4qi1ETcSFFF7qj+qm6rRgN7mTuKkwIETuXk0ikfzudryRjUGrrNKQ==",
      "path": "microsoft.entityframeworkcore.abstractions/8.0.11",
      "hashPath": "microsoft.entityframeworkcore.abstractions.8.0.11.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.Analyzers/8.0.11": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-NI/AJQjtC7qgWM8Nr85sRkwlog2AnFer5RKP8xTUH0RuPF3nN0tGXBEeYJOLZWp+/+M/C6O7MMDRhKRE8bZwIA==",
      "path": "microsoft.entityframeworkcore.analyzers/8.0.11",
      "hashPath": "microsoft.entityframeworkcore.analyzers.8.0.11.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.Relational/8.0.11": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-3TuuW3i5I4Ro0yoaHmi2MqEDGObOVuhLaMEnd/heaLB1fcvm4fu4PevmC4BOWnI0vo176AIlV5o4rEQciLoohw==",
      "path": "microsoft.entityframeworkcore.relational/8.0.11",
      "hashPath": "microsoft.entityframeworkcore.relational.8.0.11.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.SqlServer/8.0.11": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-rYYo8RyteIfRns+GuCcPRf3J7jS8gu8AxUWmFejrGoHTTKINhylL27N+SkFwCjxK4mscokjhQ1zjjJoNQ9oijA==",
      "path": "microsoft.entityframeworkcore.sqlserver/8.0.11",
      "hashPath": "microsoft.entityframeworkcore.sqlserver.8.0.11.nupkg.sha512"
    },
    "Microsoft.Extensions.Caching.Abstractions/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-3KuSxeHoNYdxVYfg2IRZCThcrlJ1XJqIXkAWikCsbm5C/bCjv7G0WoKDyuR98Q+T607QT2Zl5GsbGRkENcV2yQ==",
      "path": "microsoft.extensions.caching.abstractions/8.0.0",
      "hashPath": "microsoft.extensions.caching.abstractions.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Caching.Memory/8.0.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-HFDnhYLccngrzyGgHkjEDU5FMLn4MpOsr5ElgsBMC4yx6lJh4jeWO7fHS8+TXPq+dgxCmUa/Trl8svObmwW4QA==",
      "path": "microsoft.extensions.caching.memory/8.0.1",
      "hashPath": "microsoft.extensions.caching.memory.8.0.1.nupkg.sha512"
    },
    "Microsoft.Extensions.Configuration/9.0.7": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-oxGR51+w5cXm5B9gU6XwpAB2sTiyPSmZm7hjvv0rzRnmL5o/KZzE103AuQj7sK26OBupjVzU/bZxDWvvU4nhEg==",
      "path": "microsoft.extensions.configuration/9.0.7",
      "hashPath": "microsoft.extensions.configuration.9.0.7.nupkg.sha512"
    },
    "Microsoft.Extensions.Configuration.Abstractions/9.0.7": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-lut/kiVvNsQ120VERMUYSFhpXPpKjjql+giy03LesASPBBcC0o6+aoFdzJH9GaYpFTQ3fGVhVjKjvJDoAW5/IQ==",
      "path": "microsoft.extensions.configuration.abstractions/9.0.7",
      "hashPath": "microsoft.extensions.configuration.abstractions.9.0.7.nupkg.sha512"
    },
    "Microsoft.Extensions.Configuration.Binder/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-RiScL99DcyngY9zJA2ROrri7Br8tn5N4hP4YNvGdTN/bvg1A3dwvDOxHnNZ3Im7x2SJ5i4LkX1uPiR/MfSFBLQ==",
      "path": "microsoft.extensions.configuration.binder/9.0.0",
      "hashPath": "microsoft.extensions.configuration.binder.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.DependencyInjection/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-MCPrg7v3QgNMr0vX4vzRXvkNGgLg8vKWX0nKCWUxu2uPyMsaRgiRc1tHBnbTcfJMhMKj2slE/j2M9oGkd25DNw==",
      "path": "microsoft.extensions.dependencyinjection/9.0.0",
      "hashPath": "microsoft.extensions.dependencyinjection.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.DependencyInjection.Abstractions/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-+6f2qv2a3dLwd5w6JanPIPs47CxRbnk+ZocMJUhv9NxP88VlOcJYZs9jY+MYSjxvady08bUZn6qgiNh7DadGgg==",
      "path": "microsoft.extensions.dependencyinjection.abstractions/9.0.0",
      "hashPath": "microsoft.extensions.dependencyinjection.abstractions.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.DependencyModel/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-saxr2XzwgDU77LaQfYFXmddEDRUKHF4DaGMZkNB3qjdVSZlax3//dGJagJkKrGMIPNZs2jVFXITyCCR6UHJNdA==",
      "path": "microsoft.extensions.dependencymodel/9.0.0",
      "hashPath": "microsoft.extensions.dependencymodel.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Diagnostics.Abstractions/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-1K8P7XzuzX8W8pmXcZjcrqS6x5eSSdvhQohmcpgiQNY/HlDAlnrhR9dvlURfFz428A+RTCJpUyB+aKTA6AgVcQ==",
      "path": "microsoft.extensions.diagnostics.abstractions/9.0.0",
      "hashPath": "microsoft.extensions.diagnostics.abstractions.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.FileProviders.Abstractions/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-uK439QzYR0q2emLVtYzwyK3x+T5bTY4yWsd/k/ZUS9LR6Sflp8MIdhGXW8kQCd86dQD4tLqvcbLkku8qHY263Q==",
      "path": "microsoft.extensions.fileproviders.abstractions/9.0.0",
      "hashPath": "microsoft.extensions.fileproviders.abstractions.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Hosting.Abstractions/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-yUKJgu81ExjvqbNWqZKshBbLntZMbMVz/P7Way2SBx7bMqA08Mfdc9O7hWDKAiSp+zPUGT6LKcSCQIPeDK+CCw==",
      "path": "microsoft.extensions.hosting.abstractions/9.0.0",
      "hashPath": "microsoft.extensions.hosting.abstractions.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Logging/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-crjWyORoug0kK7RSNJBTeSE6VX8IQgLf3nUpTB9m62bPXp/tzbnOsnbe8TXEG0AASNaKZddnpHKw7fET8E++Pg==",
      "path": "microsoft.extensions.logging/9.0.0",
      "hashPath": "microsoft.extensions.logging.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Logging.Abstractions/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-g0UfujELzlLbHoVG8kPKVBaW470Ewi+jnptGS9KUi6jcb+k2StujtK3m26DFSGGwQ/+bVgZfsWqNzlP6YOejvw==",
      "path": "microsoft.extensions.logging.abstractions/9.0.0",
      "hashPath": "microsoft.extensions.logging.abstractions.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Options/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-y2146b3jrPI3Q0lokKXdKLpmXqakYbDIPDV6r3M8SqvSf45WwOTzkyfDpxnZXJsJQEpAsAqjUq5Pu8RCJMjubg==",
      "path": "microsoft.extensions.options/9.0.0",
      "hashPath": "microsoft.extensions.options.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Primitives/9.0.7": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-ti/zD9BuuO50IqlvhWQs9GHxkCmoph5BHjGiWKdg2t6Or8XoyAfRJiKag+uvd/fpASnNklfsB01WpZ4fhAe0VQ==",
      "path": "microsoft.extensions.primitives/9.0.7",
      "hashPath": "microsoft.extensions.primitives.9.0.7.nupkg.sha512"
    },
    "Microsoft.Identity.Client/4.61.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-naJo/Qm35Caaoxp5utcw+R8eU8ZtLz2ALh8S+gkekOYQ1oazfCQMWVT4NJ/FnHzdIJlm8dMz0oMpMGCabx5odA==",
      "path": "microsoft.identity.client/4.61.3",
      "hashPath": "microsoft.identity.client.4.61.3.nupkg.sha512"
    },
    "Microsoft.Identity.Client.Extensions.Msal/4.61.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-PWnJcznrSGr25MN8ajlc2XIDW4zCFu0U6FkpaNLEWLgd1NgFCp5uDY3mqLDgM8zCN8hqj8yo5wHYfLB2HjcdGw==",
      "path": "microsoft.identity.client.extensions.msal/4.61.3",
      "hashPath": "microsoft.identity.client.extensions.msal.4.61.3.nupkg.sha512"
    },
    "Microsoft.IdentityModel.Abstractions/6.35.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-xuR8E4Rd96M41CnUSCiOJ2DBh+z+zQSmyrYHdYhD6K4fXBcQGVnRCFQ0efROUYpP+p0zC1BLKr0JRpVuujTZSg==",
      "path": "microsoft.identitymodel.abstractions/6.35.0",
      "hashPath": "microsoft.identitymodel.abstractions.6.35.0.nupkg.sha512"
    },
    "Microsoft.IdentityModel.JsonWebTokens/6.35.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-9wxai3hKgZUb4/NjdRKfQd0QJvtXKDlvmGMYACbEC8DFaicMFCFhQFZq9ZET1kJLwZahf2lfY5Gtcpsx8zYzbg==",
      "path": "microsoft.identitymodel.jsonwebtokens/6.35.0",
      "hashPath": "microsoft.identitymodel.jsonwebtokens.6.35.0.nupkg.sha512"
    },
    "Microsoft.IdentityModel.Logging/6.35.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-jePrSfGAmqT81JDCNSY+fxVWoGuJKt9e6eJ+vT7+quVS55nWl//jGjUQn4eFtVKt4rt5dXaleZdHRB9J9AJZ7Q==",
      "path": "microsoft.identitymodel.logging/6.35.0",
      "hashPath": "microsoft.identitymodel.logging.6.35.0.nupkg.sha512"
    },
    "Microsoft.IdentityModel.Protocols/6.35.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-BPQhlDzdFvv1PzaUxNSk+VEPwezlDEVADIKmyxubw7IiELK18uJ06RQ9QKKkds30XI+gDu9n8j24XQ8w7fjWcg==",
      "path": "microsoft.identitymodel.protocols/6.35.0",
      "hashPath": "microsoft.identitymodel.protocols.6.35.0.nupkg.sha512"
    },
    "Microsoft.IdentityModel.Protocols.OpenIdConnect/6.35.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-LMtVqnECCCdSmyFoCOxIE5tXQqkOLrvGrL7OxHg41DIm1bpWtaCdGyVcTAfOQpJXvzND9zUKIN/lhngPkYR8vg==",
      "path": "microsoft.identitymodel.protocols.openidconnect/6.35.0",
      "hashPath": "microsoft.identitymodel.protocols.openidconnect.6.35.0.nupkg.sha512"
    },
    "Microsoft.IdentityModel.Tokens/6.35.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-RN7lvp7s3Boucg1NaNAbqDbxtlLj5Qeb+4uSS1TeK5FSBVM40P4DKaTKChT43sHyKfh7V0zkrMph6DdHvyA4bg==",
      "path": "microsoft.identitymodel.tokens/6.35.0",
      "hashPath": "microsoft.identitymodel.tokens.6.35.0.nupkg.sha512"
    },
    "Microsoft.NETCore.Platforms/1.1.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-kz0PEW2lhqygehI/d6XsPCQzD7ff7gUJaVGPVETX611eadGsA3A877GdSlU0LRVMCTH/+P3o2iDTak+S08V2+A==",
      "path": "microsoft.netcore.platforms/1.1.0",
      "hashPath": "microsoft.netcore.platforms.1.1.0.nupkg.sha512"
    },
    "Microsoft.NETCore.Targets/1.1.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-aOZA3BWfz9RXjpzt0sRJJMjAscAUm3Hoa4UWAfceV9UTYxgwZ1lZt5nO2myFf+/jetYQo4uTP7zS8sJY67BBxg==",
      "path": "microsoft.netcore.targets/1.1.0",
      "hashPath": "microsoft.netcore.targets.1.1.0.nupkg.sha512"
    },
    "Microsoft.SqlServer.Server/1.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-N4KeF3cpcm1PUHym1RmakkzfkEv3GRMyofVv40uXsQhCQeglr2OHNcUk2WOG51AKpGO8ynGpo9M/kFXSzghwug==",
      "path": "microsoft.sqlserver.server/1.0.0",
      "hashPath": "microsoft.sqlserver.server.1.0.0.nupkg.sha512"
    },
    "Microsoft.Win32.SystemEvents/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-hqTM5628jSsQiv+HGpiq3WKBl2c8v1KZfby2J6Pr7pEPlK9waPdgEO6b8A/+/xn/yZ9ulv8HuqK71ONy2tg67A==",
      "path": "microsoft.win32.systemevents/6.0.0",
      "hashPath": "microsoft.win32.systemevents.6.0.0.nupkg.sha512"
    },
    "Newtonsoft.Json/13.0.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-HrC5BXdl00IP9zeV+0Z848QWPAoCr9P3bDEZguI+gkLcBKAOxix/tLEAAHC+UvDNPv4a2d18lOReHMOagPa+zQ==",
      "path": "newtonsoft.json/13.0.3",
      "hashPath": "newtonsoft.json.13.0.3.nupkg.sha512"
    },
    "Serilog/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-+cDryFR0GRhsGOnZSKwaDzRRl4MupvJ42FhCE4zhQRVanX0Jpg6WuCBk59OVhVDPmab1bB+nRykAnykYELA9qQ==",
      "path": "serilog/4.3.0",
      "hashPath": "serilog.4.3.0.nupkg.sha512"
    },
    "Serilog.AspNetCore/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-JslDajPlBsn3Pww1554flJFTqROvK9zz9jONNQgn0D8Lx2Trw8L0A8/n6zEQK1DAZWXrJwiVLw8cnTR3YFuYsg==",
      "path": "serilog.aspnetcore/9.0.0",
      "hashPath": "serilog.aspnetcore.9.0.0.nupkg.sha512"
    },
    "Serilog.Extensions.Hosting/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-u2TRxuxbjvTAldQn7uaAwePkWxTHIqlgjelekBtilAGL5sYyF3+65NWctN4UrwwGLsDC7c3Vz3HnOlu+PcoxXg==",
      "path": "serilog.extensions.hosting/9.0.0",
      "hashPath": "serilog.extensions.hosting.9.0.0.nupkg.sha512"
    },
    "Serilog.Extensions.Logging/9.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-p8kk2McN6LxuQfLyCoOkL7+nJIhVKnV1WFUxAaGTQTQk0wySbgmCHe98j+xSQvIbYHtzKXROOE2G2R0TLwBfig==",
      "path": "serilog.extensions.logging/9.0.2",
      "hashPath": "serilog.extensions.logging.9.0.2.nupkg.sha512"
    },
    "Serilog.Formatting.Compact/3.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-wQsv14w9cqlfB5FX2MZpNsTawckN4a8dryuNGbebB/3Nh1pXnROHZov3swtu3Nj5oNG7Ba+xdu7Et/ulAUPanQ==",
      "path": "serilog.formatting.compact/3.0.0",
      "hashPath": "serilog.formatting.compact.3.0.0.nupkg.sha512"
    },
    "Serilog.Settings.Configuration/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-4/Et4Cqwa+F88l5SeFeNZ4c4Z6dEAIKbu3MaQb2Zz9F/g27T5a3wvfMcmCOaAiACjfUb4A6wrlTVfyYUZk3RRQ==",
      "path": "serilog.settings.configuration/9.0.0",
      "hashPath": "serilog.settings.configuration.9.0.0.nupkg.sha512"
    },
    "Serilog.Sinks.Async/2.1.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-SnmRknWsSMgyo9wDXeZZCqSp48kkQYy44taSM6vcpxfiRICzSf09oLKEmVr0RCwQnfd8mJQ2WNN6nvhqf0RowQ==",
      "path": "serilog.sinks.async/2.1.0",
      "hashPath": "serilog.sinks.async.2.1.0.nupkg.sha512"
    },
    "Serilog.Sinks.Console/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-fQGWqVMClCP2yEyTXPIinSr5c+CBGUvBybPxjAGcf7ctDhadFhrQw03Mv8rJ07/wR5PDfFjewf2LimvXCDzpbA==",
      "path": "serilog.sinks.console/6.0.0",
      "hashPath": "serilog.sinks.console.6.0.0.nupkg.sha512"
    },
    "Serilog.Sinks.Debug/3.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-4BzXcdrgRX7wde9PmHuYd9U6YqycCC28hhpKonK7hx0wb19eiuRj16fPcPSVp0o/Y1ipJuNLYQ00R3q2Zs8FDA==",
      "path": "serilog.sinks.debug/3.0.0",
      "hashPath": "serilog.sinks.debug.3.0.0.nupkg.sha512"
    },
    "Serilog.Sinks.File/7.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-fKL7mXv7qaiNBUC71ssvn/dU0k9t0o45+qm2XgKAlSt19xF+ijjxyA3R6HmCgfKEKwfcfkwWjayuQtRueZFkYw==",
      "path": "serilog.sinks.file/7.0.0",
      "hashPath": "serilog.sinks.file.7.0.0.nupkg.sha512"
    },
    "Serilog.Sinks.PeriodicBatching/5.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-k57sDVgYitVdA5h9XSvy8lSlEts1ZzqlApHINUNV5WIuvnt6Z18LNynUQI6JYioKdqbUhkY6+KP844w7/awcOw==",
      "path": "serilog.sinks.periodicbatching/5.0.0",
      "hashPath": "serilog.sinks.periodicbatching.5.0.0.nupkg.sha512"
    },
    "System.ClientModel/1.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-I3CVkvxeqFYjIVEP59DnjbeoGNfo/+SZrCLpRz2v/g0gpCHaEMPtWSY0s9k/7jR1rAsLNg2z2u1JRB76tPjnIw==",
      "path": "system.clientmodel/1.0.0",
      "hashPath": "system.clientmodel.1.0.0.nupkg.sha512"
    },
    "System.Configuration.ConfigurationManager/6.0.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-jXw9MlUu/kRfEU0WyTptAVueupqIeE3/rl0EZDMlf8pcvJnitQ8HeVEp69rZdaStXwTV72boi/Bhw8lOeO+U2w==",
      "path": "system.configuration.configurationmanager/6.0.1",
      "hashPath": "system.configuration.configurationmanager.6.0.1.nupkg.sha512"
    },
    "System.Diagnostics.DiagnosticSource/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-ddppcFpnbohLWdYKr/ZeLZHmmI+DXFgZ3Snq+/E7SwcdW4UnvxmaugkwGywvGVWkHPGCSZjCP+MLzu23AL5SDw==",
      "path": "system.diagnostics.diagnosticsource/9.0.0",
      "hashPath": "system.diagnostics.diagnosticsource.9.0.0.nupkg.sha512"
    },
    "System.Drawing.Common/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-NfuoKUiP2nUWwKZN6twGqXioIe1zVD0RIj2t976A+czLHr2nY454RwwXs6JU9Htc6mwqL6Dn/nEL3dpVf2jOhg==",
      "path": "system.drawing.common/6.0.0",
      "hashPath": "system.drawing.common.6.0.0.nupkg.sha512"
    },
    "System.Formats.Asn1/8.0.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-XqKba7Mm/koKSjKMfW82olQdmfbI5yqeoLV/tidRp7fbh5rmHAQ5raDI/7SU0swTzv+jgqtUGkzmFxuUg0it1A==",
      "path": "system.formats.asn1/8.0.1",
      "hashPath": "system.formats.asn1.8.0.1.nupkg.sha512"
    },
    "System.IdentityModel.Tokens.Jwt/6.35.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-yxGIQd3BFK7F6S62/7RdZk3C/mfwyVxvh6ngd1VYMBmbJ1YZZA9+Ku6suylVtso0FjI0wbElpJ0d27CdsyLpBQ==",
      "path": "system.identitymodel.tokens.jwt/6.35.0",
      "hashPath": "system.identitymodel.tokens.jwt.6.35.0.nupkg.sha512"
    },
    "System.IO.Pipelines/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-eA3cinogwaNB4jdjQHOP3Z3EuyiDII7MT35jgtnsA4vkn0LUrrSHsU0nzHTzFzmaFYeKV7MYyMxOocFzsBHpTw==",
      "path": "system.io.pipelines/9.0.0",
      "hashPath": "system.io.pipelines.9.0.0.nupkg.sha512"
    },
    "System.Memory/4.5.4": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-1MbJTHS1lZ4bS4FmsJjnuGJOu88ZzTT2rLvrhW7Ygic+pC0NWA+3hgAen0HRdsocuQXCkUTdFn9yHJJhsijDXw==",
      "path": "system.memory/4.5.4",
      "hashPath": "system.memory.4.5.4.nupkg.sha512"
    },
    "System.Memory.Data/1.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-JGkzeqgBsiZwKJZ1IxPNsDFZDhUvuEdX8L8BDC8N3KOj+6zMcNU28CNN59TpZE/VJYy9cP+5M+sbxtWJx3/xtw==",
      "path": "system.memory.data/1.0.2",
      "hashPath": "system.memory.data.1.0.2.nupkg.sha512"
    },
    "System.Numerics.Vectors/4.5.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-QQTlPTl06J/iiDbJCiepZ4H//BVraReU4O4EoRw1U02H5TLUIT7xn3GnDp9AXPSlJUDyFs4uWjWafNX6WrAojQ==",
      "path": "system.numerics.vectors/4.5.0",
      "hashPath": "system.numerics.vectors.4.5.0.nupkg.sha512"
    },
    "System.Runtime/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-JufQi0vPQ0xGnAczR13AUFglDyVYt4Kqnz1AZaiKZ5+GICq0/1MH/mO/eAJHt/mHW1zjKBJd7kV26SrxddAhiw==",
      "path": "system.runtime/4.3.0",
      "hashPath": "system.runtime.4.3.0.nupkg.sha512"
    },
    "System.Runtime.Caching/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-E0e03kUp5X2k+UAoVl6efmI7uU7JRBWi5EIdlQ7cr0NpBGjHG4fWII35PgsBY9T4fJQ8E4QPsL0rKksU9gcL5A==",
      "path": "system.runtime.caching/6.0.0",
      "hashPath": "system.runtime.caching.6.0.0.nupkg.sha512"
    },
    "System.Runtime.CompilerServices.Unsafe/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-/iUeP3tq1S0XdNNoMz5C9twLSrM/TH+qElHkXWaPvuNOt+99G75NrV0OS2EqHx5wMN7popYjpc8oTjC1y16DLg==",
      "path": "system.runtime.compilerservices.unsafe/6.0.0",
      "hashPath": "system.runtime.compilerservices.unsafe.6.0.0.nupkg.sha512"
    },
    "System.Security.AccessControl/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-AUADIc0LIEQe7MzC+I0cl0rAT8RrTAKFHl53yHjEUzNVIaUlhFY11vc2ebiVJzVBuOzun6F7FBA+8KAbGTTedQ==",
      "path": "system.security.accesscontrol/6.0.0",
      "hashPath": "system.security.accesscontrol.6.0.0.nupkg.sha512"
    },
    "System.Security.Cryptography.Cng/5.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-jIMXsKn94T9JY7PvPq/tMfqa6GAaHpElRDpmG+SuL+D3+sTw2M8VhnibKnN8Tq+4JqbPJ/f+BwtLeDMEnzAvRg==",
      "path": "system.security.cryptography.cng/5.0.0",
      "hashPath": "system.security.cryptography.cng.5.0.0.nupkg.sha512"
    },
    "System.Security.Cryptography.ProtectedData/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-rp1gMNEZpvx9vP0JW0oHLxlf8oSiQgtno77Y4PLUBjSiDYoD77Y8uXHr1Ea5XG4/pIKhqAdxZ8v8OTUtqo9PeQ==",
      "path": "system.security.cryptography.protecteddata/6.0.0",
      "hashPath": "system.security.cryptography.protecteddata.6.0.0.nupkg.sha512"
    },
    "System.Security.Permissions/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-T/uuc7AklkDoxmcJ7LGkyX1CcSviZuLCa4jg3PekfJ7SU0niF0IVTXwUiNVP9DSpzou2PpxJ+eNY2IfDM90ZCg==",
      "path": "system.security.permissions/6.0.0",
      "hashPath": "system.security.permissions.6.0.0.nupkg.sha512"
    },
    "System.Security.Principal.Windows/5.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-t0MGLukB5WAVU9bO3MGzvlGnyJPgUlcwerXn1kzBRjwLKixT96XV0Uza41W49gVd8zEMFu9vQEFlv0IOrytICA==",
      "path": "system.security.principal.windows/5.0.0",
      "hashPath": "system.security.principal.windows.5.0.0.nupkg.sha512"
    },
    "System.Text.Encoding/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-BiIg+KWaSDOITze6jGQynxg64naAPtqGHBwDrLaCtixsa5bKiR8dpPOHA7ge3C0JJQizJE+sfkz1wV+BAKAYZw==",
      "path": "system.text.encoding/4.3.0",
      "hashPath": "system.text.encoding.4.3.0.nupkg.sha512"
    },
    "System.Text.Encoding.CodePages/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-ZFCILZuOvtKPauZ/j/swhvw68ZRi9ATCfvGbk1QfydmcXBkIWecWKn/250UH7rahZ5OoDBaiAudJtPvLwzw85A==",
      "path": "system.text.encoding.codepages/6.0.0",
      "hashPath": "system.text.encoding.codepages.6.0.0.nupkg.sha512"
    },
    "System.Text.Encodings.Web/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-e2hMgAErLbKyUUwt18qSBf9T5Y+SFAL3ZedM8fLupkVj8Rj2PZ9oxQ37XX2LF8fTO1wNIxvKpihD7Of7D/NxZw==",
      "path": "system.text.encodings.web/9.0.0",
      "hashPath": "system.text.encodings.web.9.0.0.nupkg.sha512"
    },
    "System.Text.Json/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-js7+qAu/9mQvnhA4EfGMZNEzXtJCDxgkgj8ohuxq/Qxv+R56G+ljefhiJHOxTNiw54q8vmABCWUwkMulNdlZ4A==",
      "path": "system.text.json/9.0.0",
      "hashPath": "system.text.json.9.0.0.nupkg.sha512"
    },
    "System.Threading.Tasks.Extensions/4.5.4": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-zteT+G8xuGu6mS+mzDzYXbzS7rd3K6Fjb9RiZlYlJPam2/hU7JCBZBVEcywNuR+oZ1ncTvc/cq0faRr3P01OVg==",
      "path": "system.threading.tasks.extensions/4.5.4",
      "hashPath": "system.threading.tasks.extensions.4.5.4.nupkg.sha512"
    },
    "System.Windows.Extensions/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-IXoJOXIqc39AIe+CIR7koBtRGMiCt/LPM3lI+PELtDIy9XdyeSrwXFdWV9dzJ2Awl0paLWUaknLxFQ5HpHZUog==",
      "path": "system.windows.extensions/6.0.0",
      "hashPath": "system.windows.extensions.6.0.0.nupkg.sha512"
    },
    "TahaMucasirogluBlog.Application.Managers/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Application.Mapper/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Application.Validation/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Domain.Constant/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Domain.DTOs/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Domain.Entities/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Domain.Extensions/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Domain.Models/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Domain.Return/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    }
  }
}


=== DOSYA: Publishes\CvSite\TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC.runtimeconfig.json ===

[İÇERİK]
{
  "runtimeOptions": {
    "tfm": "net8.0",
    "frameworks": [
      {
        "name": "Microsoft.NETCore.App",
        "version": "8.0.0"
      },
      {
        "name": "Microsoft.AspNetCore.App",
        "version": "8.0.0"
      }
    ],
    "configProperties": {
      "System.GC.Server": true,
      "System.Reflection.Metadata.MetadataUpdater.IsSupported": false,
      "System.Reflection.NullabilityInfoContext.IsSupported": true,
      "System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization": false
    }
  }
}


=== DOSYA: Publishes\CvSite\TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC.staticwebassets.endpoints.json ===

[İÇERİK]
{"Version":1,"ManifestType":"Publish","Endpoints":[{"Route":"Images/car-icon.jxdhrinicc.svg","AssetFile":"Images/car-icon.svg","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"1561"},{"Name":"Content-Type","Value":"image/svg+xml"},{"Name":"ETag","Value":"\"OSzJgXkN4ovwZ0MdYttUd+atqlBSpqFzn/rcqi6TSr0=\""},{"Name":"Last-Modified","Value":"Sun, 13 Jul 2025 08:29:07 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"jxdhrinicc"},{"Name":"integrity","Value":"sha256-OSzJgXkN4ovwZ0MdYttUd+atqlBSpqFzn/rcqi6TSr0="},{"Name":"label","Value":"Images/car-icon.svg"}]},{"Route":"Images/car-icon.svg","AssetFile":"Images/car-icon.svg","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"1561"},{"Name":"Content-Type","Value":"image/svg+xml"},{"Name":"ETag","Value":"\"OSzJgXkN4ovwZ0MdYttUd+atqlBSpqFzn/rcqi6TSr0=\""},{"Name":"Last-Modified","Value":"Sun, 13 Jul 2025 08:29:07 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-OSzJgXkN4ovwZ0MdYttUd+atqlBSpqFzn/rcqi6TSr0="}]},{"Route":"Images/tahapp.png","AssetFile":"Images/tahapp.png","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"261562"},{"Name":"Content-Type","Value":"image/png"},{"Name":"ETag","Value":"\"ae937w1xKKqX3LZxKw3WreBa5nMOdJ5ir1NXarZFhxQ=\""},{"Name":"Last-Modified","Value":"Sun, 08 Jun 2025 15:01:35 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-ae937w1xKKqX3LZxKw3WreBa5nMOdJ5ir1NXarZFhxQ="}]},{"Route":"Images/tahapp.r3pafdvjkc.png","AssetFile":"Images/tahapp.png","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"261562"},{"Name":"Content-Type","Value":"image/png"},{"Name":"ETag","Value":"\"ae937w1xKKqX3LZxKw3WreBa5nMOdJ5ir1NXarZFhxQ=\""},{"Name":"Last-Modified","Value":"Sun, 08 Jun 2025 15:01:35 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"r3pafdvjkc"},{"Name":"integrity","Value":"sha256-ae937w1xKKqX3LZxKw3WreBa5nMOdJ5ir1NXarZFhxQ="},{"Name":"label","Value":"Images/tahapp.png"}]},{"Route":"Pages/ApiErrorLayoutPageAsset/main.1tkzaycb1s.css","AssetFile":"Pages/ApiErrorLayoutPageAsset/main.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"8108"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"FebVCdmtpxcW7373Cm7m6cfA7n2lVaAaqF6XlyEGeSg=\""},{"Name":"Last-Modified","Value":"Sun, 13 Jul 2025 07:51:07 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"1tkzaycb1s"},{"Name":"integrity","Value":"sha256-FebVCdmtpxcW7373Cm7m6cfA7n2lVaAaqF6XlyEGeSg="},{"Name":"label","Value":"Pages/ApiErrorLayoutPageAsset/main.css"}]},{"Route":"Pages/ApiErrorLayoutPageAsset/main.css","AssetFile":"Pages/ApiErrorLayoutPageAsset/main.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"8108"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"FebVCdmtpxcW7373Cm7m6cfA7n2lVaAaqF6XlyEGeSg=\""},{"Name":"Last-Modified","Value":"Sun, 13 Jul 2025 07:51:07 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-FebVCdmtpxcW7373Cm7m6cfA7n2lVaAaqF6XlyEGeSg="}]},{"Route":"Pages/ApiErrorLayoutPageAsset/main.js","AssetFile":"Pages/ApiErrorLayoutPageAsset/main.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"228"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"gzSOHUelp63wY6y0VRfOO0fEgHr/UtUg6K/wRS/mpj8=\""},{"Name":"Last-Modified","Value":"Sun, 13 Jul 2025 07:51:07 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-gzSOHUelp63wY6y0VRfOO0fEgHr/UtUg6K/wRS/mpj8="}]},{"Route":"Pages/ApiErrorLayoutPageAsset/main.pt1lfkpcyq.js","AssetFile":"Pages/ApiErrorLayoutPageAsset/main.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"228"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"gzSOHUelp63wY6y0VRfOO0fEgHr/UtUg6K/wRS/mpj8=\""},{"Name":"Last-Modified","Value":"Sun, 13 Jul 2025 07:51:07 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"pt1lfkpcyq"},{"Name":"integrity","Value":"sha256-gzSOHUelp63wY6y0VRfOO0fEgHr/UtUg6K/wRS/mpj8="},{"Name":"label","Value":"Pages/ApiErrorLayoutPageAsset/main.js"}]},{"Route":"Pages/HomePageAsset/main.c5mgpdqylj.js","AssetFile":"Pages/HomePageAsset/main.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"14886"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"IAGUSGrsJp9Fmc7T5JoKwPO0PvIWWBcYZncqEs4CV9M=\""},{"Name":"Last-Modified","Value":"Sun, 13 Jul 2025 10:06:25 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"c5mgpdqylj"},{"Name":"integrity","Value":"sha256-IAGUSGrsJp9Fmc7T5JoKwPO0PvIWWBcYZncqEs4CV9M="},{"Name":"label","Value":"Pages/HomePageAsset/main.js"}]},{"Route":"Pages/HomePageAsset/main.css","AssetFile":"Pages/HomePageAsset/main.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"20710"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"YlRGlJKu9BEAxJ35J7leB8Kt5yRi0WKvRhcQN5miUcw=\""},{"Name":"Last-Modified","Value":"Sun, 13 Jul 2025 10:06:18 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-YlRGlJKu9BEAxJ35J7leB8Kt5yRi0WKvRhcQN5miUcw="}]},{"Route":"Pages/HomePageAsset/main.i8f1l3nvrv.css","AssetFile":"Pages/HomePageAsset/main.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"20710"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"YlRGlJKu9BEAxJ35J7leB8Kt5yRi0WKvRhcQN5miUcw=\""},{"Name":"Last-Modified","Value":"Sun, 13 Jul 2025 10:06:18 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"i8f1l3nvrv"},{"Name":"integrity","Value":"sha256-YlRGlJKu9BEAxJ35J7leB8Kt5yRi0WKvRhcQN5miUcw="},{"Name":"label","Value":"Pages/HomePageAsset/main.css"}]},{"Route":"Pages/HomePageAsset/main.js","AssetFile":"Pages/HomePageAsset/main.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"14886"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"IAGUSGrsJp9Fmc7T5JoKwPO0PvIWWBcYZncqEs4CV9M=\""},{"Name":"Last-Modified","Value":"Sun, 13 Jul 2025 10:06:25 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-IAGUSGrsJp9Fmc7T5JoKwPO0PvIWWBcYZncqEs4CV9M="}]},{"Route":"Pages/MaintenancePageAsset/main.3vr8wgql8t.js","AssetFile":"Pages/MaintenancePageAsset/main.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"3079"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"8YDsaXmQCin053wrMVaU9voIGhWY5niSTeayCbvduGY=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 20:44:38 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"3vr8wgql8t"},{"Name":"integrity","Value":"sha256-8YDsaXmQCin053wrMVaU9voIGhWY5niSTeayCbvduGY="},{"Name":"label","Value":"Pages/MaintenancePageAsset/main.js"}]},{"Route":"Pages/MaintenancePageAsset/main.bhuu9vrjvo.css","AssetFile":"Pages/MaintenancePageAsset/main.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"9080"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"z+rK+qeh2ip+hlGDLfvJG06pEdc4TaNkLjL5Gq3WaWI=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 20:44:38 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"bhuu9vrjvo"},{"Name":"integrity","Value":"sha256-z+rK+qeh2ip+hlGDLfvJG06pEdc4TaNkLjL5Gq3WaWI="},{"Name":"label","Value":"Pages/MaintenancePageAsset/main.css"}]},{"Route":"Pages/MaintenancePageAsset/main.css","AssetFile":"Pages/MaintenancePageAsset/main.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"9080"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"z+rK+qeh2ip+hlGDLfvJG06pEdc4TaNkLjL5Gq3WaWI=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 20:44:38 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-z+rK+qeh2ip+hlGDLfvJG06pEdc4TaNkLjL5Gq3WaWI="}]},{"Route":"Pages/MaintenancePageAsset/main.js","AssetFile":"Pages/MaintenancePageAsset/main.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"3079"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"8YDsaXmQCin053wrMVaU9voIGhWY5niSTeayCbvduGY=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 20:44:38 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-8YDsaXmQCin053wrMVaU9voIGhWY5niSTeayCbvduGY="}]},{"Route":"TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC.styles.css","AssetFile":"TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC.styles.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"1166"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"8zg3RLGm1VOcveMOPjV7u1nNO1+rp3spJB3GYdzZiZU=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 21:03:34 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-8zg3RLGm1VOcveMOPjV7u1nNO1+rp3spJB3GYdzZiZU="}]},{"Route":"TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC.tgjupojbkp.styles.css","AssetFile":"TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC.styles.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"1166"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"8zg3RLGm1VOcveMOPjV7u1nNO1+rp3spJB3GYdzZiZU=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 21:03:34 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"tgjupojbkp"},{"Name":"integrity","Value":"sha256-8zg3RLGm1VOcveMOPjV7u1nNO1+rp3spJB3GYdzZiZU="},{"Name":"label","Value":"TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC.styles.css"}]},{"Route":"css/bootstrap-grid.css","AssetFile":"css/bootstrap-grid.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"70323"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"6aHQppfEko/srtbO3ubCBn9bCz25XtsZoZB8XwnYz34=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-6aHQppfEko/srtbO3ubCBn9bCz25XtsZoZB8XwnYz34="}]},{"Route":"css/bootstrap-grid.css.4weum1d8i3.map","AssetFile":"css/bootstrap-grid.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"203340"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"HA9YLrNkqlffVSkFCLsPOLpzvER9oRo1Zkrvt9F9q98=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"4weum1d8i3"},{"Name":"integrity","Value":"sha256-HA9YLrNkqlffVSkFCLsPOLpzvER9oRo1Zkrvt9F9q98="},{"Name":"label","Value":"css/bootstrap-grid.css.map"}]},{"Route":"css/bootstrap-grid.css.map","AssetFile":"css/bootstrap-grid.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"203340"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"HA9YLrNkqlffVSkFCLsPOLpzvER9oRo1Zkrvt9F9q98=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-HA9YLrNkqlffVSkFCLsPOLpzvER9oRo1Zkrvt9F9q98="}]},{"Route":"css/bootstrap-grid.min.a6wz4zl1d0.css","AssetFile":"css/bootstrap-grid.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"51789"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"og1MNJxsupki6LpVXZo+rC95f4QLF16m1YUpHn8vtyM=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"a6wz4zl1d0"},{"Name":"integrity","Value":"sha256-og1MNJxsupki6LpVXZo+rC95f4QLF16m1YUpHn8vtyM="},{"Name":"label","Value":"css/bootstrap-grid.min.css"}]},{"Route":"css/bootstrap-grid.min.css","AssetFile":"css/bootstrap-grid.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"51789"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"og1MNJxsupki6LpVXZo+rC95f4QLF16m1YUpHn8vtyM=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-og1MNJxsupki6LpVXZo+rC95f4QLF16m1YUpHn8vtyM="}]},{"Route":"css/bootstrap-grid.min.css.dojtn27aph.map","AssetFile":"css/bootstrap-grid.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"115912"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"I0izs3TQUfbPyb/bNRPJ7iVJ0ULOZFtG/nyETTAU/Yc=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"dojtn27aph"},{"Name":"integrity","Value":"sha256-I0izs3TQUfbPyb/bNRPJ7iVJ0ULOZFtG/nyETTAU/Yc="},{"Name":"label","Value":"css/bootstrap-grid.min.css.map"}]},{"Route":"css/bootstrap-grid.min.css.map","AssetFile":"css/bootstrap-grid.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"115912"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"I0izs3TQUfbPyb/bNRPJ7iVJ0ULOZFtG/nyETTAU/Yc=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-I0izs3TQUfbPyb/bNRPJ7iVJ0ULOZFtG/nyETTAU/Yc="}]},{"Route":"css/bootstrap-grid.nclwyi8366.css","AssetFile":"css/bootstrap-grid.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"70323"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"6aHQppfEko/srtbO3ubCBn9bCz25XtsZoZB8XwnYz34=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"nclwyi8366"},{"Name":"integrity","Value":"sha256-6aHQppfEko/srtbO3ubCBn9bCz25XtsZoZB8XwnYz34="},{"Name":"label","Value":"css/bootstrap-grid.css"}]},{"Route":"css/bootstrap-grid.rtl.css","AssetFile":"css/bootstrap-grid.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"70397"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"F6wTAruMGkJF9VRzPNq55rxR7N4yhnUKcQhxjmrsGRg=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-F6wTAruMGkJF9VRzPNq55rxR7N4yhnUKcQhxjmrsGRg="}]},{"Route":"css/bootstrap-grid.rtl.css.map","AssetFile":"css/bootstrap-grid.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"203344"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"joHEUNOjjpxtq/QNYHOT4JpnFo4439IskmY+bjcTihk=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-joHEUNOjjpxtq/QNYHOT4JpnFo4439IskmY+bjcTihk="}]},{"Route":"css/bootstrap-grid.rtl.css.q1l85krjoz.map","AssetFile":"css/bootstrap-grid.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"203344"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"joHEUNOjjpxtq/QNYHOT4JpnFo4439IskmY+bjcTihk=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"q1l85krjoz"},{"Name":"integrity","Value":"sha256-joHEUNOjjpxtq/QNYHOT4JpnFo4439IskmY+bjcTihk="},{"Name":"label","Value":"css/bootstrap-grid.rtl.css.map"}]},{"Route":"css/bootstrap-grid.rtl.min.css","AssetFile":"css/bootstrap-grid.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"51864"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"02smAS4nas/okRY9J2IiVqi15Zdws9MuuybRJtf/xQo=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-02smAS4nas/okRY9J2IiVqi15Zdws9MuuybRJtf/xQo="}]},{"Route":"css/bootstrap-grid.rtl.min.css.map","AssetFile":"css/bootstrap-grid.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"115989"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"8UZkqzSRw4UnhM40O7g3c1TI83av6RGCum1bdZ9q7l8=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-8UZkqzSRw4UnhM40O7g3c1TI83av6RGCum1bdZ9q7l8="}]},{"Route":"css/bootstrap-grid.rtl.min.css.xofyfpxpoh.map","AssetFile":"css/bootstrap-grid.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"115989"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"8UZkqzSRw4UnhM40O7g3c1TI83av6RGCum1bdZ9q7l8=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"xofyfpxpoh"},{"Name":"integrity","Value":"sha256-8UZkqzSRw4UnhM40O7g3c1TI83av6RGCum1bdZ9q7l8="},{"Name":"label","Value":"css/bootstrap-grid.rtl.min.css.map"}]},{"Route":"css/bootstrap-grid.rtl.min.ds340y6aci.css","AssetFile":"css/bootstrap-grid.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"51864"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"02smAS4nas/okRY9J2IiVqi15Zdws9MuuybRJtf/xQo=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"ds340y6aci"},{"Name":"integrity","Value":"sha256-02smAS4nas/okRY9J2IiVqi15Zdws9MuuybRJtf/xQo="},{"Name":"label","Value":"css/bootstrap-grid.rtl.min.css"}]},{"Route":"css/bootstrap-grid.rtl.zpf6r7iu2p.css","AssetFile":"css/bootstrap-grid.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"70397"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"F6wTAruMGkJF9VRzPNq55rxR7N4yhnUKcQhxjmrsGRg=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"zpf6r7iu2p"},{"Name":"integrity","Value":"sha256-F6wTAruMGkJF9VRzPNq55rxR7N4yhnUKcQhxjmrsGRg="},{"Name":"label","Value":"css/bootstrap-grid.rtl.css"}]},{"Route":"css/bootstrap-reboot.css","AssetFile":"css/bootstrap-reboot.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"12065"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"Kg4miiK9t9v3vyB/LZUmz9a92vBlZxc1rZZfKyDO0wQ=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-Kg4miiK9t9v3vyB/LZUmz9a92vBlZxc1rZZfKyDO0wQ="}]},{"Route":"css/bootstrap-reboot.css.l2uydcq7in.map","AssetFile":"css/bootstrap-reboot.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"129565"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"vQnPy/uX1PUe524N9eLyJT6Z++kPr1FwjMLB9qcThYQ=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"l2uydcq7in"},{"Name":"integrity","Value":"sha256-vQnPy/uX1PUe524N9eLyJT6Z++kPr1FwjMLB9qcThYQ="},{"Name":"label","Value":"css/bootstrap-reboot.css.map"}]},{"Route":"css/bootstrap-reboot.css.map","AssetFile":"css/bootstrap-reboot.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"129565"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"vQnPy/uX1PUe524N9eLyJT6Z++kPr1FwjMLB9qcThYQ=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-vQnPy/uX1PUe524N9eLyJT6Z++kPr1FwjMLB9qcThYQ="}]},{"Route":"css/bootstrap-reboot.m4zwc30cs6.css","AssetFile":"css/bootstrap-reboot.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"12065"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"Kg4miiK9t9v3vyB/LZUmz9a92vBlZxc1rZZfKyDO0wQ=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"m4zwc30cs6"},{"Name":"integrity","Value":"sha256-Kg4miiK9t9v3vyB/LZUmz9a92vBlZxc1rZZfKyDO0wQ="},{"Name":"label","Value":"css/bootstrap-reboot.css"}]},{"Route":"css/bootstrap-reboot.min.css","AssetFile":"css/bootstrap-reboot.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"10126"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"LR3cTZvDtka+FVVZFNhKksjFFc9s5eeQJtL7d+kM8Cg=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-LR3cTZvDtka+FVVZFNhKksjFFc9s5eeQJtL7d+kM8Cg="}]},{"Route":"css/bootstrap-reboot.min.css.map","AssetFile":"css/bootstrap-reboot.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"51368"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"G5m7S/1IY191YwC+jWUJ5M9qJy+K9/aeBvkL7BZfHEw=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-G5m7S/1IY191YwC+jWUJ5M9qJy+K9/aeBvkL7BZfHEw="}]},{"Route":"css/bootstrap-reboot.min.css.vn0zb8aorj.map","AssetFile":"css/bootstrap-reboot.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"51368"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"G5m7S/1IY191YwC+jWUJ5M9qJy+K9/aeBvkL7BZfHEw=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"vn0zb8aorj"},{"Name":"integrity","Value":"sha256-G5m7S/1IY191YwC+jWUJ5M9qJy+K9/aeBvkL7BZfHEw="},{"Name":"label","Value":"css/bootstrap-reboot.min.css.map"}]},{"Route":"css/bootstrap-reboot.min.z4ulzpprs1.css","AssetFile":"css/bootstrap-reboot.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"10126"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"LR3cTZvDtka+FVVZFNhKksjFFc9s5eeQJtL7d+kM8Cg=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"z4ulzpprs1"},{"Name":"integrity","Value":"sha256-LR3cTZvDtka+FVVZFNhKksjFFc9s5eeQJtL7d+kM8Cg="},{"Name":"label","Value":"css/bootstrap-reboot.min.css"}]},{"Route":"css/bootstrap-reboot.rtl.55zgwnarf3.css","AssetFile":"css/bootstrap-reboot.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"12058"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"6VG3XVVVKowjrEBJbrhT393Yicq2mWYUQnROOXzjOJc=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"55zgwnarf3"},{"Name":"integrity","Value":"sha256-6VG3XVVVKowjrEBJbrhT393Yicq2mWYUQnROOXzjOJc="},{"Name":"label","Value":"css/bootstrap-reboot.rtl.css"}]},{"Route":"css/bootstrap-reboot.rtl.css","AssetFile":"css/bootstrap-reboot.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"12058"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"6VG3XVVVKowjrEBJbrhT393Yicq2mWYUQnROOXzjOJc=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-6VG3XVVVKowjrEBJbrhT393Yicq2mWYUQnROOXzjOJc="}]},{"Route":"css/bootstrap-reboot.rtl.css.map","AssetFile":"css/bootstrap-reboot.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"129580"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"2G/FEq/GAS/FZZWBIoL6LXPKps6BtxGXCsTUVrxhozs=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-2G/FEq/GAS/FZZWBIoL6LXPKps6BtxGXCsTUVrxhozs="}]},{"Route":"css/bootstrap-reboot.rtl.css.wexc4ua4wj.map","AssetFile":"css/bootstrap-reboot.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"129580"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"2G/FEq/GAS/FZZWBIoL6LXPKps6BtxGXCsTUVrxhozs=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"wexc4ua4wj"},{"Name":"integrity","Value":"sha256-2G/FEq/GAS/FZZWBIoL6LXPKps6BtxGXCsTUVrxhozs="},{"Name":"label","Value":"css/bootstrap-reboot.rtl.css.map"}]},{"Route":"css/bootstrap-reboot.rtl.min.9j04k7ff8o.css","AssetFile":"css/bootstrap-reboot.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"10198"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"S2SiHKfwy3m9UatggjsRctCHEnrAMyi5TJfIz4rOtM4=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"9j04k7ff8o"},{"Name":"integrity","Value":"sha256-S2SiHKfwy3m9UatggjsRctCHEnrAMyi5TJfIz4rOtM4="},{"Name":"label","Value":"css/bootstrap-reboot.rtl.min.css"}]},{"Route":"css/bootstrap-reboot.rtl.min.css","AssetFile":"css/bootstrap-reboot.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"10198"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"S2SiHKfwy3m9UatggjsRctCHEnrAMyi5TJfIz4rOtM4=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-S2SiHKfwy3m9UatggjsRctCHEnrAMyi5TJfIz4rOtM4="}]},{"Route":"css/bootstrap-reboot.rtl.min.css.caz9dtw6qw.map","AssetFile":"css/bootstrap-reboot.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"63942"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"5FsqQmq4FvVRt/DD5i2bg95Y78Bvw57H1qvmo6RwOYw=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"caz9dtw6qw"},{"Name":"integrity","Value":"sha256-5FsqQmq4FvVRt/DD5i2bg95Y78Bvw57H1qvmo6RwOYw="},{"Name":"label","Value":"css/bootstrap-reboot.rtl.min.css.map"}]},{"Route":"css/bootstrap-reboot.rtl.min.css.map","AssetFile":"css/bootstrap-reboot.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"63942"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"5FsqQmq4FvVRt/DD5i2bg95Y78Bvw57H1qvmo6RwOYw=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-5FsqQmq4FvVRt/DD5i2bg95Y78Bvw57H1qvmo6RwOYw="}]},{"Route":"css/bootstrap-utilities.css","AssetFile":"css/bootstrap-utilities.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"107938"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"J8DRiUSeWCoJ5KZv3oLznNnguNXxlT91gRfqx4OhLVM=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-J8DRiUSeWCoJ5KZv3oLznNnguNXxlT91gRfqx4OhLVM="}]},{"Route":"css/bootstrap-utilities.css.kpys072oee.map","AssetFile":"css/bootstrap-utilities.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"267983"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"SMU2lB3w0v+EjU5hfM1Hzq4IexxecRDfxm7d+1FMy60=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"kpys072oee"},{"Name":"integrity","Value":"sha256-SMU2lB3w0v+EjU5hfM1Hzq4IexxecRDfxm7d+1FMy60="},{"Name":"label","Value":"css/bootstrap-utilities.css.map"}]},{"Route":"css/bootstrap-utilities.css.map","AssetFile":"css/bootstrap-utilities.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"267983"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"SMU2lB3w0v+EjU5hfM1Hzq4IexxecRDfxm7d+1FMy60=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-SMU2lB3w0v+EjU5hfM1Hzq4IexxecRDfxm7d+1FMy60="}]},{"Route":"css/bootstrap-utilities.min.css","AssetFile":"css/bootstrap-utilities.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"85457"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"zGK05vwcKWLkLZy/2uHeZiDb8n4lNbBhnxIBWgCGlho=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-zGK05vwcKWLkLZy/2uHeZiDb8n4lNbBhnxIBWgCGlho="}]},{"Route":"css/bootstrap-utilities.min.css.8b3e4oeqwp.map","AssetFile":"css/bootstrap-utilities.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"180636"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"vLNGubJ0CJn+dNm5szlXMnn/fvNPyVO6okJ6po7bypU=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"8b3e4oeqwp"},{"Name":"integrity","Value":"sha256-vLNGubJ0CJn+dNm5szlXMnn/fvNPyVO6okJ6po7bypU="},{"Name":"label","Value":"css/bootstrap-utilities.min.css.map"}]},{"Route":"css/bootstrap-utilities.min.css.map","AssetFile":"css/bootstrap-utilities.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"180636"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"vLNGubJ0CJn+dNm5szlXMnn/fvNPyVO6okJ6po7bypU=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-vLNGubJ0CJn+dNm5szlXMnn/fvNPyVO6okJ6po7bypU="}]},{"Route":"css/bootstrap-utilities.min.sumeqeat2b.css","AssetFile":"css/bootstrap-utilities.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"85457"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"zGK05vwcKWLkLZy/2uHeZiDb8n4lNbBhnxIBWgCGlho=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"sumeqeat2b"},{"Name":"integrity","Value":"sha256-zGK05vwcKWLkLZy/2uHeZiDb8n4lNbBhnxIBWgCGlho="},{"Name":"label","Value":"css/bootstrap-utilities.min.css"}]},{"Route":"css/bootstrap-utilities.r71srw9373.css","AssetFile":"css/bootstrap-utilities.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"107938"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"J8DRiUSeWCoJ5KZv3oLznNnguNXxlT91gRfqx4OhLVM=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"r71srw9373"},{"Name":"integrity","Value":"sha256-J8DRiUSeWCoJ5KZv3oLznNnguNXxlT91gRfqx4OhLVM="},{"Name":"label","Value":"css/bootstrap-utilities.css"}]},{"Route":"css/bootstrap-utilities.rtl.css","AssetFile":"css/bootstrap-utilities.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"107806"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"PaOXwBVjo0LFfThqwemMb2vZPdpJyTJr2wUpY2rlPgA=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-PaOXwBVjo0LFfThqwemMb2vZPdpJyTJr2wUpY2rlPgA="}]},{"Route":"css/bootstrap-utilities.rtl.css.lp6b53yply.map","AssetFile":"css/bootstrap-utilities.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"267924"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"R5iWDcOIUk3NTNBsL3kFRpmjmwI420+ragzY3hjSxLw=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"lp6b53yply"},{"Name":"integrity","Value":"sha256-R5iWDcOIUk3NTNBsL3kFRpmjmwI420+ragzY3hjSxLw="},{"Name":"label","Value":"css/bootstrap-utilities.rtl.css.map"}]},{"Route":"css/bootstrap-utilities.rtl.css.map","AssetFile":"css/bootstrap-utilities.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"267924"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"R5iWDcOIUk3NTNBsL3kFRpmjmwI420+ragzY3hjSxLw=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-R5iWDcOIUk3NTNBsL3kFRpmjmwI420+ragzY3hjSxLw="}]},{"Route":"css/bootstrap-utilities.rtl.jwbupvf1cn.css","AssetFile":"css/bootstrap-utilities.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"107806"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"PaOXwBVjo0LFfThqwemMb2vZPdpJyTJr2wUpY2rlPgA=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"jwbupvf1cn"},{"Name":"integrity","Value":"sha256-PaOXwBVjo0LFfThqwemMb2vZPdpJyTJr2wUpY2rlPgA="},{"Name":"label","Value":"css/bootstrap-utilities.rtl.css"}]},{"Route":"css/bootstrap-utilities.rtl.min.css","AssetFile":"css/bootstrap-utilities.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"85386"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"uDMgsoOuJTmS+BX8zHV6BRYFknx6qQ0Iwalq0l/Wnwc=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-uDMgsoOuJTmS+BX8zHV6BRYFknx6qQ0Iwalq0l/Wnwc="}]},{"Route":"css/bootstrap-utilities.rtl.min.css.1vu6lxsd9m.map","AssetFile":"css/bootstrap-utilities.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"180472"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"vTp+wSodqx0KTTRGFPS+5vJ4BeD15YsTyg2jOMvRV8Y=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"1vu6lxsd9m"},{"Name":"integrity","Value":"sha256-vTp+wSodqx0KTTRGFPS+5vJ4BeD15YsTyg2jOMvRV8Y="},{"Name":"label","Value":"css/bootstrap-utilities.rtl.min.css.map"}]},{"Route":"css/bootstrap-utilities.rtl.min.css.map","AssetFile":"css/bootstrap-utilities.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"180472"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"vTp+wSodqx0KTTRGFPS+5vJ4BeD15YsTyg2jOMvRV8Y=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-vTp+wSodqx0KTTRGFPS+5vJ4BeD15YsTyg2jOMvRV8Y="}]},{"Route":"css/bootstrap-utilities.rtl.min.gyzl34zark.css","AssetFile":"css/bootstrap-utilities.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"85386"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"uDMgsoOuJTmS+BX8zHV6BRYFknx6qQ0Iwalq0l/Wnwc=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"gyzl34zark"},{"Name":"integrity","Value":"sha256-uDMgsoOuJTmS+BX8zHV6BRYFknx6qQ0Iwalq0l/Wnwc="},{"Name":"label","Value":"css/bootstrap-utilities.rtl.min.css"}]},{"Route":"css/bootstrap.css","AssetFile":"css/bootstrap.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"280202"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"0+OrIbuBPR3HGBpows26fnWeZDEmkNIQOA3m+LUDsuc=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-0+OrIbuBPR3HGBpows26fnWeZDEmkNIQOA3m+LUDsuc="}]},{"Route":"css/bootstrap.css.j1m9o9pn5t.map","AssetFile":"css/bootstrap.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"680591"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"KfxofL5yt27NqqYinBxvVVVHMUXkaIwbbjHfRKrtgw8=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"j1m9o9pn5t"},{"Name":"integrity","Value":"sha256-KfxofL5yt27NqqYinBxvVVVHMUXkaIwbbjHfRKrtgw8="},{"Name":"label","Value":"css/bootstrap.css.map"}]},{"Route":"css/bootstrap.css.map","AssetFile":"css/bootstrap.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"680591"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"KfxofL5yt27NqqYinBxvVVVHMUXkaIwbbjHfRKrtgw8=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-KfxofL5yt27NqqYinBxvVVVHMUXkaIwbbjHfRKrtgw8="}]},{"Route":"css/bootstrap.min.7z09619q9j.css","AssetFile":"css/bootstrap.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"232018"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"zRgmWB5PK4CvTx4FiXsxbHaYRBBjz/rvu97sOC7kzXI=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"7z09619q9j"},{"Name":"integrity","Value":"sha256-zRgmWB5PK4CvTx4FiXsxbHaYRBBjz/rvu97sOC7kzXI="},{"Name":"label","Value":"css/bootstrap.min.css"}]},{"Route":"css/bootstrap.min.css","AssetFile":"css/bootstrap.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"232018"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"zRgmWB5PK4CvTx4FiXsxbHaYRBBjz/rvu97sOC7kzXI=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-zRgmWB5PK4CvTx4FiXsxbHaYRBBjz/rvu97sOC7kzXI="}]},{"Route":"css/bootstrap.min.css.jpw2fk0kvm.map","AssetFile":"css/bootstrap.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"589698"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"6a7kXCMLkOvwgsPvI9SphA3lCCVYilUHoqABNauxLDQ=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"jpw2fk0kvm"},{"Name":"integrity","Value":"sha256-6a7kXCMLkOvwgsPvI9SphA3lCCVYilUHoqABNauxLDQ="},{"Name":"label","Value":"css/bootstrap.min.css.map"}]},{"Route":"css/bootstrap.min.css.map","AssetFile":"css/bootstrap.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"589698"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"6a7kXCMLkOvwgsPvI9SphA3lCCVYilUHoqABNauxLDQ=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-6a7kXCMLkOvwgsPvI9SphA3lCCVYilUHoqABNauxLDQ="}]},{"Route":"css/bootstrap.rtl.ajzo1u5v8g.css","AssetFile":"css/bootstrap.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"279417"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"Gk1oGfOLBLvjrSivQbGbLbVFDYLqIBwry7+HKKrwq08=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"ajzo1u5v8g"},{"Name":"integrity","Value":"sha256-Gk1oGfOLBLvjrSivQbGbLbVFDYLqIBwry7+HKKrwq08="},{"Name":"label","Value":"css/bootstrap.rtl.css"}]},{"Route":"css/bootstrap.rtl.css","AssetFile":"css/bootstrap.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"279417"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"Gk1oGfOLBLvjrSivQbGbLbVFDYLqIBwry7+HKKrwq08=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-Gk1oGfOLBLvjrSivQbGbLbVFDYLqIBwry7+HKKrwq08="}]},{"Route":"css/bootstrap.rtl.css.dwnyfrorjx.map","AssetFile":"css/bootstrap.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"680451"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"g1c2E/WGT3eJdfDltNW+2b3JVAyG74bcngJUPz4D068=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"dwnyfrorjx"},{"Name":"integrity","Value":"sha256-g1c2E/WGT3eJdfDltNW+2b3JVAyG74bcngJUPz4D068="},{"Name":"label","Value":"css/bootstrap.rtl.css.map"}]},{"Route":"css/bootstrap.rtl.css.map","AssetFile":"css/bootstrap.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"680451"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"g1c2E/WGT3eJdfDltNW+2b3JVAyG74bcngJUPz4D068=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-g1c2E/WGT3eJdfDltNW+2b3JVAyG74bcngJUPz4D068="}]},{"Route":"css/bootstrap.rtl.min.css","AssetFile":"css/bootstrap.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"232126"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"gP5J22JsVu+X8rzMEh1Kx+lD89HF3DW4YUWPiU9udUc=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-gP5J22JsVu+X8rzMEh1Kx+lD89HF3DW4YUWPiU9udUc="}]},{"Route":"css/bootstrap.rtl.min.css.h0ed2e8v31.map","AssetFile":"css/bootstrap.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"588895"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"MQL775aSq9kNSZA9h1GfrfILFLudaUgLi1xZ87cRkNY=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"h0ed2e8v31"},{"Name":"integrity","Value":"sha256-MQL775aSq9kNSZA9h1GfrfILFLudaUgLi1xZ87cRkNY="},{"Name":"label","Value":"css/bootstrap.rtl.min.css.map"}]},{"Route":"css/bootstrap.rtl.min.css.map","AssetFile":"css/bootstrap.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"588895"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"MQL775aSq9kNSZA9h1GfrfILFLudaUgLi1xZ87cRkNY=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-MQL775aSq9kNSZA9h1GfrfILFLudaUgLi1xZ87cRkNY="}]},{"Route":"css/bootstrap.rtl.min.sdlhrk323x.css","AssetFile":"css/bootstrap.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"232126"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"gP5J22JsVu+X8rzMEh1Kx+lD89HF3DW4YUWPiU9udUc=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"sdlhrk323x"},{"Name":"integrity","Value":"sha256-gP5J22JsVu+X8rzMEh1Kx+lD89HF3DW4YUWPiU9udUc="},{"Name":"label","Value":"css/bootstrap.rtl.min.css"}]},{"Route":"css/bootstrap.t01kyuglfx.css","AssetFile":"css/bootstrap.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"280202"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"0+OrIbuBPR3HGBpows26fnWeZDEmkNIQOA3m+LUDsuc=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"t01kyuglfx"},{"Name":"integrity","Value":"sha256-0+OrIbuBPR3HGBpows26fnWeZDEmkNIQOA3m+LUDsuc="},{"Name":"label","Value":"css/bootstrap.css"}]},{"Route":"css/site.c2tiyv64ts.css","AssetFile":"css/site.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"362"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"pAGv4ietcJNk/EwsQZ5BN9+K4MuNYS2a9wl4Jw+q9D0=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"c2tiyv64ts"},{"Name":"integrity","Value":"sha256-pAGv4ietcJNk/EwsQZ5BN9+K4MuNYS2a9wl4Jw+q9D0="},{"Name":"label","Value":"css/site.css"}]},{"Route":"css/site.css","AssetFile":"css/site.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"362"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"pAGv4ietcJNk/EwsQZ5BN9+K4MuNYS2a9wl4Jw+q9D0=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-pAGv4ietcJNk/EwsQZ5BN9+K4MuNYS2a9wl4Jw+q9D0="}]},{"Route":"favicon.61n19gt1b8.ico","AssetFile":"favicon.ico","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"5430"},{"Name":"Content-Type","Value":"image/x-icon"},{"Name":"ETag","Value":"\"Jtxf9L+5ITKRc1gIRl4VbUpGkRNfOBXjYTdhJD4facM=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"61n19gt1b8"},{"Name":"integrity","Value":"sha256-Jtxf9L+5ITKRc1gIRl4VbUpGkRNfOBXjYTdhJD4facM="},{"Name":"label","Value":"favicon.ico"}]},{"Route":"favicon.ico","AssetFile":"favicon.ico","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"5430"},{"Name":"Content-Type","Value":"image/x-icon"},{"Name":"ETag","Value":"\"Jtxf9L+5ITKRc1gIRl4VbUpGkRNfOBXjYTdhJD4facM=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-Jtxf9L+5ITKRc1gIRl4VbUpGkRNfOBXjYTdhJD4facM="}]},{"Route":"js/bootstrap.bundle.3631qojtq1.js","AssetFile":"js/bootstrap.bundle.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"207922"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"tQ9c3dc1t0j9EV2Itwqx1ZK0qjrLayj0+l/lSEgU5ZM=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"3631qojtq1"},{"Name":"integrity","Value":"sha256-tQ9c3dc1t0j9EV2Itwqx1ZK0qjrLayj0+l/lSEgU5ZM="},{"Name":"label","Value":"js/bootstrap.bundle.js"}]},{"Route":"js/bootstrap.bundle.js","AssetFile":"js/bootstrap.bundle.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"207922"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"tQ9c3dc1t0j9EV2Itwqx1ZK0qjrLayj0+l/lSEgU5ZM=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-tQ9c3dc1t0j9EV2Itwqx1ZK0qjrLayj0+l/lSEgU5ZM="}]},{"Route":"js/bootstrap.bundle.js.map","AssetFile":"js/bootstrap.bundle.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"427772"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"RtS+xc/GamZ1j5irErX3kgDrY2wyvUcCisNyIffxHl8=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-RtS+xc/GamZ1j5irErX3kgDrY2wyvUcCisNyIffxHl8="}]},{"Route":"js/bootstrap.bundle.js.yhs0gtq433.map","AssetFile":"js/bootstrap.bundle.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"427772"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"RtS+xc/GamZ1j5irErX3kgDrY2wyvUcCisNyIffxHl8=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"yhs0gtq433"},{"Name":"integrity","Value":"sha256-RtS+xc/GamZ1j5irErX3kgDrY2wyvUcCisNyIffxHl8="},{"Name":"label","Value":"js/bootstrap.bundle.js.map"}]},{"Route":"js/bootstrap.bundle.min.js","AssetFile":"js/bootstrap.bundle.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"80821"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"NfRUfZNkERrKSFA0c1a8VmCplPDYtpTYj5lQmKe1R/o=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-NfRUfZNkERrKSFA0c1a8VmCplPDYtpTYj5lQmKe1R/o="}]},{"Route":"js/bootstrap.bundle.min.js.0ia45k0zg6.map","AssetFile":"js/bootstrap.bundle.min.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"332190"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"KMPy0mgJ1P9QNFXDksX2HvkX3SIeO/iM2dOASfZr3oU=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"0ia45k0zg6"},{"Name":"integrity","Value":"sha256-KMPy0mgJ1P9QNFXDksX2HvkX3SIeO/iM2dOASfZr3oU="},{"Name":"label","Value":"js/bootstrap.bundle.min.js.map"}]},{"Route":"js/bootstrap.bundle.min.js.map","AssetFile":"js/bootstrap.bundle.min.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"332190"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"KMPy0mgJ1P9QNFXDksX2HvkX3SIeO/iM2dOASfZr3oU=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-KMPy0mgJ1P9QNFXDksX2HvkX3SIeO/iM2dOASfZr3oU="}]},{"Route":"js/bootstrap.bundle.min.zyma9w1t4a.js","AssetFile":"js/bootstrap.bundle.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"80821"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"NfRUfZNkERrKSFA0c1a8VmCplPDYtpTYj5lQmKe1R/o=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"zyma9w1t4a"},{"Name":"integrity","Value":"sha256-NfRUfZNkERrKSFA0c1a8VmCplPDYtpTYj5lQmKe1R/o="},{"Name":"label","Value":"js/bootstrap.bundle.min.js"}]},{"Route":"js/bootstrap.esm.9nx659ylgg.js","AssetFile":"js/bootstrap.esm.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"135984"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"K8fPuP/Isv+p0f05Jbutp7bUudxGtciVRgDRN4aMa4c=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"9nx659ylgg"},{"Name":"integrity","Value":"sha256-K8fPuP/Isv+p0f05Jbutp7bUudxGtciVRgDRN4aMa4c="},{"Name":"label","Value":"js/bootstrap.esm.js"}]},{"Route":"js/bootstrap.esm.js","AssetFile":"js/bootstrap.esm.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"135984"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"K8fPuP/Isv+p0f05Jbutp7bUudxGtciVRgDRN4aMa4c=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-K8fPuP/Isv+p0f05Jbutp7bUudxGtciVRgDRN4aMa4c="}]},{"Route":"js/bootstrap.esm.js.2aps6mjopp.map","AssetFile":"js/bootstrap.esm.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"293657"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"+nx5p5T+n0g8L/OnO6CG2QIgyGtDPtxKfbBhcNN/yF0=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"2aps6mjopp"},{"Name":"integrity","Value":"sha256-+nx5p5T+n0g8L/OnO6CG2QIgyGtDPtxKfbBhcNN/yF0="},{"Name":"label","Value":"js/bootstrap.esm.js.map"}]},{"Route":"js/bootstrap.esm.js.map","AssetFile":"js/bootstrap.esm.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"293657"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"+nx5p5T+n0g8L/OnO6CG2QIgyGtDPtxKfbBhcNN/yF0=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-+nx5p5T+n0g8L/OnO6CG2QIgyGtDPtxKfbBhcNN/yF0="}]},{"Route":"js/bootstrap.esm.min.7ifmqzf51n.js","AssetFile":"js/bootstrap.esm.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"74055"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"/+2UOLrBkJMGzFHiKQxcgGnK1mIA94yryJf56OFeNbk=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"7ifmqzf51n"},{"Name":"integrity","Value":"sha256-/+2UOLrBkJMGzFHiKQxcgGnK1mIA94yryJf56OFeNbk="},{"Name":"label","Value":"js/bootstrap.esm.min.js"}]},{"Route":"js/bootstrap.esm.min.js","AssetFile":"js/bootstrap.esm.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"74055"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"/+2UOLrBkJMGzFHiKQxcgGnK1mIA94yryJf56OFeNbk=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-/+2UOLrBkJMGzFHiKQxcgGnK1mIA94yryJf56OFeNbk="}]},{"Route":"js/bootstrap.esm.min.js.586x66nycw.map","AssetFile":"js/bootstrap.esm.min.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"222398"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"O9RzA/mzSQDqsLlfgT3EimsUNdYvrynK+iB19rGyO38=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"586x66nycw"},{"Name":"integrity","Value":"sha256-O9RzA/mzSQDqsLlfgT3EimsUNdYvrynK+iB19rGyO38="},{"Name":"label","Value":"js/bootstrap.esm.min.js.map"}]},{"Route":"js/bootstrap.esm.min.js.map","AssetFile":"js/bootstrap.esm.min.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"222398"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"O9RzA/mzSQDqsLlfgT3EimsUNdYvrynK+iB19rGyO38=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-O9RzA/mzSQDqsLlfgT3EimsUNdYvrynK+iB19rGyO38="}]},{"Route":"js/bootstrap.js","AssetFile":"js/bootstrap.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"145560"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"4iVQR37Qe2Tuh7cjJQdKCANjnoR6UO6/cIu9hmy7hZA=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-4iVQR37Qe2Tuh7cjJQdKCANjnoR6UO6/cIu9hmy7hZA="}]},{"Route":"js/bootstrap.js.4fapcppmxt.map","AssetFile":"js/bootstrap.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"294819"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"AKF2JhIGWaZl3cn18u8a6+ILdrSdz8IM2CXSCZouDbw=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"4fapcppmxt"},{"Name":"integrity","Value":"sha256-AKF2JhIGWaZl3cn18u8a6+ILdrSdz8IM2CXSCZouDbw="},{"Name":"label","Value":"js/bootstrap.js.map"}]},{"Route":"js/bootstrap.js.map","AssetFile":"js/bootstrap.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"294819"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"AKF2JhIGWaZl3cn18u8a6+ILdrSdz8IM2CXSCZouDbw=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-AKF2JhIGWaZl3cn18u8a6+ILdrSdz8IM2CXSCZouDbw="}]},{"Route":"js/bootstrap.min.7183nd47gn.js","AssetFile":"js/bootstrap.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"60775"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"lel57Jim1/CW4I1iEkaHexK/J9h/ZRneeORKiQuNOIg=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"7183nd47gn"},{"Name":"integrity","Value":"sha256-lel57Jim1/CW4I1iEkaHexK/J9h/ZRneeORKiQuNOIg="},{"Name":"label","Value":"js/bootstrap.min.js"}]},{"Route":"js/bootstrap.min.js","AssetFile":"js/bootstrap.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"60775"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"lel57Jim1/CW4I1iEkaHexK/J9h/ZRneeORKiQuNOIg=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-lel57Jim1/CW4I1iEkaHexK/J9h/ZRneeORKiQuNOIg="}]},{"Route":"js/bootstrap.min.js.fv6m00jlsj.map","AssetFile":"js/bootstrap.min.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"220691"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"SzzRmuPLldNWnyFXAZP64VpT+clUa5bND5fQscONDu8=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"fv6m00jlsj"},{"Name":"integrity","Value":"sha256-SzzRmuPLldNWnyFXAZP64VpT+clUa5bND5fQscONDu8="},{"Name":"label","Value":"js/bootstrap.min.js.map"}]},{"Route":"js/bootstrap.min.js.map","AssetFile":"js/bootstrap.min.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"220691"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"SzzRmuPLldNWnyFXAZP64VpT+clUa5bND5fQscONDu8=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-SzzRmuPLldNWnyFXAZP64VpT+clUa5bND5fQscONDu8="}]},{"Route":"js/bootstrap.mykkvd2hkm.js","AssetFile":"js/bootstrap.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"145560"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"4iVQR37Qe2Tuh7cjJQdKCANjnoR6UO6/cIu9hmy7hZA=\""},{"Name":"Last-Modified","Value":"Mon, 30 Jun 2025 17:05:12 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"mykkvd2hkm"},{"Name":"integrity","Value":"sha256-4iVQR37Qe2Tuh7cjJQdKCANjnoR6UO6/cIu9hmy7hZA="},{"Name":"label","Value":"js/bootstrap.js"}]},{"Route":"js/site.js","AssetFile":"js/site.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"231"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"hRQyftXiu1lLX2P9Ly9xa4gHJgLeR1uGN5qegUobtGo=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-hRQyftXiu1lLX2P9Ly9xa4gHJgLeR1uGN5qegUobtGo="}]},{"Route":"js/site.xtxxf3hu2r.js","AssetFile":"js/site.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"231"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"hRQyftXiu1lLX2P9Ly9xa4gHJgLeR1uGN5qegUobtGo=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"xtxxf3hu2r"},{"Name":"integrity","Value":"sha256-hRQyftXiu1lLX2P9Ly9xa4gHJgLeR1uGN5qegUobtGo="},{"Name":"label","Value":"js/site.js"}]},{"Route":"lib/bootstrap/LICENSE","AssetFile":"lib/bootstrap/LICENSE","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"1153"},{"Name":"Content-Type","Value":"application/octet-stream"},{"Name":"ETag","Value":"\"ZH6pA6BSx6fuHZvdaKph1DwUJ+VSYilIiEQu8ilnvqk=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-ZH6pA6BSx6fuHZvdaKph1DwUJ+VSYilIiEQu8ilnvqk="}]},{"Route":"lib/bootstrap/LICENSE.81b7ukuj9c","AssetFile":"lib/bootstrap/LICENSE","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"1153"},{"Name":"Content-Type","Value":"application/octet-stream"},{"Name":"ETag","Value":"\"ZH6pA6BSx6fuHZvdaKph1DwUJ+VSYilIiEQu8ilnvqk=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"81b7ukuj9c"},{"Name":"integrity","Value":"sha256-ZH6pA6BSx6fuHZvdaKph1DwUJ+VSYilIiEQu8ilnvqk="},{"Name":"label","Value":"lib/bootstrap/LICENSE"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"75534"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"P4Ski6RrsG4nxKfPqaVoyRMoesl9UzArmfT+4fLqKHY=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-P4Ski6RrsG4nxKfPqaVoyRMoesl9UzArmfT+4fLqKHY="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"196535"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"QO8cMbVkLiktUX1cHeXSUSe5nXMXUgyL9cjwnMyxPqc=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-QO8cMbVkLiktUX1cHeXSUSe5nXMXUgyL9cjwnMyxPqc="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.css.st1cbwfwo5.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"196535"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"QO8cMbVkLiktUX1cHeXSUSe5nXMXUgyL9cjwnMyxPqc=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"st1cbwfwo5"},{"Name":"integrity","Value":"sha256-QO8cMbVkLiktUX1cHeXSUSe5nXMXUgyL9cjwnMyxPqc="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-grid.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.min.5p029spbuu.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"51325"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"96ayIUEnpKr7n5BIsFK5vJ3qXMXFgvRl9/CBcHs6/Ts=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"5p029spbuu"},{"Name":"integrity","Value":"sha256-96ayIUEnpKr7n5BIsFK5vJ3qXMXFgvRl9/CBcHs6/Ts="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-grid.min.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.min.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"51325"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"96ayIUEnpKr7n5BIsFK5vJ3qXMXFgvRl9/CBcHs6/Ts=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-96ayIUEnpKr7n5BIsFK5vJ3qXMXFgvRl9/CBcHs6/Ts="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.min.css.5vj65cig9w.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"117439"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"72C/qDCGu+OwWeVA03bf9Ke0T8oIozCub0lfJkhzhvE=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"5vj65cig9w"},{"Name":"integrity","Value":"sha256-72C/qDCGu+OwWeVA03bf9Ke0T8oIozCub0lfJkhzhvE="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-grid.min.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.min.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"117439"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"72C/qDCGu+OwWeVA03bf9Ke0T8oIozCub0lfJkhzhvE=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-72C/qDCGu+OwWeVA03bf9Ke0T8oIozCub0lfJkhzhvE="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.nakmwdwsxp.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"75534"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"P4Ski6RrsG4nxKfPqaVoyRMoesl9UzArmfT+4fLqKHY=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"nakmwdwsxp"},{"Name":"integrity","Value":"sha256-P4Ski6RrsG4nxKfPqaVoyRMoesl9UzArmfT+4fLqKHY="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-grid.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.rtl.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"75607"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"+ugQREUkP4Wnp1VX2L2lvw0Q2mgKYvYAZr1c2or+ysM=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-+ugQREUkP4Wnp1VX2L2lvw0Q2mgKYvYAZr1c2or+ysM="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.rtl.css.2q4vfeazbq.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"196539"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"qvA39OMlEs53jaewqVFmE8DQQrio47bZtlTs+Wu6U8g=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"2q4vfeazbq"},{"Name":"integrity","Value":"sha256-qvA39OMlEs53jaewqVFmE8DQQrio47bZtlTs+Wu6U8g="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-grid.rtl.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.rtl.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"196539"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"qvA39OMlEs53jaewqVFmE8DQQrio47bZtlTs+Wu6U8g=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-qvA39OMlEs53jaewqVFmE8DQQrio47bZtlTs+Wu6U8g="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.rtl.e6q6xbwqzk.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"75607"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"+ugQREUkP4Wnp1VX2L2lvw0Q2mgKYvYAZr1c2or+ysM=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"e6q6xbwqzk"},{"Name":"integrity","Value":"sha256-+ugQREUkP4Wnp1VX2L2lvw0Q2mgKYvYAZr1c2or+ysM="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-grid.rtl.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"51400"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"9eX2dpELXvYs+6il2MHwf5OOPVOZjxVK1b1GWgL0B0k=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-9eX2dpELXvYs+6il2MHwf5OOPVOZjxVK1b1GWgL0B0k="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"117516"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"NDSZjIiMPRIoO7/w7+jHef8retP4riQa8PMj4BVRGok=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-NDSZjIiMPRIoO7/w7+jHef8retP4riQa8PMj4BVRGok="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.css.o371a8zbv2.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"117516"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"NDSZjIiMPRIoO7/w7+jHef8retP4riQa8PMj4BVRGok=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"o371a8zbv2"},{"Name":"integrity","Value":"sha256-NDSZjIiMPRIoO7/w7+jHef8retP4riQa8PMj4BVRGok="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.dy6jgresuo.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"51400"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"9eX2dpELXvYs+6il2MHwf5OOPVOZjxVK1b1GWgL0B0k=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"dy6jgresuo"},{"Name":"integrity","Value":"sha256-9eX2dpELXvYs+6il2MHwf5OOPVOZjxVK1b1GWgL0B0k="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"6276"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"Jtl65EICD4ds6dQZbx1ongvMXj8D127HCg5XRBXXYGw=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-Jtl65EICD4ds6dQZbx1ongvMXj8D127HCg5XRBXXYGw="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.css.jeal3x0ldm.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"105138"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"FZG0KxbNqITUi4QY7QvPFRS/TccntMfFWfSTdHN/pws=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"jeal3x0ldm"},{"Name":"integrity","Value":"sha256-FZG0KxbNqITUi4QY7QvPFRS/TccntMfFWfSTdHN/pws="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-reboot.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"105138"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"FZG0KxbNqITUi4QY7QvPFRS/TccntMfFWfSTdHN/pws=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-FZG0KxbNqITUi4QY7QvPFRS/TccntMfFWfSTdHN/pws="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.min.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"4653"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"359CMPAICGkV+zve4A4HJMha3bwqTFTjl+QC1KJK5DQ=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-359CMPAICGkV+zve4A4HJMha3bwqTFTjl+QC1KJK5DQ="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.min.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"35330"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"2BbRsE/+czX1ufmDPGpnEieC9u6I3m5BKNDSX1ob3lg=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-2BbRsE/+czX1ufmDPGpnEieC9u6I3m5BKNDSX1ob3lg="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.min.css.okkk44j0xs.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"35330"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"2BbRsE/+czX1ufmDPGpnEieC9u6I3m5BKNDSX1ob3lg=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"okkk44j0xs"},{"Name":"integrity","Value":"sha256-2BbRsE/+czX1ufmDPGpnEieC9u6I3m5BKNDSX1ob3lg="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-reboot.min.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.min.z7kmom2977.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"4653"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"359CMPAICGkV+zve4A4HJMha3bwqTFTjl+QC1KJK5DQ=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"z7kmom2977"},{"Name":"integrity","Value":"sha256-359CMPAICGkV+zve4A4HJMha3bwqTFTjl+QC1KJK5DQ="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-reboot.min.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.mk8rdyw69w.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"6276"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"Jtl65EICD4ds6dQZbx1ongvMXj8D127HCg5XRBXXYGw=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"mk8rdyw69w"},{"Name":"integrity","Value":"sha256-Jtl65EICD4ds6dQZbx1ongvMXj8D127HCg5XRBXXYGw="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-reboot.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.97yrjpyf9r.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"6250"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"G0PQCDL7ETO6rITRlBIHDKvvSuJFn5p6h+WmbPX5xr4=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"97yrjpyf9r"},{"Name":"integrity","Value":"sha256-G0PQCDL7ETO6rITRlBIHDKvvSuJFn5p6h+WmbPX5xr4="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"6250"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"G0PQCDL7ETO6rITRlBIHDKvvSuJFn5p6h+WmbPX5xr4=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-G0PQCDL7ETO6rITRlBIHDKvvSuJFn5p6h+WmbPX5xr4="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.css.cwzlr5n8x4.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"105151"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"/EdWHN6t5XYPplC88vixGfrBvfEii19kAssb+0YBVU8=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"cwzlr5n8x4"},{"Name":"integrity","Value":"sha256-/EdWHN6t5XYPplC88vixGfrBvfEii19kAssb+0YBVU8="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"105151"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"/EdWHN6t5XYPplC88vixGfrBvfEii19kAssb+0YBVU8=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-/EdWHN6t5XYPplC88vixGfrBvfEii19kAssb+0YBVU8="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"4725"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"BnHmEJpgor1n0UuwNdXG2VhHdV1r9MibuqBVHsgp9a8=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-BnHmEJpgor1n0UuwNdXG2VhHdV1r9MibuqBVHsgp9a8="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"41570"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"GMDk5pA5dFkOimkBAWeEjYZ+7lgHPS0jYln6p/WJVYs=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-GMDk5pA5dFkOimkBAWeEjYZ+7lgHPS0jYln6p/WJVYs="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.css.wmug9u23qg.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"41570"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"GMDk5pA5dFkOimkBAWeEjYZ+7lgHPS0jYln6p/WJVYs=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"wmug9u23qg"},{"Name":"integrity","Value":"sha256-GMDk5pA5dFkOimkBAWeEjYZ+7lgHPS0jYln6p/WJVYs="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.y53cy5s2zj.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"4725"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"BnHmEJpgor1n0UuwNdXG2VhHdV1r9MibuqBVHsgp9a8=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"y53cy5s2zj"},{"Name":"integrity","Value":"sha256-BnHmEJpgor1n0UuwNdXG2VhHdV1r9MibuqBVHsgp9a8="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"76449"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"mcVOHRq7FsWaycSfboGsTpzuQZ3cIOR/GDHYxL6q2Yg=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-mcVOHRq7FsWaycSfboGsTpzuQZ3cIOR/GDHYxL6q2Yg="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.css.j75batdsum.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"192271"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"4WIqPof/vrXYO/jeJ4fDOQKUYWIwe64V3d+9/qNju20=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"j75batdsum"},{"Name":"integrity","Value":"sha256-4WIqPof/vrXYO/jeJ4fDOQKUYWIwe64V3d+9/qNju20="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-utilities.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"192271"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"4WIqPof/vrXYO/jeJ4fDOQKUYWIwe64V3d+9/qNju20=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-4WIqPof/vrXYO/jeJ4fDOQKUYWIwe64V3d+9/qNju20="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.min.2yn17lgxub.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"53485"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"ekoF4YNq4OUU4BoZ6FG2LTKD68LJvW49arNgykHOZfM=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"2yn17lgxub"},{"Name":"integrity","Value":"sha256-ekoF4YNq4OUU4BoZ6FG2LTKD68LJvW49arNgykHOZfM="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-utilities.min.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.min.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"53485"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"ekoF4YNq4OUU4BoZ6FG2LTKD68LJvW49arNgykHOZfM=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-ekoF4YNq4OUU4BoZ6FG2LTKD68LJvW49arNgykHOZfM="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.min.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"111875"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"p1dop4slefZhL4zG2pa6+2HUrOY1UUArGJXmet8Md9c=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-p1dop4slefZhL4zG2pa6+2HUrOY1UUArGJXmet8Md9c="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.min.css.vy0bq9ydhf.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"111875"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"p1dop4slefZhL4zG2pa6+2HUrOY1UUArGJXmet8Md9c=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"vy0bq9ydhf"},{"Name":"integrity","Value":"sha256-p1dop4slefZhL4zG2pa6+2HUrOY1UUArGJXmet8Md9c="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-utilities.min.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"76307"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"1N1aPW6sTYexHfJCcDS4iElpPdWahP2Fr+Um56w0PjI=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-1N1aPW6sTYexHfJCcDS4iElpPdWahP2Fr+Um56w0PjI="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.css.ab1c3rmv7g.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"192214"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"puDgKwvlFAord9R8G8of9P2CVYIJUFSoIbjDLEsKEH0=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"ab1c3rmv7g"},{"Name":"integrity","Value":"sha256-puDgKwvlFAord9R8G8of9P2CVYIJUFSoIbjDLEsKEH0="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"192214"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"puDgKwvlFAord9R8G8of9P2CVYIJUFSoIbjDLEsKEH0=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-puDgKwvlFAord9R8G8of9P2CVYIJUFSoIbjDLEsKEH0="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"53413"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"wseUsl7uipUzPYc/DBMMTMFA7hBTcxpw29RKOxLzXSc=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-wseUsl7uipUzPYc/DBMMTMFA7hBTcxpw29RKOxLzXSc="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.css.56d2bn4wt9.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"111710"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"02ka4ymoE5yEecLUncLG3/SouTQMnTJOktX+96Pt/88=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"56d2bn4wt9"},{"Name":"integrity","Value":"sha256-02ka4ymoE5yEecLUncLG3/SouTQMnTJOktX+96Pt/88="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"111710"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"02ka4ymoE5yEecLUncLG3/SouTQMnTJOktX+96Pt/88=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-02ka4ymoE5yEecLUncLG3/SouTQMnTJOktX+96Pt/88="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.ik6i2hrs65.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"53413"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"wseUsl7uipUzPYc/DBMMTMFA7hBTcxpw29RKOxLzXSc=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"ik6i2hrs65"},{"Name":"integrity","Value":"sha256-wseUsl7uipUzPYc/DBMMTMFA7hBTcxpw29RKOxLzXSc="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.ophe14yye5.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"76307"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"1N1aPW6sTYexHfJCcDS4iElpPdWahP2Fr+Um56w0PjI=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"ophe14yye5"},{"Name":"integrity","Value":"sha256-1N1aPW6sTYexHfJCcDS4iElpPdWahP2Fr+Um56w0PjI="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.z9shlbduue.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"76449"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"mcVOHRq7FsWaycSfboGsTpzuQZ3cIOR/GDHYxL6q2Yg=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"z9shlbduue"},{"Name":"integrity","Value":"sha256-mcVOHRq7FsWaycSfboGsTpzuQZ3cIOR/GDHYxL6q2Yg="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-utilities.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap.css","AssetFile":"lib/bootstrap/dist/css/bootstrap.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"215356"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"ZMvmWDSU4zY1Z29EQGm5Mubfz/YxF4hiReGqx84o4tA=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-ZMvmWDSU4zY1Z29EQGm5Mubfz/YxF4hiReGqx84o4tA="}]},{"Route":"lib/bootstrap/dist/css/bootstrap.css.73kdqttayv.map","AssetFile":"lib/bootstrap/dist/css/bootstrap.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"536547"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"DRvWr0gangj5/5Q3DRn6ttzpcWDzl3OpHoAwAzNDR5Q=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"73kdqttayv"},{"Name":"integrity","Value":"sha256-DRvWr0gangj5/5Q3DRn6ttzpcWDzl3OpHoAwAzNDR5Q="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"536547"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"DRvWr0gangj5/5Q3DRn6ttzpcWDzl3OpHoAwAzNDR5Q=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-DRvWr0gangj5/5Q3DRn6ttzpcWDzl3OpHoAwAzNDR5Q="}]},{"Route":"lib/bootstrap/dist/css/bootstrap.min.6gzpyzhau4.css","AssetFile":"lib/bootstrap/dist/css/bootstrap.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"162726"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"SiIVMGgRhdXjKSTIddX7mh9IbOXVcwQWc7/p4nS6D/0=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"6gzpyzhau4"},{"Name":"integrity","Value":"sha256-SiIVMGgRhdXjKSTIddX7mh9IbOXVcwQWc7/p4nS6D/0="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap.min.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap.min.css","AssetFile":"lib/bootstrap/dist/css/bootstrap.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"162726"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"SiIVMGgRhdXjKSTIddX7mh9IbOXVcwQWc7/p4nS6D/0=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-SiIVMGgRhdXjKSTIddX7mh9IbOXVcwQWc7/p4nS6D/0="}]},{"Route":"lib/bootstrap/dist/css/bootstrap.min.css.8inm30yfxf.map","AssetFile":"lib/bootstrap/dist/css/bootstrap.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"449111"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"gBwg2tmA0Ci2u54gMF1jNCVku6vznarkLS6D76htNNQ=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"8inm30yfxf"},{"Name":"integrity","Value":"sha256-gBwg2tmA0Ci2u54gMF1jNCVku6vznarkLS6D76htNNQ="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap.min.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap.min.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"449111"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"gBwg2tmA0Ci2u54gMF1jNCVku6vznarkLS6D76htNNQ=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-gBwg2tmA0Ci2u54gMF1jNCVku6vznarkLS6D76htNNQ="}]},{"Route":"lib/bootstrap/dist/css/bootstrap.ozu22stjof.css","AssetFile":"lib/bootstrap/dist/css/bootstrap.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"215356"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"ZMvmWDSU4zY1Z29EQGm5Mubfz/YxF4hiReGqx84o4tA=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"ozu22stjof"},{"Name":"integrity","Value":"sha256-ZMvmWDSU4zY1Z29EQGm5Mubfz/YxF4hiReGqx84o4tA="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap.rtl.css","AssetFile":"lib/bootstrap/dist/css/bootstrap.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"214999"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"hA1uBYAPgKq7OVoXF7sqU9NtylyP0K7AJn0a4zQcTbg=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-hA1uBYAPgKq7OVoXF7sqU9NtylyP0K7AJn0a4zQcTbg="}]},{"Route":"lib/bootstrap/dist/css/bootstrap.rtl.css.4gxs3k148c.map","AssetFile":"lib/bootstrap/dist/css/bootstrap.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"536461"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"VFvmi/ZSwQFmjS6Pry9B8zXeZ/GA168TXLyykDhNMZE=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"4gxs3k148c"},{"Name":"integrity","Value":"sha256-VFvmi/ZSwQFmjS6Pry9B8zXeZ/GA168TXLyykDhNMZE="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap.rtl.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap.rtl.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"536461"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"VFvmi/ZSwQFmjS6Pry9B8zXeZ/GA168TXLyykDhNMZE=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-VFvmi/ZSwQFmjS6Pry9B8zXeZ/GA168TXLyykDhNMZE="}]},{"Route":"lib/bootstrap/dist/css/bootstrap.rtl.gjcw7pocpk.css","AssetFile":"lib/bootstrap/dist/css/bootstrap.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"214999"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"hA1uBYAPgKq7OVoXF7sqU9NtylyP0K7AJn0a4zQcTbg=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"gjcw7pocpk"},{"Name":"integrity","Value":"sha256-hA1uBYAPgKq7OVoXF7sqU9NtylyP0K7AJn0a4zQcTbg="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap.rtl.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap.rtl.min.6l4ir0ityv.css","AssetFile":"lib/bootstrap/dist/css/bootstrap.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"162831"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"ukKL5IDSyNoXFyp0wkgXeBpBITyM7JsCE6Dp96H1vI8=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"6l4ir0ityv"},{"Name":"integrity","Value":"sha256-ukKL5IDSyNoXFyp0wkgXeBpBITyM7JsCE6Dp96H1vI8="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap.rtl.min.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap.rtl.min.css","AssetFile":"lib/bootstrap/dist/css/bootstrap.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"162831"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"ukKL5IDSyNoXFyp0wkgXeBpBITyM7JsCE6Dp96H1vI8=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-ukKL5IDSyNoXFyp0wkgXeBpBITyM7JsCE6Dp96H1vI8="}]},{"Route":"lib/bootstrap/dist/css/bootstrap.rtl.min.css.fctod5rc9n.map","AssetFile":"lib/bootstrap/dist/css/bootstrap.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"661035"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"j7uqK5VoTT4rUHMr911QEU5Sa94lR3uh9E28XBMlzrM=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"fctod5rc9n"},{"Name":"integrity","Value":"sha256-j7uqK5VoTT4rUHMr911QEU5Sa94lR3uh9E28XBMlzrM="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap.rtl.min.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap.rtl.min.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"661035"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"j7uqK5VoTT4rUHMr911QEU5Sa94lR3uh9E28XBMlzrM=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-j7uqK5VoTT4rUHMr911QEU5Sa94lR3uh9E28XBMlzrM="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.1piudyfv7h.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"153194"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"JV8zLOxqX3ENLwiQX8lCiDY3TvQzbeibDAsdYtalZ4w=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"1piudyfv7h"},{"Name":"integrity","Value":"sha256-JV8zLOxqX3ENLwiQX8lCiDY3TvQzbeibDAsdYtalZ4w="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.js"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.bundle.f6zq8v6eb3.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.bundle.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"215272"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"l/hyCcHXdGwW6cO0xfobuAMZk3Nh8dsRdWwdaeSn9qo=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"f6zq8v6eb3"},{"Name":"integrity","Value":"sha256-l/hyCcHXdGwW6cO0xfobuAMZk3Nh8dsRdWwdaeSn9qo="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.bundle.js"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.bundle.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.bundle.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"215272"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"l/hyCcHXdGwW6cO0xfobuAMZk3Nh8dsRdWwdaeSn9qo=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-l/hyCcHXdGwW6cO0xfobuAMZk3Nh8dsRdWwdaeSn9qo="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.bundle.js.kbynt5jhd9.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.bundle.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"425643"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"gO4uhxfGuK0ONjRlHuwfghGfEXT5azm1oHWnTEFGTfk=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"kbynt5jhd9"},{"Name":"integrity","Value":"sha256-gO4uhxfGuK0ONjRlHuwfghGfEXT5azm1oHWnTEFGTfk="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.bundle.js.map"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.bundle.js.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.bundle.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"425643"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"gO4uhxfGuK0ONjRlHuwfghGfEXT5azm1oHWnTEFGTfk=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-gO4uhxfGuK0ONjRlHuwfghGfEXT5azm1oHWnTEFGTfk="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.bundle.min.89qbw8ngem.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.bundle.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"78474"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"rAnWnVnzChxAAi8NS+Ilr1mE7Sj+do+X/DqyilNsznM=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"89qbw8ngem"},{"Name":"integrity","Value":"sha256-rAnWnVnzChxAAi8NS+Ilr1mE7Sj+do+X/DqyilNsznM="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.bundle.min.js"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.bundle.min.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.bundle.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"78474"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"rAnWnVnzChxAAi8NS+Ilr1mE7Sj+do+X/DqyilNsznM=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-rAnWnVnzChxAAi8NS+Ilr1mE7Sj+do+X/DqyilNsznM="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.bundle.min.js.c2nslu3uf3.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.bundle.min.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"327261"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"xIBBxDPvWhk8/JdaFEZoejadfaKFUfZFwRS1D4Jkuro=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"c2nslu3uf3"},{"Name":"integrity","Value":"sha256-xIBBxDPvWhk8/JdaFEZoejadfaKFUfZFwRS1D4Jkuro="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.bundle.min.js.map"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.bundle.min.js.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.bundle.min.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"327261"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"xIBBxDPvWhk8/JdaFEZoejadfaKFUfZFwRS1D4Jkuro=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-xIBBxDPvWhk8/JdaFEZoejadfaKFUfZFwRS1D4Jkuro="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.esm.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.esm.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"143996"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"SySIctW5IQsq8JoYGrNJU4ZilHaieJru5P0+8vTcfDA=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-SySIctW5IQsq8JoYGrNJU4ZilHaieJru5P0+8vTcfDA="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.esm.js.2lgwfvgpvi.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.esm.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"288320"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"CllC/sbLvyLE9cQljmFRlITfqdZRnBv2ysX5LJtl/dg=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"2lgwfvgpvi"},{"Name":"integrity","Value":"sha256-CllC/sbLvyLE9cQljmFRlITfqdZRnBv2ysX5LJtl/dg="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.esm.js.map"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.esm.js.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.esm.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"288320"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"CllC/sbLvyLE9cQljmFRlITfqdZRnBv2ysX5LJtl/dg=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-CllC/sbLvyLE9cQljmFRlITfqdZRnBv2ysX5LJtl/dg="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.esm.min.jqwzsa9uv6.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.esm.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"72022"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"hVv0IJy8sIv1uIlVQOHnZFNAGprmLfDV+x0anYPmxYU=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"jqwzsa9uv6"},{"Name":"integrity","Value":"sha256-hVv0IJy8sIv1uIlVQOHnZFNAGprmLfDV+x0anYPmxYU="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.esm.min.js"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.esm.min.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.esm.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"72022"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"hVv0IJy8sIv1uIlVQOHnZFNAGprmLfDV+x0anYPmxYU=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-hVv0IJy8sIv1uIlVQOHnZFNAGprmLfDV+x0anYPmxYU="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.esm.min.js.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.esm.min.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"222508"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"sPqzWcSS9aRa2gpWTVNQzemajn8hrFjgXPj3j9QItQo=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-sPqzWcSS9aRa2gpWTVNQzemajn8hrFjgXPj3j9QItQo="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.esm.min.js.wsezl0heh6.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.esm.min.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"222508"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"sPqzWcSS9aRa2gpWTVNQzemajn8hrFjgXPj3j9QItQo=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"wsezl0heh6"},{"Name":"integrity","Value":"sha256-sPqzWcSS9aRa2gpWTVNQzemajn8hrFjgXPj3j9QItQo="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.esm.min.js.map"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.esm.n5w6o92d9r.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.esm.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"143996"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"SySIctW5IQsq8JoYGrNJU4ZilHaieJru5P0+8vTcfDA=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"n5w6o92d9r"},{"Name":"integrity","Value":"sha256-SySIctW5IQsq8JoYGrNJU4ZilHaieJru5P0+8vTcfDA="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.esm.js"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"153194"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"JV8zLOxqX3ENLwiQX8lCiDY3TvQzbeibDAsdYtalZ4w=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-JV8zLOxqX3ENLwiQX8lCiDY3TvQzbeibDAsdYtalZ4w="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.js.6ukhryfubh.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"289522"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"Qkl5mZUZ64aYBaORRMP9jfD1kz8J6FwiV2M86JDJkdQ=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"6ukhryfubh"},{"Name":"integrity","Value":"sha256-Qkl5mZUZ64aYBaORRMP9jfD1kz8J6FwiV2M86JDJkdQ="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.js.map"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.js.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"289522"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"Qkl5mZUZ64aYBaORRMP9jfD1kz8J6FwiV2M86JDJkdQ=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-Qkl5mZUZ64aYBaORRMP9jfD1kz8J6FwiV2M86JDJkdQ="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.min.4908xmbfjr.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"59517"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"uAMYHAQlaHq1buKLwrk7FF4qxvcLWntS2/DpdKucfmU=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"4908xmbfjr"},{"Name":"integrity","Value":"sha256-uAMYHAQlaHq1buKLwrk7FF4qxvcLWntS2/DpdKucfmU="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.min.js"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.min.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"59517"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"uAMYHAQlaHq1buKLwrk7FF4qxvcLWntS2/DpdKucfmU=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-uAMYHAQlaHq1buKLwrk7FF4qxvcLWntS2/DpdKucfmU="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.min.js.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.min.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"217145"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"ui/FQI+y0IUsY8Pbi80b8s3GeEL+PsvdaLTONobpn88=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-ui/FQI+y0IUsY8Pbi80b8s3GeEL+PsvdaLTONobpn88="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.min.js.u33ctipx7g.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.min.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"217145"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"ui/FQI+y0IUsY8Pbi80b8s3GeEL+PsvdaLTONobpn88=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"u33ctipx7g"},{"Name":"integrity","Value":"sha256-ui/FQI+y0IUsY8Pbi80b8s3GeEL+PsvdaLTONobpn88="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.min.js.map"}]},{"Route":"lib/jquery-validation-unobtrusive/LICENSE.356vix0kms.txt","AssetFile":"lib/jquery-validation-unobtrusive/LICENSE.txt","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"1139"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"16aFlqtpsG9RyieKZUUUjkJpqTgcJtWXwT312I4Iz1s=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"356vix0kms"},{"Name":"integrity","Value":"sha256-16aFlqtpsG9RyieKZUUUjkJpqTgcJtWXwT312I4Iz1s="},{"Name":"label","Value":"lib/jquery-validation-unobtrusive/LICENSE.txt"}]},{"Route":"lib/jquery-validation-unobtrusive/LICENSE.txt","AssetFile":"lib/jquery-validation-unobtrusive/LICENSE.txt","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"1139"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"16aFlqtpsG9RyieKZUUUjkJpqTgcJtWXwT312I4Iz1s=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-16aFlqtpsG9RyieKZUUUjkJpqTgcJtWXwT312I4Iz1s="}]},{"Route":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.03hjc8e09r.js","AssetFile":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"19820"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"xJbBMLGhYbXlPrrrddrSVmduyF6KEtbxEsYxw7hYZV4=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"03hjc8e09r"},{"Name":"integrity","Value":"sha256-xJbBMLGhYbXlPrrrddrSVmduyF6KEtbxEsYxw7hYZV4="},{"Name":"label","Value":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js"}]},{"Route":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js","AssetFile":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"19820"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"xJbBMLGhYbXlPrrrddrSVmduyF6KEtbxEsYxw7hYZV4=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-xJbBMLGhYbXlPrrrddrSVmduyF6KEtbxEsYxw7hYZV4="}]},{"Route":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.48y08845bh.js","AssetFile":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"5831"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"RFWFWIIPsjB4DucR4jqwxTWw13ZmtI+s6tVR2LJmZXk=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"48y08845bh"},{"Name":"integrity","Value":"sha256-RFWFWIIPsjB4DucR4jqwxTWw13ZmtI+s6tVR2LJmZXk="},{"Name":"label","Value":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"}]},{"Route":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js","AssetFile":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"5831"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"RFWFWIIPsjB4DucR4jqwxTWw13ZmtI+s6tVR2LJmZXk=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-RFWFWIIPsjB4DucR4jqwxTWw13ZmtI+s6tVR2LJmZXk="}]},{"Route":"lib/jquery-validation/LICENSE.md","AssetFile":"lib/jquery-validation/LICENSE.md","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"1117"},{"Name":"Content-Type","Value":"text/markdown"},{"Name":"ETag","Value":"\"geHEkw/WGPdaHQMRq5HuNY9snliNzU/y2OW8ycnhGXw=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-geHEkw/WGPdaHQMRq5HuNY9snliNzU/y2OW8ycnhGXw="}]},{"Route":"lib/jquery-validation/LICENSE.x0q3zqp4vz.md","AssetFile":"lib/jquery-validation/LICENSE.md","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"1117"},{"Name":"Content-Type","Value":"text/markdown"},{"Name":"ETag","Value":"\"geHEkw/WGPdaHQMRq5HuNY9snliNzU/y2OW8ycnhGXw=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"x0q3zqp4vz"},{"Name":"integrity","Value":"sha256-geHEkw/WGPdaHQMRq5HuNY9snliNzU/y2OW8ycnhGXw="},{"Name":"label","Value":"lib/jquery-validation/LICENSE.md"}]},{"Route":"lib/jquery-validation/dist/additional-methods.ay5nd8zt9x.js","AssetFile":"lib/jquery-validation/dist/additional-methods.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"52977"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"4jrcLBsi0Ugm8iLKdqDsAyaCDjkscYZdoGuNH/zqs4E=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"ay5nd8zt9x"},{"Name":"integrity","Value":"sha256-4jrcLBsi0Ugm8iLKdqDsAyaCDjkscYZdoGuNH/zqs4E="},{"Name":"label","Value":"lib/jquery-validation/dist/additional-methods.js"}]},{"Route":"lib/jquery-validation/dist/additional-methods.js","AssetFile":"lib/jquery-validation/dist/additional-methods.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"52977"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"4jrcLBsi0Ugm8iLKdqDsAyaCDjkscYZdoGuNH/zqs4E=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-4jrcLBsi0Ugm8iLKdqDsAyaCDjkscYZdoGuNH/zqs4E="}]},{"Route":"lib/jquery-validation/dist/additional-methods.min.9oaff4kq20.js","AssetFile":"lib/jquery-validation/dist/additional-methods.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"22177"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"N11IyJpHTgDcSCb3AfX4VrBnpGQeem1NoNzzgcXVyCc=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"9oaff4kq20"},{"Name":"integrity","Value":"sha256-N11IyJpHTgDcSCb3AfX4VrBnpGQeem1NoNzzgcXVyCc="},{"Name":"label","Value":"lib/jquery-validation/dist/additional-methods.min.js"}]},{"Route":"lib/jquery-validation/dist/additional-methods.min.js","AssetFile":"lib/jquery-validation/dist/additional-methods.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"22177"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"N11IyJpHTgDcSCb3AfX4VrBnpGQeem1NoNzzgcXVyCc=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-N11IyJpHTgDcSCb3AfX4VrBnpGQeem1NoNzzgcXVyCc="}]},{"Route":"lib/jquery-validation/dist/jquery.validate.6d0lkjaslc.js","AssetFile":"lib/jquery-validation/dist/jquery.validate.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"52831"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"5qqb5VxQ2t2a6Zx/neW5uppLLvaGn4nn0NdYp6g8Lyg=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"6d0lkjaslc"},{"Name":"integrity","Value":"sha256-5qqb5VxQ2t2a6Zx/neW5uppLLvaGn4nn0NdYp6g8Lyg="},{"Name":"label","Value":"lib/jquery-validation/dist/jquery.validate.js"}]},{"Route":"lib/jquery-validation/dist/jquery.validate.js","AssetFile":"lib/jquery-validation/dist/jquery.validate.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"52831"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"5qqb5VxQ2t2a6Zx/neW5uppLLvaGn4nn0NdYp6g8Lyg=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-5qqb5VxQ2t2a6Zx/neW5uppLLvaGn4nn0NdYp6g8Lyg="}]},{"Route":"lib/jquery-validation/dist/jquery.validate.min.js","AssetFile":"lib/jquery-validation/dist/jquery.validate.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"24604"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"6e0N+WJiVKBeTitK1GKSwPi3rbdPpLtuqaiitZjeD2w=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-6e0N+WJiVKBeTitK1GKSwPi3rbdPpLtuqaiitZjeD2w="}]},{"Route":"lib/jquery-validation/dist/jquery.validate.min.l1zq2mitth.js","AssetFile":"lib/jquery-validation/dist/jquery.validate.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"24604"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"6e0N+WJiVKBeTitK1GKSwPi3rbdPpLtuqaiitZjeD2w=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"l1zq2mitth"},{"Name":"integrity","Value":"sha256-6e0N+WJiVKBeTitK1GKSwPi3rbdPpLtuqaiitZjeD2w="},{"Name":"label","Value":"lib/jquery-validation/dist/jquery.validate.min.js"}]},{"Route":"lib/jquery/LICENSE.mlv21k5csn.txt","AssetFile":"lib/jquery/LICENSE.txt","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"1117"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"hjIBkvmgxQXbNXK3B9YQ3t06RwLuQSQzC/dpvuB/lMk=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"mlv21k5csn"},{"Name":"integrity","Value":"sha256-hjIBkvmgxQXbNXK3B9YQ3t06RwLuQSQzC/dpvuB/lMk="},{"Name":"label","Value":"lib/jquery/LICENSE.txt"}]},{"Route":"lib/jquery/LICENSE.txt","AssetFile":"lib/jquery/LICENSE.txt","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"1117"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"hjIBkvmgxQXbNXK3B9YQ3t06RwLuQSQzC/dpvuB/lMk=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-hjIBkvmgxQXbNXK3B9YQ3t06RwLuQSQzC/dpvuB/lMk="}]},{"Route":"lib/jquery/dist/jquery.7s2n0ol71w.js","AssetFile":"lib/jquery/dist/jquery.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"299461"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"KSI/3xxCrCexCupdzQJRP1B6Iqg+2NA+X2u38cQdqq8=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"7s2n0ol71w"},{"Name":"integrity","Value":"sha256-KSI/3xxCrCexCupdzQJRP1B6Iqg+2NA+X2u38cQdqq8="},{"Name":"label","Value":"lib/jquery/dist/jquery.js"}]},{"Route":"lib/jquery/dist/jquery.js","AssetFile":"lib/jquery/dist/jquery.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"299461"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"KSI/3xxCrCexCupdzQJRP1B6Iqg+2NA+X2u38cQdqq8=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-KSI/3xxCrCexCupdzQJRP1B6Iqg+2NA+X2u38cQdqq8="}]},{"Route":"lib/jquery/dist/jquery.min.5pze98is44.map","AssetFile":"lib/jquery/dist/jquery.min.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"137972"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"OZVI+w57FGwS9boYCZpH1ZSpcP7pYhLu4KtIUvPlZ4I=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"5pze98is44"},{"Name":"integrity","Value":"sha256-OZVI+w57FGwS9boYCZpH1ZSpcP7pYhLu4KtIUvPlZ4I="},{"Name":"label","Value":"lib/jquery/dist/jquery.min.map"}]},{"Route":"lib/jquery/dist/jquery.min.ehgnz7f14e.js","AssetFile":"lib/jquery/dist/jquery.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"89503"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"zp0HUArZHsK1JMJwdk7EyaM+eDINjTdOxADt5Ij2JRs=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"ehgnz7f14e"},{"Name":"integrity","Value":"sha256-zp0HUArZHsK1JMJwdk7EyaM+eDINjTdOxADt5Ij2JRs="},{"Name":"label","Value":"lib/jquery/dist/jquery.min.js"}]},{"Route":"lib/jquery/dist/jquery.min.js","AssetFile":"lib/jquery/dist/jquery.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"89503"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"zp0HUArZHsK1JMJwdk7EyaM+eDINjTdOxADt5Ij2JRs=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-zp0HUArZHsK1JMJwdk7EyaM+eDINjTdOxADt5Ij2JRs="}]},{"Route":"lib/jquery/dist/jquery.min.map","AssetFile":"lib/jquery/dist/jquery.min.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"137972"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"OZVI+w57FGwS9boYCZpH1ZSpcP7pYhLu4KtIUvPlZ4I=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-OZVI+w57FGwS9boYCZpH1ZSpcP7pYhLu4KtIUvPlZ4I="}]}]}


=== DOSYA: Publishes\CvSite\appsettings.Development.json ===

[İÇERİK]
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}



=== DOSYA: Publishes\CvSite\appsettings.json ===

[İÇERİK]
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",


  "ApiSettings": {
    "ApiUrl": "http://localhost:5000/api/"
  },

  "LoggerSettings": {
    "LogStatus": true,
    "LogLevel": 0
  },

  "Maintenance": {
    "Enabled": false,
    "EndDateTime": "2025-08-01T15:30:00" // bakım bitiş zamanı (yerel saatinize göre)
  }
}



=== DOSYA: Publishes\CvSite\web.config ===

[İÇERİK]
﻿<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <location path="." inheritInChildApplications="false">
    <system.webServer>
      <handlers>
        <add name="aspNetCore" path="*" verb="*" modules="AspNetCoreModuleV2" resourceType="Unspecified" />
      </handlers>
      <aspNetCore processPath="dotnet" arguments=".\TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC.dll" stdoutLogEnabled="false" stdoutLogFile=".\logs\stdout" hostingModel="inprocess" />
    </system.webServer>
  </location>
</configuration>
<!--ProjectGuid: baebf4d5-255d-4e0b-bd57-d407face6bed-->


=== DOSYA: Publishes\MainApi\TahaMucasirogluBlog.Presentation.API.deps.json ===

[İÇERİK]
{
  "runtimeTarget": {
    "name": ".NETCoreApp,Version=v8.0",
    "signature": ""
  },
  "compilationOptions": {},
  "targets": {
    ".NETCoreApp,Version=v8.0": {
      "TahaMucasirogluBlog.Presentation.API/1.0.0": {
        "dependencies": {
          "Microsoft.AspNetCore.Authentication.JwtBearer": "8.0.11",
          "Microsoft.AspNetCore.Mvc.NewtonsoftJson": "8.0.11",
          "Microsoft.EntityFrameworkCore.Design": "8.0.11",
          "Microsoft.EntityFrameworkCore.Tools": "8.0.11",
          "Swashbuckle.AspNetCore": "6.6.2",
          "System.IdentityModel.Tokens.Jwt": "8.12.1",
          "System.Threading.RateLimiting": "9.0.7",
          "TahaMucasirogluBlog.Service.Cv": "1.0.0",
          "TahaMucasirogluBlog.Service.Database": "1.0.0"
        },
        "runtime": {
          "TahaMucasirogluBlog.Presentation.API.dll": {}
        }
      },
      "AutoMapper/14.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Options": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/AutoMapper.dll": {
            "assemblyVersion": "14.0.0.0",
            "fileVersion": "14.0.0.0"
          }
        }
      },
      "Azure.Core/1.38.0": {
        "dependencies": {
          "Microsoft.Bcl.AsyncInterfaces": "6.0.0",
          "System.ClientModel": "1.0.0",
          "System.Diagnostics.DiagnosticSource": "9.0.0",
          "System.Memory.Data": "1.0.2",
          "System.Numerics.Vectors": "4.5.0",
          "System.Text.Encodings.Web": "9.0.0",
          "System.Text.Json": "9.0.0",
          "System.Threading.Tasks.Extensions": "4.5.4"
        },
        "runtime": {
          "lib/net6.0/Azure.Core.dll": {
            "assemblyVersion": "1.38.0.0",
            "fileVersion": "1.3800.24.12602"
          }
        }
      },
      "Azure.Identity/1.11.4": {
        "dependencies": {
          "Azure.Core": "1.38.0",
          "Microsoft.Identity.Client": "4.61.3",
          "Microsoft.Identity.Client.Extensions.Msal": "4.61.3",
          "System.Memory": "4.5.4",
          "System.Security.Cryptography.ProtectedData": "6.0.0",
          "System.Text.Json": "9.0.0",
          "System.Threading.Tasks.Extensions": "4.5.4"
        },
        "runtime": {
          "lib/netstandard2.0/Azure.Identity.dll": {
            "assemblyVersion": "1.11.4.0",
            "fileVersion": "1.1100.424.31005"
          }
        }
      },
      "FluentValidation/12.0.0": {
        "runtime": {
          "lib/net8.0/FluentValidation.dll": {
            "assemblyVersion": "12.0.0.0",
            "fileVersion": "12.0.0.0"
          }
        }
      },
      "FluentValidation.DependencyInjectionExtensions/12.0.0": {
        "dependencies": {
          "FluentValidation": "12.0.0",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/FluentValidation.DependencyInjectionExtensions.dll": {
            "assemblyVersion": "12.0.0.0",
            "fileVersion": "12.0.0.0"
          }
        }
      },
      "Humanizer.Core/2.14.1": {},
      "Microsoft.AspNetCore.Authentication.JwtBearer/8.0.11": {
        "dependencies": {
          "Microsoft.IdentityModel.Protocols.OpenIdConnect": "7.1.2"
        },
        "runtime": {
          "lib/net8.0/Microsoft.AspNetCore.Authentication.JwtBearer.dll": {
            "assemblyVersion": "8.0.11.0",
            "fileVersion": "8.0.1124.52116"
          }
        }
      },
      "Microsoft.AspNetCore.JsonPatch/8.0.11": {
        "dependencies": {
          "Microsoft.CSharp": "4.7.0",
          "Newtonsoft.Json": "13.0.3"
        },
        "runtime": {
          "lib/net8.0/Microsoft.AspNetCore.JsonPatch.dll": {
            "assemblyVersion": "8.0.11.0",
            "fileVersion": "8.0.1124.52116"
          }
        }
      },
      "Microsoft.AspNetCore.Mvc.NewtonsoftJson/8.0.11": {
        "dependencies": {
          "Microsoft.AspNetCore.JsonPatch": "8.0.11",
          "Newtonsoft.Json": "13.0.3",
          "Newtonsoft.Json.Bson": "1.0.2"
        },
        "runtime": {
          "lib/net8.0/Microsoft.AspNetCore.Mvc.NewtonsoftJson.dll": {
            "assemblyVersion": "8.0.11.0",
            "fileVersion": "8.0.1124.52116"
          }
        }
      },
      "Microsoft.Bcl.AsyncInterfaces/6.0.0": {
        "runtime": {
          "lib/netstandard2.1/Microsoft.Bcl.AsyncInterfaces.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "Microsoft.CodeAnalysis.Analyzers/3.3.3": {},
      "Microsoft.CodeAnalysis.Common/4.5.0": {
        "dependencies": {
          "Microsoft.CodeAnalysis.Analyzers": "3.3.3",
          "System.Collections.Immutable": "6.0.0",
          "System.Reflection.Metadata": "6.0.1",
          "System.Runtime.CompilerServices.Unsafe": "6.0.0",
          "System.Text.Encoding.CodePages": "6.0.0"
        }
      },
      "Microsoft.CodeAnalysis.CSharp/4.5.0": {
        "dependencies": {
          "Microsoft.CodeAnalysis.Common": "4.5.0"
        }
      },
      "Microsoft.CodeAnalysis.CSharp.Workspaces/4.5.0": {
        "dependencies": {
          "Humanizer.Core": "2.14.1",
          "Microsoft.CodeAnalysis.CSharp": "4.5.0",
          "Microsoft.CodeAnalysis.Common": "4.5.0",
          "Microsoft.CodeAnalysis.Workspaces.Common": "4.5.0"
        }
      },
      "Microsoft.CodeAnalysis.Workspaces.Common/4.5.0": {
        "dependencies": {
          "Humanizer.Core": "2.14.1",
          "Microsoft.Bcl.AsyncInterfaces": "6.0.0",
          "Microsoft.CodeAnalysis.Common": "4.5.0",
          "System.Composition": "6.0.0",
          "System.IO.Pipelines": "9.0.0",
          "System.Threading.Channels": "6.0.0"
        }
      },
      "Microsoft.CSharp/4.7.0": {},
      "Microsoft.Data.SqlClient/5.1.6": {
        "dependencies": {
          "Azure.Identity": "1.11.4",
          "Microsoft.Data.SqlClient.SNI.runtime": "5.1.1",
          "Microsoft.Identity.Client": "4.61.3",
          "Microsoft.IdentityModel.JsonWebTokens": "8.12.1",
          "Microsoft.IdentityModel.Protocols.OpenIdConnect": "7.1.2",
          "Microsoft.SqlServer.Server": "1.0.0",
          "System.Configuration.ConfigurationManager": "6.0.1",
          "System.Diagnostics.DiagnosticSource": "9.0.0",
          "System.Runtime.Caching": "6.0.0",
          "System.Security.Cryptography.Cng": "5.0.0",
          "System.Security.Principal.Windows": "5.0.0",
          "System.Text.Encoding.CodePages": "6.0.0",
          "System.Text.Encodings.Web": "9.0.0"
        },
        "runtime": {
          "lib/net6.0/Microsoft.Data.SqlClient.dll": {
            "assemblyVersion": "5.0.0.0",
            "fileVersion": "5.16.24240.5"
          }
        },
        "runtimeTargets": {
          "runtimes/unix/lib/net6.0/Microsoft.Data.SqlClient.dll": {
            "rid": "unix",
            "assetType": "runtime",
            "assemblyVersion": "5.0.0.0",
            "fileVersion": "5.16.24240.5"
          },
          "runtimes/win/lib/net6.0/Microsoft.Data.SqlClient.dll": {
            "rid": "win",
            "assetType": "runtime",
            "assemblyVersion": "5.0.0.0",
            "fileVersion": "5.16.24240.5"
          }
        }
      },
      "Microsoft.Data.SqlClient.SNI.runtime/5.1.1": {
        "runtimeTargets": {
          "runtimes/win-arm/native/Microsoft.Data.SqlClient.SNI.dll": {
            "rid": "win-arm",
            "assetType": "native",
            "fileVersion": "5.1.1.0"
          },
          "runtimes/win-arm64/native/Microsoft.Data.SqlClient.SNI.dll": {
            "rid": "win-arm64",
            "assetType": "native",
            "fileVersion": "5.1.1.0"
          },
          "runtimes/win-x64/native/Microsoft.Data.SqlClient.SNI.dll": {
            "rid": "win-x64",
            "assetType": "native",
            "fileVersion": "5.1.1.0"
          },
          "runtimes/win-x86/native/Microsoft.Data.SqlClient.SNI.dll": {
            "rid": "win-x86",
            "assetType": "native",
            "fileVersion": "5.1.1.0"
          }
        }
      },
      "Microsoft.EntityFrameworkCore/8.0.11": {
        "dependencies": {
          "Microsoft.EntityFrameworkCore.Abstractions": "8.0.11",
          "Microsoft.EntityFrameworkCore.Analyzers": "8.0.11",
          "Microsoft.Extensions.Caching.Memory": "8.0.1",
          "Microsoft.Extensions.Logging": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.dll": {
            "assemblyVersion": "8.0.11.0",
            "fileVersion": "8.0.1124.52104"
          }
        }
      },
      "Microsoft.EntityFrameworkCore.Abstractions/8.0.11": {
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Abstractions.dll": {
            "assemblyVersion": "8.0.11.0",
            "fileVersion": "8.0.1124.52104"
          }
        }
      },
      "Microsoft.EntityFrameworkCore.Analyzers/8.0.11": {},
      "Microsoft.EntityFrameworkCore.Design/8.0.11": {
        "dependencies": {
          "Humanizer.Core": "2.14.1",
          "Microsoft.CodeAnalysis.CSharp.Workspaces": "4.5.0",
          "Microsoft.EntityFrameworkCore.Relational": "8.0.11",
          "Microsoft.Extensions.DependencyModel": "9.0.0",
          "Mono.TextTemplating": "2.2.1"
        }
      },
      "Microsoft.EntityFrameworkCore.Relational/8.0.11": {
        "dependencies": {
          "Microsoft.EntityFrameworkCore": "8.0.11",
          "Microsoft.Extensions.Configuration.Abstractions": "9.0.7"
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Relational.dll": {
            "assemblyVersion": "8.0.11.0",
            "fileVersion": "8.0.1124.52104"
          }
        }
      },
      "Microsoft.EntityFrameworkCore.SqlServer/8.0.11": {
        "dependencies": {
          "Microsoft.Data.SqlClient": "5.1.6",
          "Microsoft.EntityFrameworkCore.Relational": "8.0.11",
          "System.Formats.Asn1": "8.0.1"
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.SqlServer.dll": {
            "assemblyVersion": "8.0.11.0",
            "fileVersion": "8.0.1124.52104"
          }
        }
      },
      "Microsoft.EntityFrameworkCore.Tools/8.0.11": {
        "dependencies": {
          "Microsoft.EntityFrameworkCore.Design": "8.0.11"
        }
      },
      "Microsoft.Extensions.ApiDescription.Server/6.0.5": {},
      "Microsoft.Extensions.Caching.Abstractions/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Primitives": "9.0.7"
        }
      },
      "Microsoft.Extensions.Caching.Memory/8.0.1": {
        "dependencies": {
          "Microsoft.Extensions.Caching.Abstractions": "8.0.0",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "9.0.0",
          "Microsoft.Extensions.Options": "9.0.0",
          "Microsoft.Extensions.Primitives": "9.0.7"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Caching.Memory.dll": {
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.1024.46610"
          }
        }
      },
      "Microsoft.Extensions.Configuration/9.0.7": {
        "dependencies": {
          "Microsoft.Extensions.Configuration.Abstractions": "9.0.7",
          "Microsoft.Extensions.Primitives": "9.0.7"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Configuration.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.725.31616"
          }
        }
      },
      "Microsoft.Extensions.Configuration.Abstractions/9.0.7": {
        "dependencies": {
          "Microsoft.Extensions.Primitives": "9.0.7"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Configuration.Abstractions.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.725.31616"
          }
        }
      },
      "Microsoft.Extensions.Configuration.Binder/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Configuration.Abstractions": "9.0.7"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Configuration.Binder.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.DependencyInjection/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.DependencyInjection.Abstractions/9.0.0": {
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.DependencyModel/9.0.0": {
        "dependencies": {
          "System.Text.Encodings.Web": "9.0.0",
          "System.Text.Json": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyModel.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.Diagnostics.Abstractions/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0",
          "Microsoft.Extensions.Options": "9.0.0",
          "System.Diagnostics.DiagnosticSource": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Diagnostics.Abstractions.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.FileProviders.Abstractions/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Primitives": "9.0.7"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.FileProviders.Abstractions.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.Hosting.Abstractions/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Configuration.Abstractions": "9.0.7",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0",
          "Microsoft.Extensions.Diagnostics.Abstractions": "9.0.0",
          "Microsoft.Extensions.FileProviders.Abstractions": "9.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Hosting.Abstractions.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.Logging/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection": "9.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "9.0.0",
          "Microsoft.Extensions.Options": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Logging.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.Logging.Abstractions/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0",
          "System.Diagnostics.DiagnosticSource": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Logging.Abstractions.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.Options/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0",
          "Microsoft.Extensions.Primitives": "9.0.7"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Options.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.Primitives/9.0.7": {
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Primitives.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.725.31616"
          }
        }
      },
      "Microsoft.Identity.Client/4.61.3": {
        "dependencies": {
          "Microsoft.IdentityModel.Abstractions": "8.12.1",
          "System.Diagnostics.DiagnosticSource": "9.0.0"
        },
        "runtime": {
          "lib/net6.0/Microsoft.Identity.Client.dll": {
            "assemblyVersion": "4.61.3.0",
            "fileVersion": "4.61.3.0"
          }
        }
      },
      "Microsoft.Identity.Client.Extensions.Msal/4.61.3": {
        "dependencies": {
          "Microsoft.Identity.Client": "4.61.3",
          "System.Security.Cryptography.ProtectedData": "6.0.0"
        },
        "runtime": {
          "lib/net6.0/Microsoft.Identity.Client.Extensions.Msal.dll": {
            "assemblyVersion": "4.61.3.0",
            "fileVersion": "4.61.3.0"
          }
        }
      },
      "Microsoft.IdentityModel.Abstractions/8.12.1": {
        "runtime": {
          "lib/net8.0/Microsoft.IdentityModel.Abstractions.dll": {
            "assemblyVersion": "8.12.1.0",
            "fileVersion": "8.12.1.60617"
          }
        }
      },
      "Microsoft.IdentityModel.JsonWebTokens/8.12.1": {
        "dependencies": {
          "Microsoft.IdentityModel.Tokens": "8.12.1"
        },
        "runtime": {
          "lib/net8.0/Microsoft.IdentityModel.JsonWebTokens.dll": {
            "assemblyVersion": "8.12.1.0",
            "fileVersion": "8.12.1.60617"
          }
        }
      },
      "Microsoft.IdentityModel.Logging/8.12.1": {
        "dependencies": {
          "Microsoft.IdentityModel.Abstractions": "8.12.1"
        },
        "runtime": {
          "lib/net8.0/Microsoft.IdentityModel.Logging.dll": {
            "assemblyVersion": "8.12.1.0",
            "fileVersion": "8.12.1.60617"
          }
        }
      },
      "Microsoft.IdentityModel.Protocols/7.1.2": {
        "dependencies": {
          "Microsoft.IdentityModel.Logging": "8.12.1",
          "Microsoft.IdentityModel.Tokens": "8.12.1"
        },
        "runtime": {
          "lib/net8.0/Microsoft.IdentityModel.Protocols.dll": {
            "assemblyVersion": "7.1.2.0",
            "fileVersion": "7.1.2.41121"
          }
        }
      },
      "Microsoft.IdentityModel.Protocols.OpenIdConnect/7.1.2": {
        "dependencies": {
          "Microsoft.IdentityModel.Protocols": "7.1.2",
          "System.IdentityModel.Tokens.Jwt": "8.12.1"
        },
        "runtime": {
          "lib/net8.0/Microsoft.IdentityModel.Protocols.OpenIdConnect.dll": {
            "assemblyVersion": "7.1.2.0",
            "fileVersion": "7.1.2.41121"
          }
        }
      },
      "Microsoft.IdentityModel.Tokens/8.12.1": {
        "dependencies": {
          "Microsoft.Extensions.Logging.Abstractions": "9.0.0",
          "Microsoft.IdentityModel.Logging": "8.12.1"
        },
        "runtime": {
          "lib/net8.0/Microsoft.IdentityModel.Tokens.dll": {
            "assemblyVersion": "8.12.1.0",
            "fileVersion": "8.12.1.60617"
          }
        }
      },
      "Microsoft.OpenApi/1.6.14": {
        "runtime": {
          "lib/netstandard2.0/Microsoft.OpenApi.dll": {
            "assemblyVersion": "1.6.14.0",
            "fileVersion": "1.6.14.0"
          }
        }
      },
      "Microsoft.SqlServer.Server/1.0.0": {
        "runtime": {
          "lib/netstandard2.0/Microsoft.SqlServer.Server.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "Microsoft.Win32.SystemEvents/6.0.0": {
        "runtime": {
          "lib/net6.0/Microsoft.Win32.SystemEvents.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        },
        "runtimeTargets": {
          "runtimes/win/lib/net6.0/Microsoft.Win32.SystemEvents.dll": {
            "rid": "win",
            "assetType": "runtime",
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "Mono.TextTemplating/2.2.1": {
        "dependencies": {
          "System.CodeDom": "4.4.0"
        }
      },
      "Newtonsoft.Json/13.0.3": {
        "runtime": {
          "lib/net6.0/Newtonsoft.Json.dll": {
            "assemblyVersion": "13.0.0.0",
            "fileVersion": "13.0.3.27908"
          }
        }
      },
      "Newtonsoft.Json.Bson/1.0.2": {
        "dependencies": {
          "Newtonsoft.Json": "13.0.3"
        },
        "runtime": {
          "lib/netstandard2.0/Newtonsoft.Json.Bson.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.2.22727"
          }
        }
      },
      "Serilog/4.3.0": {
        "runtime": {
          "lib/net8.0/Serilog.dll": {
            "assemblyVersion": "4.3.0.0",
            "fileVersion": "4.3.0.0"
          }
        }
      },
      "Serilog.AspNetCore/9.0.0": {
        "dependencies": {
          "Serilog": "4.3.0",
          "Serilog.Extensions.Hosting": "9.0.0",
          "Serilog.Formatting.Compact": "3.0.0",
          "Serilog.Settings.Configuration": "9.0.0",
          "Serilog.Sinks.Console": "6.0.0",
          "Serilog.Sinks.Debug": "3.0.0",
          "Serilog.Sinks.File": "7.0.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.AspNetCore.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.0.0"
          }
        }
      },
      "Serilog.Extensions.Hosting/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0",
          "Microsoft.Extensions.Hosting.Abstractions": "9.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "9.0.0",
          "Serilog": "4.3.0",
          "Serilog.Extensions.Logging": "9.0.2"
        },
        "runtime": {
          "lib/net8.0/Serilog.Extensions.Hosting.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.0.0"
          }
        }
      },
      "Serilog.Extensions.Logging/9.0.2": {
        "dependencies": {
          "Microsoft.Extensions.Logging": "9.0.0",
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Extensions.Logging.dll": {
            "assemblyVersion": "9.0.2.0",
            "fileVersion": "9.0.2.0"
          }
        }
      },
      "Serilog.Formatting.Compact/3.0.0": {
        "dependencies": {
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Formatting.Compact.dll": {
            "assemblyVersion": "3.0.0.0",
            "fileVersion": "3.0.0.0"
          }
        }
      },
      "Serilog.Settings.Configuration/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Configuration.Binder": "9.0.0",
          "Microsoft.Extensions.DependencyModel": "9.0.0",
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Settings.Configuration.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.0.0"
          }
        }
      },
      "Serilog.Sinks.Async/2.1.0": {
        "dependencies": {
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Sinks.Async.dll": {
            "assemblyVersion": "2.1.0.0",
            "fileVersion": "2.1.0.0"
          }
        }
      },
      "Serilog.Sinks.Console/6.0.0": {
        "dependencies": {
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Sinks.Console.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.0.0"
          }
        }
      },
      "Serilog.Sinks.Debug/3.0.0": {
        "dependencies": {
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Sinks.Debug.dll": {
            "assemblyVersion": "3.0.0.0",
            "fileVersion": "3.0.0.0"
          }
        }
      },
      "Serilog.Sinks.File/7.0.0": {
        "dependencies": {
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Sinks.File.dll": {
            "assemblyVersion": "7.0.0.0",
            "fileVersion": "7.0.0.0"
          }
        }
      },
      "Serilog.Sinks.PeriodicBatching/5.0.0": {
        "dependencies": {
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Sinks.PeriodicBatching.dll": {
            "assemblyVersion": "5.0.0.0",
            "fileVersion": "5.0.0.0"
          }
        }
      },
      "Swashbuckle.AspNetCore/6.6.2": {
        "dependencies": {
          "Microsoft.Extensions.ApiDescription.Server": "6.0.5",
          "Swashbuckle.AspNetCore.Swagger": "6.6.2",
          "Swashbuckle.AspNetCore.SwaggerGen": "6.6.2",
          "Swashbuckle.AspNetCore.SwaggerUI": "6.6.2"
        }
      },
      "Swashbuckle.AspNetCore.Swagger/6.6.2": {
        "dependencies": {
          "Microsoft.OpenApi": "1.6.14"
        },
        "runtime": {
          "lib/net8.0/Swashbuckle.AspNetCore.Swagger.dll": {
            "assemblyVersion": "6.6.2.0",
            "fileVersion": "6.6.2.401"
          }
        }
      },
      "Swashbuckle.AspNetCore.SwaggerGen/6.6.2": {
        "dependencies": {
          "Swashbuckle.AspNetCore.Swagger": "6.6.2"
        },
        "runtime": {
          "lib/net8.0/Swashbuckle.AspNetCore.SwaggerGen.dll": {
            "assemblyVersion": "6.6.2.0",
            "fileVersion": "6.6.2.401"
          }
        }
      },
      "Swashbuckle.AspNetCore.SwaggerUI/6.6.2": {
        "runtime": {
          "lib/net8.0/Swashbuckle.AspNetCore.SwaggerUI.dll": {
            "assemblyVersion": "6.6.2.0",
            "fileVersion": "6.6.2.401"
          }
        }
      },
      "System.ClientModel/1.0.0": {
        "dependencies": {
          "System.Memory.Data": "1.0.2",
          "System.Text.Json": "9.0.0"
        },
        "runtime": {
          "lib/net6.0/System.ClientModel.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.24.5302"
          }
        }
      },
      "System.CodeDom/4.4.0": {},
      "System.Collections.Immutable/6.0.0": {
        "dependencies": {
          "System.Runtime.CompilerServices.Unsafe": "6.0.0"
        }
      },
      "System.Composition/6.0.0": {
        "dependencies": {
          "System.Composition.AttributedModel": "6.0.0",
          "System.Composition.Convention": "6.0.0",
          "System.Composition.Hosting": "6.0.0",
          "System.Composition.Runtime": "6.0.0",
          "System.Composition.TypedParts": "6.0.0"
        }
      },
      "System.Composition.AttributedModel/6.0.0": {},
      "System.Composition.Convention/6.0.0": {
        "dependencies": {
          "System.Composition.AttributedModel": "6.0.0"
        }
      },
      "System.Composition.Hosting/6.0.0": {
        "dependencies": {
          "System.Composition.Runtime": "6.0.0"
        }
      },
      "System.Composition.Runtime/6.0.0": {},
      "System.Composition.TypedParts/6.0.0": {
        "dependencies": {
          "System.Composition.AttributedModel": "6.0.0",
          "System.Composition.Hosting": "6.0.0",
          "System.Composition.Runtime": "6.0.0"
        }
      },
      "System.Configuration.ConfigurationManager/6.0.1": {
        "dependencies": {
          "System.Security.Cryptography.ProtectedData": "6.0.0",
          "System.Security.Permissions": "6.0.0"
        },
        "runtime": {
          "lib/net6.0/System.Configuration.ConfigurationManager.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.922.41905"
          }
        }
      },
      "System.Diagnostics.DiagnosticSource/9.0.0": {
        "runtime": {
          "lib/net8.0/System.Diagnostics.DiagnosticSource.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "System.Drawing.Common/6.0.0": {
        "dependencies": {
          "Microsoft.Win32.SystemEvents": "6.0.0"
        },
        "runtime": {
          "lib/net6.0/System.Drawing.Common.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        },
        "runtimeTargets": {
          "runtimes/unix/lib/net6.0/System.Drawing.Common.dll": {
            "rid": "unix",
            "assetType": "runtime",
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          },
          "runtimes/win/lib/net6.0/System.Drawing.Common.dll": {
            "rid": "win",
            "assetType": "runtime",
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "System.Formats.Asn1/8.0.1": {},
      "System.IdentityModel.Tokens.Jwt/8.12.1": {
        "dependencies": {
          "Microsoft.IdentityModel.JsonWebTokens": "8.12.1",
          "Microsoft.IdentityModel.Tokens": "8.12.1"
        },
        "runtime": {
          "lib/net8.0/System.IdentityModel.Tokens.Jwt.dll": {
            "assemblyVersion": "8.12.1.0",
            "fileVersion": "8.12.1.60617"
          }
        }
      },
      "System.IO.Pipelines/9.0.0": {
        "runtime": {
          "lib/net8.0/System.IO.Pipelines.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "System.Memory/4.5.4": {},
      "System.Memory.Data/1.0.2": {
        "dependencies": {
          "System.Text.Encodings.Web": "9.0.0",
          "System.Text.Json": "9.0.0"
        },
        "runtime": {
          "lib/netstandard2.0/System.Memory.Data.dll": {
            "assemblyVersion": "1.0.2.0",
            "fileVersion": "1.0.221.20802"
          }
        }
      },
      "System.Numerics.Vectors/4.5.0": {},
      "System.Reflection.Metadata/6.0.1": {
        "dependencies": {
          "System.Collections.Immutable": "6.0.0"
        }
      },
      "System.Runtime.Caching/6.0.0": {
        "dependencies": {
          "System.Configuration.ConfigurationManager": "6.0.1"
        },
        "runtime": {
          "lib/net6.0/System.Runtime.Caching.dll": {
            "assemblyVersion": "4.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        },
        "runtimeTargets": {
          "runtimes/win/lib/net6.0/System.Runtime.Caching.dll": {
            "rid": "win",
            "assetType": "runtime",
            "assemblyVersion": "4.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "System.Runtime.CompilerServices.Unsafe/6.0.0": {},
      "System.Security.AccessControl/6.0.0": {},
      "System.Security.Cryptography.Cng/5.0.0": {
        "dependencies": {
          "System.Formats.Asn1": "8.0.1"
        }
      },
      "System.Security.Cryptography.ProtectedData/6.0.0": {
        "runtime": {
          "lib/net6.0/System.Security.Cryptography.ProtectedData.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        },
        "runtimeTargets": {
          "runtimes/win/lib/net6.0/System.Security.Cryptography.ProtectedData.dll": {
            "rid": "win",
            "assetType": "runtime",
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "System.Security.Permissions/6.0.0": {
        "dependencies": {
          "System.Security.AccessControl": "6.0.0",
          "System.Windows.Extensions": "6.0.0"
        },
        "runtime": {
          "lib/net6.0/System.Security.Permissions.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "System.Security.Principal.Windows/5.0.0": {},
      "System.Text.Encoding.CodePages/6.0.0": {
        "dependencies": {
          "System.Runtime.CompilerServices.Unsafe": "6.0.0"
        }
      },
      "System.Text.Encodings.Web/9.0.0": {
        "runtime": {
          "lib/net8.0/System.Text.Encodings.Web.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        },
        "runtimeTargets": {
          "runtimes/browser/lib/net8.0/System.Text.Encodings.Web.dll": {
            "rid": "browser",
            "assetType": "runtime",
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "System.Text.Json/9.0.0": {
        "dependencies": {
          "System.IO.Pipelines": "9.0.0",
          "System.Text.Encodings.Web": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/System.Text.Json.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "System.Threading.Channels/6.0.0": {},
      "System.Threading.RateLimiting/9.0.7": {
        "runtime": {
          "lib/net8.0/System.Threading.RateLimiting.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.725.31616"
          }
        }
      },
      "System.Threading.Tasks.Extensions/4.5.4": {},
      "System.Windows.Extensions/6.0.0": {
        "dependencies": {
          "System.Drawing.Common": "6.0.0"
        },
        "runtime": {
          "lib/net6.0/System.Windows.Extensions.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        },
        "runtimeTargets": {
          "runtimes/win/lib/net6.0/System.Windows.Extensions.dll": {
            "rid": "win",
            "assetType": "runtime",
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "TahaMucasirogluBlog.Application.Managers/1.0.0": {
        "dependencies": {
          "Serilog": "4.3.0",
          "Serilog.AspNetCore": "9.0.0",
          "Serilog.Extensions.Logging": "9.0.2",
          "Serilog.Settings.Configuration": "9.0.0",
          "Serilog.Sinks.Async": "2.1.0",
          "Serilog.Sinks.Console": "6.0.0",
          "Serilog.Sinks.Debug": "3.0.0",
          "Serilog.Sinks.File": "7.0.0",
          "Serilog.Sinks.PeriodicBatching": "5.0.0",
          "TahaMucasirogluBlog.Domain.Constant": "1.0.0",
          "TahaMucasirogluBlog.Domain.DTOs": "1.0.0",
          "TahaMucasirogluBlog.Domain.Entities": "1.0.0",
          "TahaMucasirogluBlog.Domain.Extensions": "1.0.0",
          "TahaMucasirogluBlog.Domain.Models": "1.0.0",
          "TahaMucasirogluBlog.Domain.Return": "1.0.0"
        },
        "runtime": {
          "TahaMucasirogluBlog.Application.Managers.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Application.Mapper/1.0.0": {
        "dependencies": {
          "AutoMapper": "14.0.0",
          "TahaMucasirogluBlog.Domain.Constant": "1.0.0",
          "TahaMucasirogluBlog.Domain.DTOs": "1.0.0",
          "TahaMucasirogluBlog.Domain.Entities": "1.0.0",
          "TahaMucasirogluBlog.Domain.Extensions": "1.0.0",
          "TahaMucasirogluBlog.Domain.Models": "1.0.0",
          "TahaMucasirogluBlog.Domain.Return": "1.0.0"
        },
        "runtime": {
          "TahaMucasirogluBlog.Application.Mapper.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Application.Validation/1.0.0": {
        "dependencies": {
          "FluentValidation": "12.0.0",
          "FluentValidation.DependencyInjectionExtensions": "12.0.0",
          "TahaMucasirogluBlog.Domain.Constant": "1.0.0",
          "TahaMucasirogluBlog.Domain.DTOs": "1.0.0",
          "TahaMucasirogluBlog.Domain.Entities": "1.0.0",
          "TahaMucasirogluBlog.Domain.Extensions": "1.0.0",
          "TahaMucasirogluBlog.Domain.Models": "1.0.0",
          "TahaMucasirogluBlog.Domain.Return": "1.0.0"
        },
        "runtime": {
          "TahaMucasirogluBlog.Application.Validation.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Domain.Constant/1.0.0": {
        "runtime": {
          "TahaMucasirogluBlog.Domain.Constant.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Domain.DTOs/1.0.0": {
        "runtime": {
          "TahaMucasirogluBlog.Domain.DTOs.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Domain.Entities/1.0.0": {
        "runtime": {
          "TahaMucasirogluBlog.Domain.Entities.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Domain.Extensions/1.0.0": {
        "dependencies": {
          "Microsoft.EntityFrameworkCore": "8.0.11",
          "Microsoft.EntityFrameworkCore.Abstractions": "8.0.11",
          "Microsoft.EntityFrameworkCore.Analyzers": "8.0.11",
          "Microsoft.EntityFrameworkCore.SqlServer": "8.0.11",
          "Microsoft.Extensions.Configuration": "9.0.7",
          "Newtonsoft.Json": "13.0.3"
        },
        "runtime": {
          "TahaMucasirogluBlog.Domain.Extensions.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Domain.Models/1.0.0": {
        "runtime": {
          "TahaMucasirogluBlog.Domain.Models.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Domain.Return/1.0.0": {
        "runtime": {
          "TahaMucasirogluBlog.Domain.Return.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Infrastructure.Repository/1.0.0": {
        "dependencies": {
          "TahaMucasirogluBlog.Application.Managers": "1.0.0",
          "TahaMucasirogluBlog.Application.Mapper": "1.0.0",
          "TahaMucasirogluBlog.Application.Validation": "1.0.0"
        },
        "runtime": {
          "TahaMucasirogluBlog.Infrastructure.Repository.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Service.Cv/1.0.0": {
        "dependencies": {
          "TahaMucasirogluBlog.Infrastructure.Repository": "1.0.0"
        },
        "runtime": {
          "TahaMucasirogluBlog.Service.Cv.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Service.Database/1.0.0": {
        "dependencies": {
          "TahaMucasirogluBlog.Infrastructure.Repository": "1.0.0"
        },
        "runtime": {
          "TahaMucasirogluBlog.Service.Database.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      }
    }
  },
  "libraries": {
    "TahaMucasirogluBlog.Presentation.API/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "AutoMapper/14.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-OC+1neAPM4oCCqQj3g2GJ2shziNNhOkxmNB9cVS8jtx4JbgmRzLcUOxB9Tsz6cVPHugdkHgCaCrTjjSI0Z5sCQ==",
      "path": "automapper/14.0.0",
      "hashPath": "automapper.14.0.0.nupkg.sha512"
    },
    "Azure.Core/1.38.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-IuEgCoVA0ef7E4pQtpC3+TkPbzaoQfa77HlfJDmfuaJUCVJmn7fT0izamZiryW5sYUFKizsftIxMkXKbgIcPMQ==",
      "path": "azure.core/1.38.0",
      "hashPath": "azure.core.1.38.0.nupkg.sha512"
    },
    "Azure.Identity/1.11.4": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-Sf4BoE6Q3jTgFkgBkx7qztYOFELBCo+wQgpYDwal/qJ1unBH73ywPztIJKXBXORRzAeNijsuxhk94h0TIMvfYg==",
      "path": "azure.identity/1.11.4",
      "hashPath": "azure.identity.1.11.4.nupkg.sha512"
    },
    "FluentValidation/12.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-8NVLxtMUXynRHJIX3Hn1ACovaqZIJASufXIIFkD0EUbcd5PmMsL1xUD5h548gCezJ5BzlITaR9CAMrGe29aWpA==",
      "path": "fluentvalidation/12.0.0",
      "hashPath": "fluentvalidation.12.0.0.nupkg.sha512"
    },
    "FluentValidation.DependencyInjectionExtensions/12.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-B28fBRL1UjhGsBC8fwV6YBZosh+SiU1FxdD7l7p5dGPgRlVI7UnM+Lgzmg+unZtV1Zxzpaw96UY2MYfMaAd8cg==",
      "path": "fluentvalidation.dependencyinjectionextensions/12.0.0",
      "hashPath": "fluentvalidation.dependencyinjectionextensions.12.0.0.nupkg.sha512"
    },
    "Humanizer.Core/2.14.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-lQKvtaTDOXnoVJ20ibTuSIOf2i0uO0MPbDhd1jm238I+U/2ZnRENj0cktKZhtchBMtCUSRQ5v4xBCUbKNmyVMw==",
      "path": "humanizer.core/2.14.1",
      "hashPath": "humanizer.core.2.14.1.nupkg.sha512"
    },
    "Microsoft.AspNetCore.Authentication.JwtBearer/8.0.11": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-9KhRuywosM24BPf1R5erwsvIkpRUu1+btVyOPlM3JgrhFVP4pq5Fuzi3vjP01OHXfbCtNhWa+HGkZeqaWdcO5w==",
      "path": "microsoft.aspnetcore.authentication.jwtbearer/8.0.11",
      "hashPath": "microsoft.aspnetcore.authentication.jwtbearer.8.0.11.nupkg.sha512"
    },
    "Microsoft.AspNetCore.JsonPatch/8.0.11": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-l1tFnQm2LtFE3M9YRM/bdwtxxCV50Y5jnN0LjliQH1sqvWsN46++Uu3QCJL9IdOweFvXSf3Shi7DI/Vc1jkdKA==",
      "path": "microsoft.aspnetcore.jsonpatch/8.0.11",
      "hashPath": "microsoft.aspnetcore.jsonpatch.8.0.11.nupkg.sha512"
    },
    "Microsoft.AspNetCore.Mvc.NewtonsoftJson/8.0.11": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-XcfFd8e0g2M0mcAKVNgoHJtWYJfKrPntHhgqiZ1Ci37i3AEJbM0GHIa715i0UPSksiKmDxsJWXnM3rg8keF/Zg==",
      "path": "microsoft.aspnetcore.mvc.newtonsoftjson/8.0.11",
      "hashPath": "microsoft.aspnetcore.mvc.newtonsoftjson.8.0.11.nupkg.sha512"
    },
    "Microsoft.Bcl.AsyncInterfaces/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-UcSjPsst+DfAdJGVDsu346FX0ci0ah+lw3WRtn18NUwEqRt70HaOQ7lI72vy3+1LxtqI3T5GWwV39rQSrCzAeg==",
      "path": "microsoft.bcl.asyncinterfaces/6.0.0",
      "hashPath": "microsoft.bcl.asyncinterfaces.6.0.0.nupkg.sha512"
    },
    "Microsoft.CodeAnalysis.Analyzers/3.3.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-j/rOZtLMVJjrfLRlAMckJLPW/1rze9MT1yfWqSIbUPGRu1m1P0fuo9PmqapwsmePfGB5PJrudQLvmUOAMF0DqQ==",
      "path": "microsoft.codeanalysis.analyzers/3.3.3",
      "hashPath": "microsoft.codeanalysis.analyzers.3.3.3.nupkg.sha512"
    },
    "Microsoft.CodeAnalysis.Common/4.5.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-lwAbIZNdnY0SUNoDmZHkVUwLO8UyNnyyh1t/4XsbFxi4Ounb3xszIYZaWhyj5ZjyfcwqwmtMbE7fUTVCqQEIdQ==",
      "path": "microsoft.codeanalysis.common/4.5.0",
      "hashPath": "microsoft.codeanalysis.common.4.5.0.nupkg.sha512"
    },
    "Microsoft.CodeAnalysis.CSharp/4.5.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-cM59oMKAOxvdv76bdmaKPy5hfj+oR+zxikWoueEB7CwTko7mt9sVKZI8Qxlov0C/LuKEG+WQwifepqL3vuTiBQ==",
      "path": "microsoft.codeanalysis.csharp/4.5.0",
      "hashPath": "microsoft.codeanalysis.csharp.4.5.0.nupkg.sha512"
    },
    "Microsoft.CodeAnalysis.CSharp.Workspaces/4.5.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-h74wTpmGOp4yS4hj+EvNzEiPgg/KVs2wmSfTZ81upJZOtPkJsVkgfsgtxxqmAeapjT/vLKfmYV0bS8n5MNVP+g==",
      "path": "microsoft.codeanalysis.csharp.workspaces/4.5.0",
      "hashPath": "microsoft.codeanalysis.csharp.workspaces.4.5.0.nupkg.sha512"
    },
    "Microsoft.CodeAnalysis.Workspaces.Common/4.5.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-l4dDRmGELXG72XZaonnOeORyD/T5RpEu5LGHOUIhnv+MmUWDY/m1kWXGwtcgQ5CJ5ynkFiRnIYzTKXYjUs7rbw==",
      "path": "microsoft.codeanalysis.workspaces.common/4.5.0",
      "hashPath": "microsoft.codeanalysis.workspaces.common.4.5.0.nupkg.sha512"
    },
    "Microsoft.CSharp/4.7.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-pTj+D3uJWyN3My70i2Hqo+OXixq3Os2D1nJ2x92FFo6sk8fYS1m1WLNTs0Dc1uPaViH0YvEEwvzddQ7y4rhXmA==",
      "path": "microsoft.csharp/4.7.0",
      "hashPath": "microsoft.csharp.4.7.0.nupkg.sha512"
    },
    "Microsoft.Data.SqlClient/5.1.6": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-+pz7gIPh5ydsBcQvivt4R98PwJXer86fyQBBToIBLxZ5kuhW4N13Ijz87s9WpuPtF1vh4JesYCgpDPAOgkMhdg==",
      "path": "microsoft.data.sqlclient/5.1.6",
      "hashPath": "microsoft.data.sqlclient.5.1.6.nupkg.sha512"
    },
    "Microsoft.Data.SqlClient.SNI.runtime/5.1.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-wNGM5ZTQCa2blc9ikXQouybGiyMd6IHPVJvAlBEPtr6JepZEOYeDxGyprYvFVeOxlCXs7avridZQ0nYkHzQWCQ==",
      "path": "microsoft.data.sqlclient.sni.runtime/5.1.1",
      "hashPath": "microsoft.data.sqlclient.sni.runtime.5.1.1.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore/8.0.11": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-stbjWBTtpQ1HtqXMFyKnXFTr76PvaOHI2b2h85JqBi3eZr00nspvR/a90Zwh8CQ4rVawqLiTG0+0yZQWaav+sQ==",
      "path": "microsoft.entityframeworkcore/8.0.11",
      "hashPath": "microsoft.entityframeworkcore.8.0.11.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.Abstractions/8.0.11": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-++zY0Ea724ku1jptWJmF7jm3I4IXTexfT4qi1ETcSFFF7qj+qm6rRgN7mTuKkwIETuXk0ikfzudryRjUGrrNKQ==",
      "path": "microsoft.entityframeworkcore.abstractions/8.0.11",
      "hashPath": "microsoft.entityframeworkcore.abstractions.8.0.11.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.Analyzers/8.0.11": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-NI/AJQjtC7qgWM8Nr85sRkwlog2AnFer5RKP8xTUH0RuPF3nN0tGXBEeYJOLZWp+/+M/C6O7MMDRhKRE8bZwIA==",
      "path": "microsoft.entityframeworkcore.analyzers/8.0.11",
      "hashPath": "microsoft.entityframeworkcore.analyzers.8.0.11.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.Design/8.0.11": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-KxOvpbaKiUmbLvenr0T/4F1Vdm0Sq+iajLbesQK7/WKB/Dx+FQHCZ0f5jCXrVWK2QKF9eHzQ5JPA1L6hcb25FQ==",
      "path": "microsoft.entityframeworkcore.design/8.0.11",
      "hashPath": "microsoft.entityframeworkcore.design.8.0.11.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.Relational/8.0.11": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-3TuuW3i5I4Ro0yoaHmi2MqEDGObOVuhLaMEnd/heaLB1fcvm4fu4PevmC4BOWnI0vo176AIlV5o4rEQciLoohw==",
      "path": "microsoft.entityframeworkcore.relational/8.0.11",
      "hashPath": "microsoft.entityframeworkcore.relational.8.0.11.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.SqlServer/8.0.11": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-rYYo8RyteIfRns+GuCcPRf3J7jS8gu8AxUWmFejrGoHTTKINhylL27N+SkFwCjxK4mscokjhQ1zjjJoNQ9oijA==",
      "path": "microsoft.entityframeworkcore.sqlserver/8.0.11",
      "hashPath": "microsoft.entityframeworkcore.sqlserver.8.0.11.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.Tools/8.0.11": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-9iUOj0npm2FxOkGIE3ktv0N0YU1oEhaMTJoDYuKS8dGNkWo1CPm7RjsoJABesKFk1lkCIfTE5SHXb45GIMjDnQ==",
      "path": "microsoft.entityframeworkcore.tools/8.0.11",
      "hashPath": "microsoft.entityframeworkcore.tools.8.0.11.nupkg.sha512"
    },
    "Microsoft.Extensions.ApiDescription.Server/6.0.5": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-Ckb5EDBUNJdFWyajfXzUIMRkhf52fHZOQuuZg/oiu8y7zDCVwD0iHhew6MnThjHmevanpxL3f5ci2TtHQEN6bw==",
      "path": "microsoft.extensions.apidescription.server/6.0.5",
      "hashPath": "microsoft.extensions.apidescription.server.6.0.5.nupkg.sha512"
    },
    "Microsoft.Extensions.Caching.Abstractions/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-3KuSxeHoNYdxVYfg2IRZCThcrlJ1XJqIXkAWikCsbm5C/bCjv7G0WoKDyuR98Q+T607QT2Zl5GsbGRkENcV2yQ==",
      "path": "microsoft.extensions.caching.abstractions/8.0.0",
      "hashPath": "microsoft.extensions.caching.abstractions.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Caching.Memory/8.0.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-HFDnhYLccngrzyGgHkjEDU5FMLn4MpOsr5ElgsBMC4yx6lJh4jeWO7fHS8+TXPq+dgxCmUa/Trl8svObmwW4QA==",
      "path": "microsoft.extensions.caching.memory/8.0.1",
      "hashPath": "microsoft.extensions.caching.memory.8.0.1.nupkg.sha512"
    },
    "Microsoft.Extensions.Configuration/9.0.7": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-oxGR51+w5cXm5B9gU6XwpAB2sTiyPSmZm7hjvv0rzRnmL5o/KZzE103AuQj7sK26OBupjVzU/bZxDWvvU4nhEg==",
      "path": "microsoft.extensions.configuration/9.0.7",
      "hashPath": "microsoft.extensions.configuration.9.0.7.nupkg.sha512"
    },
    "Microsoft.Extensions.Configuration.Abstractions/9.0.7": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-lut/kiVvNsQ120VERMUYSFhpXPpKjjql+giy03LesASPBBcC0o6+aoFdzJH9GaYpFTQ3fGVhVjKjvJDoAW5/IQ==",
      "path": "microsoft.extensions.configuration.abstractions/9.0.7",
      "hashPath": "microsoft.extensions.configuration.abstractions.9.0.7.nupkg.sha512"
    },
    "Microsoft.Extensions.Configuration.Binder/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-RiScL99DcyngY9zJA2ROrri7Br8tn5N4hP4YNvGdTN/bvg1A3dwvDOxHnNZ3Im7x2SJ5i4LkX1uPiR/MfSFBLQ==",
      "path": "microsoft.extensions.configuration.binder/9.0.0",
      "hashPath": "microsoft.extensions.configuration.binder.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.DependencyInjection/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-MCPrg7v3QgNMr0vX4vzRXvkNGgLg8vKWX0nKCWUxu2uPyMsaRgiRc1tHBnbTcfJMhMKj2slE/j2M9oGkd25DNw==",
      "path": "microsoft.extensions.dependencyinjection/9.0.0",
      "hashPath": "microsoft.extensions.dependencyinjection.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.DependencyInjection.Abstractions/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-+6f2qv2a3dLwd5w6JanPIPs47CxRbnk+ZocMJUhv9NxP88VlOcJYZs9jY+MYSjxvady08bUZn6qgiNh7DadGgg==",
      "path": "microsoft.extensions.dependencyinjection.abstractions/9.0.0",
      "hashPath": "microsoft.extensions.dependencyinjection.abstractions.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.DependencyModel/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-saxr2XzwgDU77LaQfYFXmddEDRUKHF4DaGMZkNB3qjdVSZlax3//dGJagJkKrGMIPNZs2jVFXITyCCR6UHJNdA==",
      "path": "microsoft.extensions.dependencymodel/9.0.0",
      "hashPath": "microsoft.extensions.dependencymodel.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Diagnostics.Abstractions/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-1K8P7XzuzX8W8pmXcZjcrqS6x5eSSdvhQohmcpgiQNY/HlDAlnrhR9dvlURfFz428A+RTCJpUyB+aKTA6AgVcQ==",
      "path": "microsoft.extensions.diagnostics.abstractions/9.0.0",
      "hashPath": "microsoft.extensions.diagnostics.abstractions.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.FileProviders.Abstractions/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-uK439QzYR0q2emLVtYzwyK3x+T5bTY4yWsd/k/ZUS9LR6Sflp8MIdhGXW8kQCd86dQD4tLqvcbLkku8qHY263Q==",
      "path": "microsoft.extensions.fileproviders.abstractions/9.0.0",
      "hashPath": "microsoft.extensions.fileproviders.abstractions.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Hosting.Abstractions/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-yUKJgu81ExjvqbNWqZKshBbLntZMbMVz/P7Way2SBx7bMqA08Mfdc9O7hWDKAiSp+zPUGT6LKcSCQIPeDK+CCw==",
      "path": "microsoft.extensions.hosting.abstractions/9.0.0",
      "hashPath": "microsoft.extensions.hosting.abstractions.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Logging/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-crjWyORoug0kK7RSNJBTeSE6VX8IQgLf3nUpTB9m62bPXp/tzbnOsnbe8TXEG0AASNaKZddnpHKw7fET8E++Pg==",
      "path": "microsoft.extensions.logging/9.0.0",
      "hashPath": "microsoft.extensions.logging.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Logging.Abstractions/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-g0UfujELzlLbHoVG8kPKVBaW470Ewi+jnptGS9KUi6jcb+k2StujtK3m26DFSGGwQ/+bVgZfsWqNzlP6YOejvw==",
      "path": "microsoft.extensions.logging.abstractions/9.0.0",
      "hashPath": "microsoft.extensions.logging.abstractions.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Options/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-y2146b3jrPI3Q0lokKXdKLpmXqakYbDIPDV6r3M8SqvSf45WwOTzkyfDpxnZXJsJQEpAsAqjUq5Pu8RCJMjubg==",
      "path": "microsoft.extensions.options/9.0.0",
      "hashPath": "microsoft.extensions.options.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Primitives/9.0.7": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-ti/zD9BuuO50IqlvhWQs9GHxkCmoph5BHjGiWKdg2t6Or8XoyAfRJiKag+uvd/fpASnNklfsB01WpZ4fhAe0VQ==",
      "path": "microsoft.extensions.primitives/9.0.7",
      "hashPath": "microsoft.extensions.primitives.9.0.7.nupkg.sha512"
    },
    "Microsoft.Identity.Client/4.61.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-naJo/Qm35Caaoxp5utcw+R8eU8ZtLz2ALh8S+gkekOYQ1oazfCQMWVT4NJ/FnHzdIJlm8dMz0oMpMGCabx5odA==",
      "path": "microsoft.identity.client/4.61.3",
      "hashPath": "microsoft.identity.client.4.61.3.nupkg.sha512"
    },
    "Microsoft.Identity.Client.Extensions.Msal/4.61.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-PWnJcznrSGr25MN8ajlc2XIDW4zCFu0U6FkpaNLEWLgd1NgFCp5uDY3mqLDgM8zCN8hqj8yo5wHYfLB2HjcdGw==",
      "path": "microsoft.identity.client.extensions.msal/4.61.3",
      "hashPath": "microsoft.identity.client.extensions.msal.4.61.3.nupkg.sha512"
    },
    "Microsoft.IdentityModel.Abstractions/8.12.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-JzWhET0VOCORyJbqDc1Wtdl8Q/l+I1MjFB0I/Jko+Ma691JZll8X6o9XwZtUce8FkqGuV4uY4/V1808XZOpDVg==",
      "path": "microsoft.identitymodel.abstractions/8.12.1",
      "hashPath": "microsoft.identitymodel.abstractions.8.12.1.nupkg.sha512"
    },
    "Microsoft.IdentityModel.JsonWebTokens/8.12.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-imi3xiRLzzKxN4m1aR9Z2X8GUmNsVH7GLA6AkwYStNnh3UzupFtHEEVk3GK1fCvnYdRbpnCGNYY6WQb9AfDAKg==",
      "path": "microsoft.identitymodel.jsonwebtokens/8.12.1",
      "hashPath": "microsoft.identitymodel.jsonwebtokens.8.12.1.nupkg.sha512"
    },
    "Microsoft.IdentityModel.Logging/8.12.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-39HjVkU7Voe2jRLmORRB5PoTmta1ZPKzUZCc6ldlNlLzdx+um0+fAnvfk05LUQPrNxpvb5ZoqF00SrNvyO2Fzg==",
      "path": "microsoft.identitymodel.logging/8.12.1",
      "hashPath": "microsoft.identitymodel.logging.8.12.1.nupkg.sha512"
    },
    "Microsoft.IdentityModel.Protocols/7.1.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-SydLwMRFx6EHPWJ+N6+MVaoArN1Htt92b935O3RUWPY1yUF63zEjvd3lBu79eWdZUwedP8TN2I5V9T3nackvIQ==",
      "path": "microsoft.identitymodel.protocols/7.1.2",
      "hashPath": "microsoft.identitymodel.protocols.7.1.2.nupkg.sha512"
    },
    "Microsoft.IdentityModel.Protocols.OpenIdConnect/7.1.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-6lHQoLXhnMQ42mGrfDkzbIOR3rzKM1W1tgTeMPLgLCqwwGw0d96xFi/UiX/fYsu7d6cD5MJiL3+4HuI8VU+sVQ==",
      "path": "microsoft.identitymodel.protocols.openidconnect/7.1.2",
      "hashPath": "microsoft.identitymodel.protocols.openidconnect.7.1.2.nupkg.sha512"
    },
    "Microsoft.IdentityModel.Tokens/8.12.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-DzgPEABn3eZmIk4lhov0QPcoHkIbnAfgkyDPM7uGuWDHeockR9DdqNCD9Zy30hPfExu5VhbOXn9oPRi+tFUhEQ==",
      "path": "microsoft.identitymodel.tokens/8.12.1",
      "hashPath": "microsoft.identitymodel.tokens.8.12.1.nupkg.sha512"
    },
    "Microsoft.OpenApi/1.6.14": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-tTaBT8qjk3xINfESyOPE2rIellPvB7qpVqiWiyA/lACVvz+xOGiXhFUfohcx82NLbi5avzLW0lx+s6oAqQijfw==",
      "path": "microsoft.openapi/1.6.14",
      "hashPath": "microsoft.openapi.1.6.14.nupkg.sha512"
    },
    "Microsoft.SqlServer.Server/1.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-N4KeF3cpcm1PUHym1RmakkzfkEv3GRMyofVv40uXsQhCQeglr2OHNcUk2WOG51AKpGO8ynGpo9M/kFXSzghwug==",
      "path": "microsoft.sqlserver.server/1.0.0",
      "hashPath": "microsoft.sqlserver.server.1.0.0.nupkg.sha512"
    },
    "Microsoft.Win32.SystemEvents/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-hqTM5628jSsQiv+HGpiq3WKBl2c8v1KZfby2J6Pr7pEPlK9waPdgEO6b8A/+/xn/yZ9ulv8HuqK71ONy2tg67A==",
      "path": "microsoft.win32.systemevents/6.0.0",
      "hashPath": "microsoft.win32.systemevents.6.0.0.nupkg.sha512"
    },
    "Mono.TextTemplating/2.2.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-KZYeKBET/2Z0gY1WlTAK7+RHTl7GSbtvTLDXEZZojUdAPqpQNDL6tHv7VUpqfX5VEOh+uRGKaZXkuD253nEOBQ==",
      "path": "mono.texttemplating/2.2.1",
      "hashPath": "mono.texttemplating.2.2.1.nupkg.sha512"
    },
    "Newtonsoft.Json/13.0.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-HrC5BXdl00IP9zeV+0Z848QWPAoCr9P3bDEZguI+gkLcBKAOxix/tLEAAHC+UvDNPv4a2d18lOReHMOagPa+zQ==",
      "path": "newtonsoft.json/13.0.3",
      "hashPath": "newtonsoft.json.13.0.3.nupkg.sha512"
    },
    "Newtonsoft.Json.Bson/1.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-QYFyxhaABwmq3p/21VrZNYvCg3DaEoN/wUuw5nmfAf0X3HLjgupwhkEWdgfb9nvGAUIv3osmZoD3kKl4jxEmYQ==",
      "path": "newtonsoft.json.bson/1.0.2",
      "hashPath": "newtonsoft.json.bson.1.0.2.nupkg.sha512"
    },
    "Serilog/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-+cDryFR0GRhsGOnZSKwaDzRRl4MupvJ42FhCE4zhQRVanX0Jpg6WuCBk59OVhVDPmab1bB+nRykAnykYELA9qQ==",
      "path": "serilog/4.3.0",
      "hashPath": "serilog.4.3.0.nupkg.sha512"
    },
    "Serilog.AspNetCore/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-JslDajPlBsn3Pww1554flJFTqROvK9zz9jONNQgn0D8Lx2Trw8L0A8/n6zEQK1DAZWXrJwiVLw8cnTR3YFuYsg==",
      "path": "serilog.aspnetcore/9.0.0",
      "hashPath": "serilog.aspnetcore.9.0.0.nupkg.sha512"
    },
    "Serilog.Extensions.Hosting/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-u2TRxuxbjvTAldQn7uaAwePkWxTHIqlgjelekBtilAGL5sYyF3+65NWctN4UrwwGLsDC7c3Vz3HnOlu+PcoxXg==",
      "path": "serilog.extensions.hosting/9.0.0",
      "hashPath": "serilog.extensions.hosting.9.0.0.nupkg.sha512"
    },
    "Serilog.Extensions.Logging/9.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-p8kk2McN6LxuQfLyCoOkL7+nJIhVKnV1WFUxAaGTQTQk0wySbgmCHe98j+xSQvIbYHtzKXROOE2G2R0TLwBfig==",
      "path": "serilog.extensions.logging/9.0.2",
      "hashPath": "serilog.extensions.logging.9.0.2.nupkg.sha512"
    },
    "Serilog.Formatting.Compact/3.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-wQsv14w9cqlfB5FX2MZpNsTawckN4a8dryuNGbebB/3Nh1pXnROHZov3swtu3Nj5oNG7Ba+xdu7Et/ulAUPanQ==",
      "path": "serilog.formatting.compact/3.0.0",
      "hashPath": "serilog.formatting.compact.3.0.0.nupkg.sha512"
    },
    "Serilog.Settings.Configuration/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-4/Et4Cqwa+F88l5SeFeNZ4c4Z6dEAIKbu3MaQb2Zz9F/g27T5a3wvfMcmCOaAiACjfUb4A6wrlTVfyYUZk3RRQ==",
      "path": "serilog.settings.configuration/9.0.0",
      "hashPath": "serilog.settings.configuration.9.0.0.nupkg.sha512"
    },
    "Serilog.Sinks.Async/2.1.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-SnmRknWsSMgyo9wDXeZZCqSp48kkQYy44taSM6vcpxfiRICzSf09oLKEmVr0RCwQnfd8mJQ2WNN6nvhqf0RowQ==",
      "path": "serilog.sinks.async/2.1.0",
      "hashPath": "serilog.sinks.async.2.1.0.nupkg.sha512"
    },
    "Serilog.Sinks.Console/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-fQGWqVMClCP2yEyTXPIinSr5c+CBGUvBybPxjAGcf7ctDhadFhrQw03Mv8rJ07/wR5PDfFjewf2LimvXCDzpbA==",
      "path": "serilog.sinks.console/6.0.0",
      "hashPath": "serilog.sinks.console.6.0.0.nupkg.sha512"
    },
    "Serilog.Sinks.Debug/3.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-4BzXcdrgRX7wde9PmHuYd9U6YqycCC28hhpKonK7hx0wb19eiuRj16fPcPSVp0o/Y1ipJuNLYQ00R3q2Zs8FDA==",
      "path": "serilog.sinks.debug/3.0.0",
      "hashPath": "serilog.sinks.debug.3.0.0.nupkg.sha512"
    },
    "Serilog.Sinks.File/7.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-fKL7mXv7qaiNBUC71ssvn/dU0k9t0o45+qm2XgKAlSt19xF+ijjxyA3R6HmCgfKEKwfcfkwWjayuQtRueZFkYw==",
      "path": "serilog.sinks.file/7.0.0",
      "hashPath": "serilog.sinks.file.7.0.0.nupkg.sha512"
    },
    "Serilog.Sinks.PeriodicBatching/5.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-k57sDVgYitVdA5h9XSvy8lSlEts1ZzqlApHINUNV5WIuvnt6Z18LNynUQI6JYioKdqbUhkY6+KP844w7/awcOw==",
      "path": "serilog.sinks.periodicbatching/5.0.0",
      "hashPath": "serilog.sinks.periodicbatching.5.0.0.nupkg.sha512"
    },
    "Swashbuckle.AspNetCore/6.6.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-+NB4UYVYN6AhDSjW0IJAd1AGD8V33gemFNLPaxKTtPkHB+HaKAKf9MGAEUPivEWvqeQfcKIw8lJaHq6LHljRuw==",
      "path": "swashbuckle.aspnetcore/6.6.2",
      "hashPath": "swashbuckle.aspnetcore.6.6.2.nupkg.sha512"
    },
    "Swashbuckle.AspNetCore.Swagger/6.6.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-ovgPTSYX83UrQUWiS5vzDcJ8TEX1MAxBgDFMK45rC24MorHEPQlZAHlaXj/yth4Zf6xcktpUgTEBvffRQVwDKA==",
      "path": "swashbuckle.aspnetcore.swagger/6.6.2",
      "hashPath": "swashbuckle.aspnetcore.swagger.6.6.2.nupkg.sha512"
    },
    "Swashbuckle.AspNetCore.SwaggerGen/6.6.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-zv4ikn4AT1VYuOsDCpktLq4QDq08e7Utzbir86M5/ZkRaLXbCPF11E1/vTmOiDzRTl0zTZINQU2qLKwTcHgfrA==",
      "path": "swashbuckle.aspnetcore.swaggergen/6.6.2",
      "hashPath": "swashbuckle.aspnetcore.swaggergen.6.6.2.nupkg.sha512"
    },
    "Swashbuckle.AspNetCore.SwaggerUI/6.6.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-mBBb+/8Hm2Q3Wygag+hu2jj69tZW5psuv0vMRXY07Wy+Rrj40vRP8ZTbKBhs91r45/HXT4aY4z0iSBYx1h6JvA==",
      "path": "swashbuckle.aspnetcore.swaggerui/6.6.2",
      "hashPath": "swashbuckle.aspnetcore.swaggerui.6.6.2.nupkg.sha512"
    },
    "System.ClientModel/1.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-I3CVkvxeqFYjIVEP59DnjbeoGNfo/+SZrCLpRz2v/g0gpCHaEMPtWSY0s9k/7jR1rAsLNg2z2u1JRB76tPjnIw==",
      "path": "system.clientmodel/1.0.0",
      "hashPath": "system.clientmodel.1.0.0.nupkg.sha512"
    },
    "System.CodeDom/4.4.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-2sCCb7doXEwtYAbqzbF/8UAeDRMNmPaQbU2q50Psg1J9KzumyVVCgKQY8s53WIPTufNT0DpSe9QRvVjOzfDWBA==",
      "path": "system.codedom/4.4.0",
      "hashPath": "system.codedom.4.4.0.nupkg.sha512"
    },
    "System.Collections.Immutable/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-l4zZJ1WU2hqpQQHXz1rvC3etVZN+2DLmQMO79FhOTZHMn8tDRr+WU287sbomD0BETlmKDn0ygUgVy9k5xkkJdA==",
      "path": "system.collections.immutable/6.0.0",
      "hashPath": "system.collections.immutable.6.0.0.nupkg.sha512"
    },
    "System.Composition/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-d7wMuKQtfsxUa7S13tITC8n1cQzewuhD5iDjZtK2prwFfKVzdYtgrTHgjaV03Zq7feGQ5gkP85tJJntXwInsJA==",
      "path": "system.composition/6.0.0",
      "hashPath": "system.composition.6.0.0.nupkg.sha512"
    },
    "System.Composition.AttributedModel/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-WK1nSDLByK/4VoC7fkNiFuTVEiperuCN/Hyn+VN30R+W2ijO1d0Z2Qm0ScEl9xkSn1G2MyapJi8xpf4R8WRa/w==",
      "path": "system.composition.attributedmodel/6.0.0",
      "hashPath": "system.composition.attributedmodel.6.0.0.nupkg.sha512"
    },
    "System.Composition.Convention/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-XYi4lPRdu5bM4JVJ3/UIHAiG6V6lWWUlkhB9ab4IOq0FrRsp0F4wTyV4Dj+Ds+efoXJ3qbLqlvaUozDO7OLeXA==",
      "path": "system.composition.convention/6.0.0",
      "hashPath": "system.composition.convention.6.0.0.nupkg.sha512"
    },
    "System.Composition.Hosting/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-w/wXjj7kvxuHPLdzZ0PAUt++qJl03t7lENmb2Oev0n3zbxyNULbWBlnd5J5WUMMv15kg5o+/TCZFb6lSwfaUUQ==",
      "path": "system.composition.hosting/6.0.0",
      "hashPath": "system.composition.hosting.6.0.0.nupkg.sha512"
    },
    "System.Composition.Runtime/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-qkRH/YBaMPTnzxrS5RDk1juvqed4A6HOD/CwRcDGyPpYps1J27waBddiiq1y93jk2ZZ9wuA/kynM+NO0kb3PKg==",
      "path": "system.composition.runtime/6.0.0",
      "hashPath": "system.composition.runtime.6.0.0.nupkg.sha512"
    },
    "System.Composition.TypedParts/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-iUR1eHrL8Cwd82neQCJ00MpwNIBs4NZgXzrPqx8NJf/k4+mwBO0XCRmHYJT4OLSwDDqh5nBLJWkz5cROnrGhRA==",
      "path": "system.composition.typedparts/6.0.0",
      "hashPath": "system.composition.typedparts.6.0.0.nupkg.sha512"
    },
    "System.Configuration.ConfigurationManager/6.0.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-jXw9MlUu/kRfEU0WyTptAVueupqIeE3/rl0EZDMlf8pcvJnitQ8HeVEp69rZdaStXwTV72boi/Bhw8lOeO+U2w==",
      "path": "system.configuration.configurationmanager/6.0.1",
      "hashPath": "system.configuration.configurationmanager.6.0.1.nupkg.sha512"
    },
    "System.Diagnostics.DiagnosticSource/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-ddppcFpnbohLWdYKr/ZeLZHmmI+DXFgZ3Snq+/E7SwcdW4UnvxmaugkwGywvGVWkHPGCSZjCP+MLzu23AL5SDw==",
      "path": "system.diagnostics.diagnosticsource/9.0.0",
      "hashPath": "system.diagnostics.diagnosticsource.9.0.0.nupkg.sha512"
    },
    "System.Drawing.Common/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-NfuoKUiP2nUWwKZN6twGqXioIe1zVD0RIj2t976A+czLHr2nY454RwwXs6JU9Htc6mwqL6Dn/nEL3dpVf2jOhg==",
      "path": "system.drawing.common/6.0.0",
      "hashPath": "system.drawing.common.6.0.0.nupkg.sha512"
    },
    "System.Formats.Asn1/8.0.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-XqKba7Mm/koKSjKMfW82olQdmfbI5yqeoLV/tidRp7fbh5rmHAQ5raDI/7SU0swTzv+jgqtUGkzmFxuUg0it1A==",
      "path": "system.formats.asn1/8.0.1",
      "hashPath": "system.formats.asn1.8.0.1.nupkg.sha512"
    },
    "System.IdentityModel.Tokens.Jwt/8.12.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-jlYdVOJrdeyD80ppEqKJ8BhJdrV3MjeA+seURdhC0DnD41GyUA9Ik+P7Sb571ufVVCYIx93GjeqVvY3QyQxZAA==",
      "path": "system.identitymodel.tokens.jwt/8.12.1",
      "hashPath": "system.identitymodel.tokens.jwt.8.12.1.nupkg.sha512"
    },
    "System.IO.Pipelines/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-eA3cinogwaNB4jdjQHOP3Z3EuyiDII7MT35jgtnsA4vkn0LUrrSHsU0nzHTzFzmaFYeKV7MYyMxOocFzsBHpTw==",
      "path": "system.io.pipelines/9.0.0",
      "hashPath": "system.io.pipelines.9.0.0.nupkg.sha512"
    },
    "System.Memory/4.5.4": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-1MbJTHS1lZ4bS4FmsJjnuGJOu88ZzTT2rLvrhW7Ygic+pC0NWA+3hgAen0HRdsocuQXCkUTdFn9yHJJhsijDXw==",
      "path": "system.memory/4.5.4",
      "hashPath": "system.memory.4.5.4.nupkg.sha512"
    },
    "System.Memory.Data/1.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-JGkzeqgBsiZwKJZ1IxPNsDFZDhUvuEdX8L8BDC8N3KOj+6zMcNU28CNN59TpZE/VJYy9cP+5M+sbxtWJx3/xtw==",
      "path": "system.memory.data/1.0.2",
      "hashPath": "system.memory.data.1.0.2.nupkg.sha512"
    },
    "System.Numerics.Vectors/4.5.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-QQTlPTl06J/iiDbJCiepZ4H//BVraReU4O4EoRw1U02H5TLUIT7xn3GnDp9AXPSlJUDyFs4uWjWafNX6WrAojQ==",
      "path": "system.numerics.vectors/4.5.0",
      "hashPath": "system.numerics.vectors.4.5.0.nupkg.sha512"
    },
    "System.Reflection.Metadata/6.0.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-III/lNMSn0ZRBuM9m5Cgbiho5j81u0FAEagFX5ta2DKbljZ3T0IpD8j+BIiHQPeKqJppWS9bGEp6JnKnWKze0g==",
      "path": "system.reflection.metadata/6.0.1",
      "hashPath": "system.reflection.metadata.6.0.1.nupkg.sha512"
    },
    "System.Runtime.Caching/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-E0e03kUp5X2k+UAoVl6efmI7uU7JRBWi5EIdlQ7cr0NpBGjHG4fWII35PgsBY9T4fJQ8E4QPsL0rKksU9gcL5A==",
      "path": "system.runtime.caching/6.0.0",
      "hashPath": "system.runtime.caching.6.0.0.nupkg.sha512"
    },
    "System.Runtime.CompilerServices.Unsafe/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-/iUeP3tq1S0XdNNoMz5C9twLSrM/TH+qElHkXWaPvuNOt+99G75NrV0OS2EqHx5wMN7popYjpc8oTjC1y16DLg==",
      "path": "system.runtime.compilerservices.unsafe/6.0.0",
      "hashPath": "system.runtime.compilerservices.unsafe.6.0.0.nupkg.sha512"
    },
    "System.Security.AccessControl/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-AUADIc0LIEQe7MzC+I0cl0rAT8RrTAKFHl53yHjEUzNVIaUlhFY11vc2ebiVJzVBuOzun6F7FBA+8KAbGTTedQ==",
      "path": "system.security.accesscontrol/6.0.0",
      "hashPath": "system.security.accesscontrol.6.0.0.nupkg.sha512"
    },
    "System.Security.Cryptography.Cng/5.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-jIMXsKn94T9JY7PvPq/tMfqa6GAaHpElRDpmG+SuL+D3+sTw2M8VhnibKnN8Tq+4JqbPJ/f+BwtLeDMEnzAvRg==",
      "path": "system.security.cryptography.cng/5.0.0",
      "hashPath": "system.security.cryptography.cng.5.0.0.nupkg.sha512"
    },
    "System.Security.Cryptography.ProtectedData/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-rp1gMNEZpvx9vP0JW0oHLxlf8oSiQgtno77Y4PLUBjSiDYoD77Y8uXHr1Ea5XG4/pIKhqAdxZ8v8OTUtqo9PeQ==",
      "path": "system.security.cryptography.protecteddata/6.0.0",
      "hashPath": "system.security.cryptography.protecteddata.6.0.0.nupkg.sha512"
    },
    "System.Security.Permissions/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-T/uuc7AklkDoxmcJ7LGkyX1CcSviZuLCa4jg3PekfJ7SU0niF0IVTXwUiNVP9DSpzou2PpxJ+eNY2IfDM90ZCg==",
      "path": "system.security.permissions/6.0.0",
      "hashPath": "system.security.permissions.6.0.0.nupkg.sha512"
    },
    "System.Security.Principal.Windows/5.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-t0MGLukB5WAVU9bO3MGzvlGnyJPgUlcwerXn1kzBRjwLKixT96XV0Uza41W49gVd8zEMFu9vQEFlv0IOrytICA==",
      "path": "system.security.principal.windows/5.0.0",
      "hashPath": "system.security.principal.windows.5.0.0.nupkg.sha512"
    },
    "System.Text.Encoding.CodePages/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-ZFCILZuOvtKPauZ/j/swhvw68ZRi9ATCfvGbk1QfydmcXBkIWecWKn/250UH7rahZ5OoDBaiAudJtPvLwzw85A==",
      "path": "system.text.encoding.codepages/6.0.0",
      "hashPath": "system.text.encoding.codepages.6.0.0.nupkg.sha512"
    },
    "System.Text.Encodings.Web/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-e2hMgAErLbKyUUwt18qSBf9T5Y+SFAL3ZedM8fLupkVj8Rj2PZ9oxQ37XX2LF8fTO1wNIxvKpihD7Of7D/NxZw==",
      "path": "system.text.encodings.web/9.0.0",
      "hashPath": "system.text.encodings.web.9.0.0.nupkg.sha512"
    },
    "System.Text.Json/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-js7+qAu/9mQvnhA4EfGMZNEzXtJCDxgkgj8ohuxq/Qxv+R56G+ljefhiJHOxTNiw54q8vmABCWUwkMulNdlZ4A==",
      "path": "system.text.json/9.0.0",
      "hashPath": "system.text.json.9.0.0.nupkg.sha512"
    },
    "System.Threading.Channels/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-TY8/9+tI0mNaUMgntOxxaq2ndTkdXqLSxvPmas7XEqOlv9lQtB7wLjYGd756lOaO7Dvb5r/WXhluM+0Xe87v5Q==",
      "path": "system.threading.channels/6.0.0",
      "hashPath": "system.threading.channels.6.0.0.nupkg.sha512"
    },
    "System.Threading.RateLimiting/9.0.7": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-+CdDj94yUv6/HEQVgr7uegJ5TpcN8Hr+xuumNxamctDYfoo+/8A9SbtZWB/+/iAgql8RhPsVstzPVOgAATHdDg==",
      "path": "system.threading.ratelimiting/9.0.7",
      "hashPath": "system.threading.ratelimiting.9.0.7.nupkg.sha512"
    },
    "System.Threading.Tasks.Extensions/4.5.4": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-zteT+G8xuGu6mS+mzDzYXbzS7rd3K6Fjb9RiZlYlJPam2/hU7JCBZBVEcywNuR+oZ1ncTvc/cq0faRr3P01OVg==",
      "path": "system.threading.tasks.extensions/4.5.4",
      "hashPath": "system.threading.tasks.extensions.4.5.4.nupkg.sha512"
    },
    "System.Windows.Extensions/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-IXoJOXIqc39AIe+CIR7koBtRGMiCt/LPM3lI+PELtDIy9XdyeSrwXFdWV9dzJ2Awl0paLWUaknLxFQ5HpHZUog==",
      "path": "system.windows.extensions/6.0.0",
      "hashPath": "system.windows.extensions.6.0.0.nupkg.sha512"
    },
    "TahaMucasirogluBlog.Application.Managers/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Application.Mapper/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Application.Validation/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Domain.Constant/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Domain.DTOs/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Domain.Entities/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Domain.Extensions/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Domain.Models/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Domain.Return/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Infrastructure.Repository/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Service.Cv/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Service.Database/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    }
  }
}


=== DOSYA: Publishes\MainApi\TahaMucasirogluBlog.Presentation.API.runtimeconfig.json ===

[İÇERİK]
{
  "runtimeOptions": {
    "tfm": "net8.0",
    "frameworks": [
      {
        "name": "Microsoft.NETCore.App",
        "version": "8.0.0"
      },
      {
        "name": "Microsoft.AspNetCore.App",
        "version": "8.0.0"
      }
    ],
    "configProperties": {
      "System.GC.Server": true,
      "System.Reflection.Metadata.MetadataUpdater.IsSupported": false,
      "System.Reflection.NullabilityInfoContext.IsSupported": true,
      "System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization": false
    }
  }
}


=== DOSYA: Publishes\MainApi\TahaMucasirogluBlog.Presentation.API.staticwebassets.endpoints.json ===

[İÇERİK]
{"Version":1,"ManifestType":"Publish","Endpoints":[]}


=== DOSYA: Publishes\MainApi\appsettings.Development.json ===

[İÇERİK]
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}



=== DOSYA: Publishes\MainApi\appsettings.json ===

[İÇERİK]
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",

  "CORS": {
    "CorsName": "TahaCors",
    "CorsURLs": "http://localhost:5001", //birden fazla ise   (boşluk) ile ayırın. başka boşluk olmasın
    "AnyCors": true
  },

  "JwtSettings": {
    "Issuer": "TahaMucasirogluBlog",
    "Audience": "TahaMucasirogluBlog",
    "SecurityKey": "8eea278f75257a0c4cbd003e2db4e0544f70af43885a4a5d0e84bf65837c2c906379a92379d8866aa029f63331be3fda0c5e4c65732f849d747157525526954f",
    "ClockSkew": 5, //dakika
    "RefreshRefreshToken": false, // false: eğer refresh token süresi biterse login ekranına atar. true: refresh token süresi biterse yeni refresh token atar ve devam eder.
    "AccessTokenExpiration": 30, //3, // Dakika
    "RefreshTokenExpiration": 4320 // Dakika (3 gün)
  },

  "DatabaseSettings": {
    "DatabaseLogLevel": 0, // 0 = hepsi   6 = hiçbiri
    "TrackQuery": false,
    "EnableSensitiveDataLogging": true,
    "EnableDetailedErrors": true
  },

  "PasswordSettings": {
    "Salt": "Taha Mucasiroglu Blog Salt" //veritabanı olduktan sonra burası ellenmemeli
  },



  "LogLevel": 0, // 0 = hepsi   6 = hiçbiri
  "ConnectionStrings": { //kullanılmıyor şuan kaldırılacak burası
    "SqlServerConnectionStrings": "Data Source=.\\TAHAMUCASIROGLU;User Id=taha;Password=123456;Initial Catalog=TAHAMUCASIROGLU_BLOG_DB;TrustServerCertificate=true;MultipleActiveResultSets=True"
  },




  "IpRateLimit": 10



}



=== DOSYA: Publishes\MainApi\web.config ===

[İÇERİK]
﻿<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <location path="." inheritInChildApplications="false">
    <system.webServer>
      <handlers>
        <add name="aspNetCore" path="*" verb="*" modules="AspNetCoreModuleV2" resourceType="Unspecified" />
      </handlers>
      <aspNetCore processPath="dotnet" arguments=".\TahaMucasirogluBlog.Presentation.API.dll" stdoutLogEnabled="false" stdoutLogFile=".\logs\stdout" hostingModel="inprocess" />
    </system.webServer>
  </location>
</configuration>
<!--ProjectGuid: 56116250-ECE1-4EB9-80ED-025D78F22677-->


=== DOSYA: Publishes\MainSite\TahaMucasirogluBlog.Client.TahaMucasirogluMVC.deps.json ===

[İÇERİK]
{
  "runtimeTarget": {
    "name": ".NETCoreApp,Version=v8.0",
    "signature": ""
  },
  "compilationOptions": {},
  "targets": {
    ".NETCoreApp,Version=v8.0": {
      "TahaMucasirogluBlog.Client.TahaMucasirogluMVC/1.0.0": {
        "dependencies": {
          "Microsoft.AspNetCore.Mvc.NewtonsoftJson": "8.0.11",
          "TahaMucasirogluBlog.Application.Managers": "1.0.0",
          "TahaMucasirogluBlog.Application.Mapper": "1.0.0",
          "TahaMucasirogluBlog.Application.Validation": "1.0.0"
        },
        "runtime": {
          "TahaMucasirogluBlog.Client.TahaMucasirogluMVC.dll": {}
        }
      },
      "AutoMapper/14.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Options": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/AutoMapper.dll": {
            "assemblyVersion": "14.0.0.0",
            "fileVersion": "14.0.0.0"
          }
        }
      },
      "Azure.Core/1.38.0": {
        "dependencies": {
          "Microsoft.Bcl.AsyncInterfaces": "1.1.1",
          "System.ClientModel": "1.0.0",
          "System.Diagnostics.DiagnosticSource": "9.0.0",
          "System.Memory.Data": "1.0.2",
          "System.Numerics.Vectors": "4.5.0",
          "System.Text.Encodings.Web": "9.0.0",
          "System.Text.Json": "9.0.0",
          "System.Threading.Tasks.Extensions": "4.5.4"
        },
        "runtime": {
          "lib/net6.0/Azure.Core.dll": {
            "assemblyVersion": "1.38.0.0",
            "fileVersion": "1.3800.24.12602"
          }
        }
      },
      "Azure.Identity/1.11.4": {
        "dependencies": {
          "Azure.Core": "1.38.0",
          "Microsoft.Identity.Client": "4.61.3",
          "Microsoft.Identity.Client.Extensions.Msal": "4.61.3",
          "System.Memory": "4.5.4",
          "System.Security.Cryptography.ProtectedData": "6.0.0",
          "System.Text.Json": "9.0.0",
          "System.Threading.Tasks.Extensions": "4.5.4"
        },
        "runtime": {
          "lib/netstandard2.0/Azure.Identity.dll": {
            "assemblyVersion": "1.11.4.0",
            "fileVersion": "1.1100.424.31005"
          }
        }
      },
      "FluentValidation/12.0.0": {
        "runtime": {
          "lib/net8.0/FluentValidation.dll": {
            "assemblyVersion": "12.0.0.0",
            "fileVersion": "12.0.0.0"
          }
        }
      },
      "FluentValidation.DependencyInjectionExtensions/12.0.0": {
        "dependencies": {
          "FluentValidation": "12.0.0",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/FluentValidation.DependencyInjectionExtensions.dll": {
            "assemblyVersion": "12.0.0.0",
            "fileVersion": "12.0.0.0"
          }
        }
      },
      "Microsoft.AspNetCore.JsonPatch/8.0.11": {
        "dependencies": {
          "Microsoft.CSharp": "4.7.0",
          "Newtonsoft.Json": "13.0.3"
        },
        "runtime": {
          "lib/net8.0/Microsoft.AspNetCore.JsonPatch.dll": {
            "assemblyVersion": "8.0.11.0",
            "fileVersion": "8.0.1124.52116"
          }
        }
      },
      "Microsoft.AspNetCore.Mvc.NewtonsoftJson/8.0.11": {
        "dependencies": {
          "Microsoft.AspNetCore.JsonPatch": "8.0.11",
          "Newtonsoft.Json": "13.0.3",
          "Newtonsoft.Json.Bson": "1.0.2"
        },
        "runtime": {
          "lib/net8.0/Microsoft.AspNetCore.Mvc.NewtonsoftJson.dll": {
            "assemblyVersion": "8.0.11.0",
            "fileVersion": "8.0.1124.52116"
          }
        }
      },
      "Microsoft.Bcl.AsyncInterfaces/1.1.1": {
        "runtime": {
          "lib/netstandard2.1/Microsoft.Bcl.AsyncInterfaces.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "4.700.20.21406"
          }
        }
      },
      "Microsoft.CSharp/4.7.0": {},
      "Microsoft.Data.SqlClient/5.1.6": {
        "dependencies": {
          "Azure.Identity": "1.11.4",
          "Microsoft.Data.SqlClient.SNI.runtime": "5.1.1",
          "Microsoft.Identity.Client": "4.61.3",
          "Microsoft.IdentityModel.JsonWebTokens": "6.35.0",
          "Microsoft.IdentityModel.Protocols.OpenIdConnect": "6.35.0",
          "Microsoft.SqlServer.Server": "1.0.0",
          "System.Configuration.ConfigurationManager": "6.0.1",
          "System.Diagnostics.DiagnosticSource": "9.0.0",
          "System.Runtime.Caching": "6.0.0",
          "System.Security.Cryptography.Cng": "5.0.0",
          "System.Security.Principal.Windows": "5.0.0",
          "System.Text.Encoding.CodePages": "6.0.0",
          "System.Text.Encodings.Web": "9.0.0"
        },
        "runtime": {
          "lib/net6.0/Microsoft.Data.SqlClient.dll": {
            "assemblyVersion": "5.0.0.0",
            "fileVersion": "5.16.24240.5"
          }
        },
        "runtimeTargets": {
          "runtimes/unix/lib/net6.0/Microsoft.Data.SqlClient.dll": {
            "rid": "unix",
            "assetType": "runtime",
            "assemblyVersion": "5.0.0.0",
            "fileVersion": "5.16.24240.5"
          },
          "runtimes/win/lib/net6.0/Microsoft.Data.SqlClient.dll": {
            "rid": "win",
            "assetType": "runtime",
            "assemblyVersion": "5.0.0.0",
            "fileVersion": "5.16.24240.5"
          }
        }
      },
      "Microsoft.Data.SqlClient.SNI.runtime/5.1.1": {
        "runtimeTargets": {
          "runtimes/win-arm/native/Microsoft.Data.SqlClient.SNI.dll": {
            "rid": "win-arm",
            "assetType": "native",
            "fileVersion": "5.1.1.0"
          },
          "runtimes/win-arm64/native/Microsoft.Data.SqlClient.SNI.dll": {
            "rid": "win-arm64",
            "assetType": "native",
            "fileVersion": "5.1.1.0"
          },
          "runtimes/win-x64/native/Microsoft.Data.SqlClient.SNI.dll": {
            "rid": "win-x64",
            "assetType": "native",
            "fileVersion": "5.1.1.0"
          },
          "runtimes/win-x86/native/Microsoft.Data.SqlClient.SNI.dll": {
            "rid": "win-x86",
            "assetType": "native",
            "fileVersion": "5.1.1.0"
          }
        }
      },
      "Microsoft.EntityFrameworkCore/8.0.11": {
        "dependencies": {
          "Microsoft.EntityFrameworkCore.Abstractions": "8.0.11",
          "Microsoft.EntityFrameworkCore.Analyzers": "8.0.11",
          "Microsoft.Extensions.Caching.Memory": "8.0.1",
          "Microsoft.Extensions.Logging": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.dll": {
            "assemblyVersion": "8.0.11.0",
            "fileVersion": "8.0.1124.52104"
          }
        }
      },
      "Microsoft.EntityFrameworkCore.Abstractions/8.0.11": {
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Abstractions.dll": {
            "assemblyVersion": "8.0.11.0",
            "fileVersion": "8.0.1124.52104"
          }
        }
      },
      "Microsoft.EntityFrameworkCore.Analyzers/8.0.11": {},
      "Microsoft.EntityFrameworkCore.Relational/8.0.11": {
        "dependencies": {
          "Microsoft.EntityFrameworkCore": "8.0.11",
          "Microsoft.Extensions.Configuration.Abstractions": "9.0.7"
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.Relational.dll": {
            "assemblyVersion": "8.0.11.0",
            "fileVersion": "8.0.1124.52104"
          }
        }
      },
      "Microsoft.EntityFrameworkCore.SqlServer/8.0.11": {
        "dependencies": {
          "Microsoft.Data.SqlClient": "5.1.6",
          "Microsoft.EntityFrameworkCore.Relational": "8.0.11",
          "System.Formats.Asn1": "8.0.1"
        },
        "runtime": {
          "lib/net8.0/Microsoft.EntityFrameworkCore.SqlServer.dll": {
            "assemblyVersion": "8.0.11.0",
            "fileVersion": "8.0.1124.52104"
          }
        }
      },
      "Microsoft.Extensions.Caching.Abstractions/8.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Primitives": "9.0.7"
        }
      },
      "Microsoft.Extensions.Caching.Memory/8.0.1": {
        "dependencies": {
          "Microsoft.Extensions.Caching.Abstractions": "8.0.0",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "9.0.0",
          "Microsoft.Extensions.Options": "9.0.0",
          "Microsoft.Extensions.Primitives": "9.0.7"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Caching.Memory.dll": {
            "assemblyVersion": "8.0.0.0",
            "fileVersion": "8.0.1024.46610"
          }
        }
      },
      "Microsoft.Extensions.Configuration/9.0.7": {
        "dependencies": {
          "Microsoft.Extensions.Configuration.Abstractions": "9.0.7",
          "Microsoft.Extensions.Primitives": "9.0.7"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Configuration.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.725.31616"
          }
        }
      },
      "Microsoft.Extensions.Configuration.Abstractions/9.0.7": {
        "dependencies": {
          "Microsoft.Extensions.Primitives": "9.0.7"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Configuration.Abstractions.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.725.31616"
          }
        }
      },
      "Microsoft.Extensions.Configuration.Binder/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Configuration.Abstractions": "9.0.7"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Configuration.Binder.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.DependencyInjection/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.DependencyInjection.Abstractions/9.0.0": {
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyInjection.Abstractions.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.DependencyModel/9.0.0": {
        "dependencies": {
          "System.Text.Encodings.Web": "9.0.0",
          "System.Text.Json": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.DependencyModel.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.Diagnostics.Abstractions/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0",
          "Microsoft.Extensions.Options": "9.0.0",
          "System.Diagnostics.DiagnosticSource": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Diagnostics.Abstractions.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.FileProviders.Abstractions/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Primitives": "9.0.7"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.FileProviders.Abstractions.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.Hosting.Abstractions/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Configuration.Abstractions": "9.0.7",
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0",
          "Microsoft.Extensions.Diagnostics.Abstractions": "9.0.0",
          "Microsoft.Extensions.FileProviders.Abstractions": "9.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Hosting.Abstractions.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.Logging/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection": "9.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "9.0.0",
          "Microsoft.Extensions.Options": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Logging.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.Logging.Abstractions/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0",
          "System.Diagnostics.DiagnosticSource": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Logging.Abstractions.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.Options/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0",
          "Microsoft.Extensions.Primitives": "9.0.7"
        },
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Options.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "Microsoft.Extensions.Primitives/9.0.7": {
        "runtime": {
          "lib/net8.0/Microsoft.Extensions.Primitives.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.725.31616"
          }
        }
      },
      "Microsoft.Identity.Client/4.61.3": {
        "dependencies": {
          "Microsoft.IdentityModel.Abstractions": "6.35.0",
          "System.Diagnostics.DiagnosticSource": "9.0.0"
        },
        "runtime": {
          "lib/net6.0/Microsoft.Identity.Client.dll": {
            "assemblyVersion": "4.61.3.0",
            "fileVersion": "4.61.3.0"
          }
        }
      },
      "Microsoft.Identity.Client.Extensions.Msal/4.61.3": {
        "dependencies": {
          "Microsoft.Identity.Client": "4.61.3",
          "System.Security.Cryptography.ProtectedData": "6.0.0"
        },
        "runtime": {
          "lib/net6.0/Microsoft.Identity.Client.Extensions.Msal.dll": {
            "assemblyVersion": "4.61.3.0",
            "fileVersion": "4.61.3.0"
          }
        }
      },
      "Microsoft.IdentityModel.Abstractions/6.35.0": {
        "runtime": {
          "lib/net6.0/Microsoft.IdentityModel.Abstractions.dll": {
            "assemblyVersion": "6.35.0.0",
            "fileVersion": "6.35.0.41201"
          }
        }
      },
      "Microsoft.IdentityModel.JsonWebTokens/6.35.0": {
        "dependencies": {
          "Microsoft.IdentityModel.Tokens": "6.35.0",
          "System.Text.Encoding": "4.3.0",
          "System.Text.Encodings.Web": "9.0.0",
          "System.Text.Json": "9.0.0"
        },
        "runtime": {
          "lib/net6.0/Microsoft.IdentityModel.JsonWebTokens.dll": {
            "assemblyVersion": "6.35.0.0",
            "fileVersion": "6.35.0.41201"
          }
        }
      },
      "Microsoft.IdentityModel.Logging/6.35.0": {
        "dependencies": {
          "Microsoft.IdentityModel.Abstractions": "6.35.0"
        },
        "runtime": {
          "lib/net6.0/Microsoft.IdentityModel.Logging.dll": {
            "assemblyVersion": "6.35.0.0",
            "fileVersion": "6.35.0.41201"
          }
        }
      },
      "Microsoft.IdentityModel.Protocols/6.35.0": {
        "dependencies": {
          "Microsoft.IdentityModel.Logging": "6.35.0",
          "Microsoft.IdentityModel.Tokens": "6.35.0"
        },
        "runtime": {
          "lib/net6.0/Microsoft.IdentityModel.Protocols.dll": {
            "assemblyVersion": "6.35.0.0",
            "fileVersion": "6.35.0.41201"
          }
        }
      },
      "Microsoft.IdentityModel.Protocols.OpenIdConnect/6.35.0": {
        "dependencies": {
          "Microsoft.IdentityModel.Protocols": "6.35.0",
          "System.IdentityModel.Tokens.Jwt": "6.35.0"
        },
        "runtime": {
          "lib/net6.0/Microsoft.IdentityModel.Protocols.OpenIdConnect.dll": {
            "assemblyVersion": "6.35.0.0",
            "fileVersion": "6.35.0.41201"
          }
        }
      },
      "Microsoft.IdentityModel.Tokens/6.35.0": {
        "dependencies": {
          "Microsoft.CSharp": "4.7.0",
          "Microsoft.IdentityModel.Logging": "6.35.0",
          "System.Security.Cryptography.Cng": "5.0.0"
        },
        "runtime": {
          "lib/net6.0/Microsoft.IdentityModel.Tokens.dll": {
            "assemblyVersion": "6.35.0.0",
            "fileVersion": "6.35.0.41201"
          }
        }
      },
      "Microsoft.NETCore.Platforms/1.1.0": {},
      "Microsoft.NETCore.Targets/1.1.0": {},
      "Microsoft.SqlServer.Server/1.0.0": {
        "runtime": {
          "lib/netstandard2.0/Microsoft.SqlServer.Server.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "Microsoft.Win32.SystemEvents/6.0.0": {
        "runtime": {
          "lib/net6.0/Microsoft.Win32.SystemEvents.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        },
        "runtimeTargets": {
          "runtimes/win/lib/net6.0/Microsoft.Win32.SystemEvents.dll": {
            "rid": "win",
            "assetType": "runtime",
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "Newtonsoft.Json/13.0.3": {
        "runtime": {
          "lib/net6.0/Newtonsoft.Json.dll": {
            "assemblyVersion": "13.0.0.0",
            "fileVersion": "13.0.3.27908"
          }
        }
      },
      "Newtonsoft.Json.Bson/1.0.2": {
        "dependencies": {
          "Newtonsoft.Json": "13.0.3"
        },
        "runtime": {
          "lib/netstandard2.0/Newtonsoft.Json.Bson.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.2.22727"
          }
        }
      },
      "Serilog/4.3.0": {
        "runtime": {
          "lib/net8.0/Serilog.dll": {
            "assemblyVersion": "4.3.0.0",
            "fileVersion": "4.3.0.0"
          }
        }
      },
      "Serilog.AspNetCore/9.0.0": {
        "dependencies": {
          "Serilog": "4.3.0",
          "Serilog.Extensions.Hosting": "9.0.0",
          "Serilog.Formatting.Compact": "3.0.0",
          "Serilog.Settings.Configuration": "9.0.0",
          "Serilog.Sinks.Console": "6.0.0",
          "Serilog.Sinks.Debug": "3.0.0",
          "Serilog.Sinks.File": "7.0.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.AspNetCore.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.0.0"
          }
        }
      },
      "Serilog.Extensions.Hosting/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.DependencyInjection.Abstractions": "9.0.0",
          "Microsoft.Extensions.Hosting.Abstractions": "9.0.0",
          "Microsoft.Extensions.Logging.Abstractions": "9.0.0",
          "Serilog": "4.3.0",
          "Serilog.Extensions.Logging": "9.0.2"
        },
        "runtime": {
          "lib/net8.0/Serilog.Extensions.Hosting.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.0.0"
          }
        }
      },
      "Serilog.Extensions.Logging/9.0.2": {
        "dependencies": {
          "Microsoft.Extensions.Logging": "9.0.0",
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Extensions.Logging.dll": {
            "assemblyVersion": "9.0.2.0",
            "fileVersion": "9.0.2.0"
          }
        }
      },
      "Serilog.Formatting.Compact/3.0.0": {
        "dependencies": {
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Formatting.Compact.dll": {
            "assemblyVersion": "3.0.0.0",
            "fileVersion": "3.0.0.0"
          }
        }
      },
      "Serilog.Settings.Configuration/9.0.0": {
        "dependencies": {
          "Microsoft.Extensions.Configuration.Binder": "9.0.0",
          "Microsoft.Extensions.DependencyModel": "9.0.0",
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Settings.Configuration.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.0.0"
          }
        }
      },
      "Serilog.Sinks.Async/2.1.0": {
        "dependencies": {
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Sinks.Async.dll": {
            "assemblyVersion": "2.1.0.0",
            "fileVersion": "2.1.0.0"
          }
        }
      },
      "Serilog.Sinks.Console/6.0.0": {
        "dependencies": {
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Sinks.Console.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.0.0"
          }
        }
      },
      "Serilog.Sinks.Debug/3.0.0": {
        "dependencies": {
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Sinks.Debug.dll": {
            "assemblyVersion": "3.0.0.0",
            "fileVersion": "3.0.0.0"
          }
        }
      },
      "Serilog.Sinks.File/7.0.0": {
        "dependencies": {
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Sinks.File.dll": {
            "assemblyVersion": "7.0.0.0",
            "fileVersion": "7.0.0.0"
          }
        }
      },
      "Serilog.Sinks.PeriodicBatching/5.0.0": {
        "dependencies": {
          "Serilog": "4.3.0"
        },
        "runtime": {
          "lib/net8.0/Serilog.Sinks.PeriodicBatching.dll": {
            "assemblyVersion": "5.0.0.0",
            "fileVersion": "5.0.0.0"
          }
        }
      },
      "System.ClientModel/1.0.0": {
        "dependencies": {
          "System.Memory.Data": "1.0.2",
          "System.Text.Json": "9.0.0"
        },
        "runtime": {
          "lib/net6.0/System.ClientModel.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.24.5302"
          }
        }
      },
      "System.Configuration.ConfigurationManager/6.0.1": {
        "dependencies": {
          "System.Security.Cryptography.ProtectedData": "6.0.0",
          "System.Security.Permissions": "6.0.0"
        },
        "runtime": {
          "lib/net6.0/System.Configuration.ConfigurationManager.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.922.41905"
          }
        }
      },
      "System.Diagnostics.DiagnosticSource/9.0.0": {
        "runtime": {
          "lib/net8.0/System.Diagnostics.DiagnosticSource.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "System.Drawing.Common/6.0.0": {
        "dependencies": {
          "Microsoft.Win32.SystemEvents": "6.0.0"
        },
        "runtime": {
          "lib/net6.0/System.Drawing.Common.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        },
        "runtimeTargets": {
          "runtimes/unix/lib/net6.0/System.Drawing.Common.dll": {
            "rid": "unix",
            "assetType": "runtime",
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          },
          "runtimes/win/lib/net6.0/System.Drawing.Common.dll": {
            "rid": "win",
            "assetType": "runtime",
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "System.Formats.Asn1/8.0.1": {},
      "System.IdentityModel.Tokens.Jwt/6.35.0": {
        "dependencies": {
          "Microsoft.IdentityModel.JsonWebTokens": "6.35.0",
          "Microsoft.IdentityModel.Tokens": "6.35.0"
        },
        "runtime": {
          "lib/net6.0/System.IdentityModel.Tokens.Jwt.dll": {
            "assemblyVersion": "6.35.0.0",
            "fileVersion": "6.35.0.41201"
          }
        }
      },
      "System.IO.Pipelines/9.0.0": {
        "runtime": {
          "lib/net8.0/System.IO.Pipelines.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "System.Memory/4.5.4": {},
      "System.Memory.Data/1.0.2": {
        "dependencies": {
          "System.Text.Encodings.Web": "9.0.0",
          "System.Text.Json": "9.0.0"
        },
        "runtime": {
          "lib/netstandard2.0/System.Memory.Data.dll": {
            "assemblyVersion": "1.0.2.0",
            "fileVersion": "1.0.221.20802"
          }
        }
      },
      "System.Numerics.Vectors/4.5.0": {},
      "System.Runtime/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0"
        }
      },
      "System.Runtime.Caching/6.0.0": {
        "dependencies": {
          "System.Configuration.ConfigurationManager": "6.0.1"
        },
        "runtime": {
          "lib/net6.0/System.Runtime.Caching.dll": {
            "assemblyVersion": "4.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        },
        "runtimeTargets": {
          "runtimes/win/lib/net6.0/System.Runtime.Caching.dll": {
            "rid": "win",
            "assetType": "runtime",
            "assemblyVersion": "4.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "System.Runtime.CompilerServices.Unsafe/6.0.0": {},
      "System.Security.AccessControl/6.0.0": {},
      "System.Security.Cryptography.Cng/5.0.0": {
        "dependencies": {
          "System.Formats.Asn1": "8.0.1"
        }
      },
      "System.Security.Cryptography.ProtectedData/6.0.0": {
        "runtime": {
          "lib/net6.0/System.Security.Cryptography.ProtectedData.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        },
        "runtimeTargets": {
          "runtimes/win/lib/net6.0/System.Security.Cryptography.ProtectedData.dll": {
            "rid": "win",
            "assetType": "runtime",
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "System.Security.Permissions/6.0.0": {
        "dependencies": {
          "System.Security.AccessControl": "6.0.0",
          "System.Windows.Extensions": "6.0.0"
        },
        "runtime": {
          "lib/net6.0/System.Security.Permissions.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "System.Security.Principal.Windows/5.0.0": {},
      "System.Text.Encoding/4.3.0": {
        "dependencies": {
          "Microsoft.NETCore.Platforms": "1.1.0",
          "Microsoft.NETCore.Targets": "1.1.0",
          "System.Runtime": "4.3.0"
        }
      },
      "System.Text.Encoding.CodePages/6.0.0": {
        "dependencies": {
          "System.Runtime.CompilerServices.Unsafe": "6.0.0"
        }
      },
      "System.Text.Encodings.Web/9.0.0": {
        "runtime": {
          "lib/net8.0/System.Text.Encodings.Web.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        },
        "runtimeTargets": {
          "runtimes/browser/lib/net8.0/System.Text.Encodings.Web.dll": {
            "rid": "browser",
            "assetType": "runtime",
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "System.Text.Json/9.0.0": {
        "dependencies": {
          "System.IO.Pipelines": "9.0.0",
          "System.Text.Encodings.Web": "9.0.0"
        },
        "runtime": {
          "lib/net8.0/System.Text.Json.dll": {
            "assemblyVersion": "9.0.0.0",
            "fileVersion": "9.0.24.52809"
          }
        }
      },
      "System.Threading.Tasks.Extensions/4.5.4": {},
      "System.Windows.Extensions/6.0.0": {
        "dependencies": {
          "System.Drawing.Common": "6.0.0"
        },
        "runtime": {
          "lib/net6.0/System.Windows.Extensions.dll": {
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        },
        "runtimeTargets": {
          "runtimes/win/lib/net6.0/System.Windows.Extensions.dll": {
            "rid": "win",
            "assetType": "runtime",
            "assemblyVersion": "6.0.0.0",
            "fileVersion": "6.0.21.52210"
          }
        }
      },
      "TahaMucasirogluBlog.Application.Managers/1.0.0": {
        "dependencies": {
          "Serilog": "4.3.0",
          "Serilog.AspNetCore": "9.0.0",
          "Serilog.Extensions.Logging": "9.0.2",
          "Serilog.Settings.Configuration": "9.0.0",
          "Serilog.Sinks.Async": "2.1.0",
          "Serilog.Sinks.Console": "6.0.0",
          "Serilog.Sinks.Debug": "3.0.0",
          "Serilog.Sinks.File": "7.0.0",
          "Serilog.Sinks.PeriodicBatching": "5.0.0",
          "TahaMucasirogluBlog.Domain.Constant": "1.0.0",
          "TahaMucasirogluBlog.Domain.DTOs": "1.0.0",
          "TahaMucasirogluBlog.Domain.Entities": "1.0.0",
          "TahaMucasirogluBlog.Domain.Extensions": "1.0.0",
          "TahaMucasirogluBlog.Domain.Models": "1.0.0",
          "TahaMucasirogluBlog.Domain.Return": "1.0.0"
        },
        "runtime": {
          "TahaMucasirogluBlog.Application.Managers.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Application.Mapper/1.0.0": {
        "dependencies": {
          "AutoMapper": "14.0.0",
          "TahaMucasirogluBlog.Domain.Constant": "1.0.0",
          "TahaMucasirogluBlog.Domain.DTOs": "1.0.0",
          "TahaMucasirogluBlog.Domain.Entities": "1.0.0",
          "TahaMucasirogluBlog.Domain.Extensions": "1.0.0",
          "TahaMucasirogluBlog.Domain.Models": "1.0.0",
          "TahaMucasirogluBlog.Domain.Return": "1.0.0"
        },
        "runtime": {
          "TahaMucasirogluBlog.Application.Mapper.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Application.Validation/1.0.0": {
        "dependencies": {
          "FluentValidation": "12.0.0",
          "FluentValidation.DependencyInjectionExtensions": "12.0.0",
          "TahaMucasirogluBlog.Domain.Constant": "1.0.0",
          "TahaMucasirogluBlog.Domain.DTOs": "1.0.0",
          "TahaMucasirogluBlog.Domain.Entities": "1.0.0",
          "TahaMucasirogluBlog.Domain.Extensions": "1.0.0",
          "TahaMucasirogluBlog.Domain.Models": "1.0.0",
          "TahaMucasirogluBlog.Domain.Return": "1.0.0"
        },
        "runtime": {
          "TahaMucasirogluBlog.Application.Validation.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Domain.Constant/1.0.0": {
        "runtime": {
          "TahaMucasirogluBlog.Domain.Constant.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Domain.DTOs/1.0.0": {
        "runtime": {
          "TahaMucasirogluBlog.Domain.DTOs.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Domain.Entities/1.0.0": {
        "runtime": {
          "TahaMucasirogluBlog.Domain.Entities.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Domain.Extensions/1.0.0": {
        "dependencies": {
          "Microsoft.EntityFrameworkCore": "8.0.11",
          "Microsoft.EntityFrameworkCore.Abstractions": "8.0.11",
          "Microsoft.EntityFrameworkCore.Analyzers": "8.0.11",
          "Microsoft.EntityFrameworkCore.SqlServer": "8.0.11",
          "Microsoft.Extensions.Configuration": "9.0.7",
          "Newtonsoft.Json": "13.0.3"
        },
        "runtime": {
          "TahaMucasirogluBlog.Domain.Extensions.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Domain.Models/1.0.0": {
        "runtime": {
          "TahaMucasirogluBlog.Domain.Models.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      },
      "TahaMucasirogluBlog.Domain.Return/1.0.0": {
        "runtime": {
          "TahaMucasirogluBlog.Domain.Return.dll": {
            "assemblyVersion": "1.0.0.0",
            "fileVersion": "1.0.0.0"
          }
        }
      }
    }
  },
  "libraries": {
    "TahaMucasirogluBlog.Client.TahaMucasirogluMVC/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "AutoMapper/14.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-OC+1neAPM4oCCqQj3g2GJ2shziNNhOkxmNB9cVS8jtx4JbgmRzLcUOxB9Tsz6cVPHugdkHgCaCrTjjSI0Z5sCQ==",
      "path": "automapper/14.0.0",
      "hashPath": "automapper.14.0.0.nupkg.sha512"
    },
    "Azure.Core/1.38.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-IuEgCoVA0ef7E4pQtpC3+TkPbzaoQfa77HlfJDmfuaJUCVJmn7fT0izamZiryW5sYUFKizsftIxMkXKbgIcPMQ==",
      "path": "azure.core/1.38.0",
      "hashPath": "azure.core.1.38.0.nupkg.sha512"
    },
    "Azure.Identity/1.11.4": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-Sf4BoE6Q3jTgFkgBkx7qztYOFELBCo+wQgpYDwal/qJ1unBH73ywPztIJKXBXORRzAeNijsuxhk94h0TIMvfYg==",
      "path": "azure.identity/1.11.4",
      "hashPath": "azure.identity.1.11.4.nupkg.sha512"
    },
    "FluentValidation/12.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-8NVLxtMUXynRHJIX3Hn1ACovaqZIJASufXIIFkD0EUbcd5PmMsL1xUD5h548gCezJ5BzlITaR9CAMrGe29aWpA==",
      "path": "fluentvalidation/12.0.0",
      "hashPath": "fluentvalidation.12.0.0.nupkg.sha512"
    },
    "FluentValidation.DependencyInjectionExtensions/12.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-B28fBRL1UjhGsBC8fwV6YBZosh+SiU1FxdD7l7p5dGPgRlVI7UnM+Lgzmg+unZtV1Zxzpaw96UY2MYfMaAd8cg==",
      "path": "fluentvalidation.dependencyinjectionextensions/12.0.0",
      "hashPath": "fluentvalidation.dependencyinjectionextensions.12.0.0.nupkg.sha512"
    },
    "Microsoft.AspNetCore.JsonPatch/8.0.11": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-l1tFnQm2LtFE3M9YRM/bdwtxxCV50Y5jnN0LjliQH1sqvWsN46++Uu3QCJL9IdOweFvXSf3Shi7DI/Vc1jkdKA==",
      "path": "microsoft.aspnetcore.jsonpatch/8.0.11",
      "hashPath": "microsoft.aspnetcore.jsonpatch.8.0.11.nupkg.sha512"
    },
    "Microsoft.AspNetCore.Mvc.NewtonsoftJson/8.0.11": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-XcfFd8e0g2M0mcAKVNgoHJtWYJfKrPntHhgqiZ1Ci37i3AEJbM0GHIa715i0UPSksiKmDxsJWXnM3rg8keF/Zg==",
      "path": "microsoft.aspnetcore.mvc.newtonsoftjson/8.0.11",
      "hashPath": "microsoft.aspnetcore.mvc.newtonsoftjson.8.0.11.nupkg.sha512"
    },
    "Microsoft.Bcl.AsyncInterfaces/1.1.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-yuvf07qFWFqtK3P/MRkEKLhn5r2UbSpVueRziSqj0yJQIKFwG1pq9mOayK3zE5qZCTs0CbrwL9M6R8VwqyGy2w==",
      "path": "microsoft.bcl.asyncinterfaces/1.1.1",
      "hashPath": "microsoft.bcl.asyncinterfaces.1.1.1.nupkg.sha512"
    },
    "Microsoft.CSharp/4.7.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-pTj+D3uJWyN3My70i2Hqo+OXixq3Os2D1nJ2x92FFo6sk8fYS1m1WLNTs0Dc1uPaViH0YvEEwvzddQ7y4rhXmA==",
      "path": "microsoft.csharp/4.7.0",
      "hashPath": "microsoft.csharp.4.7.0.nupkg.sha512"
    },
    "Microsoft.Data.SqlClient/5.1.6": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-+pz7gIPh5ydsBcQvivt4R98PwJXer86fyQBBToIBLxZ5kuhW4N13Ijz87s9WpuPtF1vh4JesYCgpDPAOgkMhdg==",
      "path": "microsoft.data.sqlclient/5.1.6",
      "hashPath": "microsoft.data.sqlclient.5.1.6.nupkg.sha512"
    },
    "Microsoft.Data.SqlClient.SNI.runtime/5.1.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-wNGM5ZTQCa2blc9ikXQouybGiyMd6IHPVJvAlBEPtr6JepZEOYeDxGyprYvFVeOxlCXs7avridZQ0nYkHzQWCQ==",
      "path": "microsoft.data.sqlclient.sni.runtime/5.1.1",
      "hashPath": "microsoft.data.sqlclient.sni.runtime.5.1.1.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore/8.0.11": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-stbjWBTtpQ1HtqXMFyKnXFTr76PvaOHI2b2h85JqBi3eZr00nspvR/a90Zwh8CQ4rVawqLiTG0+0yZQWaav+sQ==",
      "path": "microsoft.entityframeworkcore/8.0.11",
      "hashPath": "microsoft.entityframeworkcore.8.0.11.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.Abstractions/8.0.11": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-++zY0Ea724ku1jptWJmF7jm3I4IXTexfT4qi1ETcSFFF7qj+qm6rRgN7mTuKkwIETuXk0ikfzudryRjUGrrNKQ==",
      "path": "microsoft.entityframeworkcore.abstractions/8.0.11",
      "hashPath": "microsoft.entityframeworkcore.abstractions.8.0.11.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.Analyzers/8.0.11": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-NI/AJQjtC7qgWM8Nr85sRkwlog2AnFer5RKP8xTUH0RuPF3nN0tGXBEeYJOLZWp+/+M/C6O7MMDRhKRE8bZwIA==",
      "path": "microsoft.entityframeworkcore.analyzers/8.0.11",
      "hashPath": "microsoft.entityframeworkcore.analyzers.8.0.11.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.Relational/8.0.11": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-3TuuW3i5I4Ro0yoaHmi2MqEDGObOVuhLaMEnd/heaLB1fcvm4fu4PevmC4BOWnI0vo176AIlV5o4rEQciLoohw==",
      "path": "microsoft.entityframeworkcore.relational/8.0.11",
      "hashPath": "microsoft.entityframeworkcore.relational.8.0.11.nupkg.sha512"
    },
    "Microsoft.EntityFrameworkCore.SqlServer/8.0.11": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-rYYo8RyteIfRns+GuCcPRf3J7jS8gu8AxUWmFejrGoHTTKINhylL27N+SkFwCjxK4mscokjhQ1zjjJoNQ9oijA==",
      "path": "microsoft.entityframeworkcore.sqlserver/8.0.11",
      "hashPath": "microsoft.entityframeworkcore.sqlserver.8.0.11.nupkg.sha512"
    },
    "Microsoft.Extensions.Caching.Abstractions/8.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-3KuSxeHoNYdxVYfg2IRZCThcrlJ1XJqIXkAWikCsbm5C/bCjv7G0WoKDyuR98Q+T607QT2Zl5GsbGRkENcV2yQ==",
      "path": "microsoft.extensions.caching.abstractions/8.0.0",
      "hashPath": "microsoft.extensions.caching.abstractions.8.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Caching.Memory/8.0.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-HFDnhYLccngrzyGgHkjEDU5FMLn4MpOsr5ElgsBMC4yx6lJh4jeWO7fHS8+TXPq+dgxCmUa/Trl8svObmwW4QA==",
      "path": "microsoft.extensions.caching.memory/8.0.1",
      "hashPath": "microsoft.extensions.caching.memory.8.0.1.nupkg.sha512"
    },
    "Microsoft.Extensions.Configuration/9.0.7": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-oxGR51+w5cXm5B9gU6XwpAB2sTiyPSmZm7hjvv0rzRnmL5o/KZzE103AuQj7sK26OBupjVzU/bZxDWvvU4nhEg==",
      "path": "microsoft.extensions.configuration/9.0.7",
      "hashPath": "microsoft.extensions.configuration.9.0.7.nupkg.sha512"
    },
    "Microsoft.Extensions.Configuration.Abstractions/9.0.7": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-lut/kiVvNsQ120VERMUYSFhpXPpKjjql+giy03LesASPBBcC0o6+aoFdzJH9GaYpFTQ3fGVhVjKjvJDoAW5/IQ==",
      "path": "microsoft.extensions.configuration.abstractions/9.0.7",
      "hashPath": "microsoft.extensions.configuration.abstractions.9.0.7.nupkg.sha512"
    },
    "Microsoft.Extensions.Configuration.Binder/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-RiScL99DcyngY9zJA2ROrri7Br8tn5N4hP4YNvGdTN/bvg1A3dwvDOxHnNZ3Im7x2SJ5i4LkX1uPiR/MfSFBLQ==",
      "path": "microsoft.extensions.configuration.binder/9.0.0",
      "hashPath": "microsoft.extensions.configuration.binder.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.DependencyInjection/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-MCPrg7v3QgNMr0vX4vzRXvkNGgLg8vKWX0nKCWUxu2uPyMsaRgiRc1tHBnbTcfJMhMKj2slE/j2M9oGkd25DNw==",
      "path": "microsoft.extensions.dependencyinjection/9.0.0",
      "hashPath": "microsoft.extensions.dependencyinjection.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.DependencyInjection.Abstractions/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-+6f2qv2a3dLwd5w6JanPIPs47CxRbnk+ZocMJUhv9NxP88VlOcJYZs9jY+MYSjxvady08bUZn6qgiNh7DadGgg==",
      "path": "microsoft.extensions.dependencyinjection.abstractions/9.0.0",
      "hashPath": "microsoft.extensions.dependencyinjection.abstractions.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.DependencyModel/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-saxr2XzwgDU77LaQfYFXmddEDRUKHF4DaGMZkNB3qjdVSZlax3//dGJagJkKrGMIPNZs2jVFXITyCCR6UHJNdA==",
      "path": "microsoft.extensions.dependencymodel/9.0.0",
      "hashPath": "microsoft.extensions.dependencymodel.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Diagnostics.Abstractions/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-1K8P7XzuzX8W8pmXcZjcrqS6x5eSSdvhQohmcpgiQNY/HlDAlnrhR9dvlURfFz428A+RTCJpUyB+aKTA6AgVcQ==",
      "path": "microsoft.extensions.diagnostics.abstractions/9.0.0",
      "hashPath": "microsoft.extensions.diagnostics.abstractions.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.FileProviders.Abstractions/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-uK439QzYR0q2emLVtYzwyK3x+T5bTY4yWsd/k/ZUS9LR6Sflp8MIdhGXW8kQCd86dQD4tLqvcbLkku8qHY263Q==",
      "path": "microsoft.extensions.fileproviders.abstractions/9.0.0",
      "hashPath": "microsoft.extensions.fileproviders.abstractions.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Hosting.Abstractions/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-yUKJgu81ExjvqbNWqZKshBbLntZMbMVz/P7Way2SBx7bMqA08Mfdc9O7hWDKAiSp+zPUGT6LKcSCQIPeDK+CCw==",
      "path": "microsoft.extensions.hosting.abstractions/9.0.0",
      "hashPath": "microsoft.extensions.hosting.abstractions.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Logging/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-crjWyORoug0kK7RSNJBTeSE6VX8IQgLf3nUpTB9m62bPXp/tzbnOsnbe8TXEG0AASNaKZddnpHKw7fET8E++Pg==",
      "path": "microsoft.extensions.logging/9.0.0",
      "hashPath": "microsoft.extensions.logging.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Logging.Abstractions/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-g0UfujELzlLbHoVG8kPKVBaW470Ewi+jnptGS9KUi6jcb+k2StujtK3m26DFSGGwQ/+bVgZfsWqNzlP6YOejvw==",
      "path": "microsoft.extensions.logging.abstractions/9.0.0",
      "hashPath": "microsoft.extensions.logging.abstractions.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Options/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-y2146b3jrPI3Q0lokKXdKLpmXqakYbDIPDV6r3M8SqvSf45WwOTzkyfDpxnZXJsJQEpAsAqjUq5Pu8RCJMjubg==",
      "path": "microsoft.extensions.options/9.0.0",
      "hashPath": "microsoft.extensions.options.9.0.0.nupkg.sha512"
    },
    "Microsoft.Extensions.Primitives/9.0.7": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-ti/zD9BuuO50IqlvhWQs9GHxkCmoph5BHjGiWKdg2t6Or8XoyAfRJiKag+uvd/fpASnNklfsB01WpZ4fhAe0VQ==",
      "path": "microsoft.extensions.primitives/9.0.7",
      "hashPath": "microsoft.extensions.primitives.9.0.7.nupkg.sha512"
    },
    "Microsoft.Identity.Client/4.61.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-naJo/Qm35Caaoxp5utcw+R8eU8ZtLz2ALh8S+gkekOYQ1oazfCQMWVT4NJ/FnHzdIJlm8dMz0oMpMGCabx5odA==",
      "path": "microsoft.identity.client/4.61.3",
      "hashPath": "microsoft.identity.client.4.61.3.nupkg.sha512"
    },
    "Microsoft.Identity.Client.Extensions.Msal/4.61.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-PWnJcznrSGr25MN8ajlc2XIDW4zCFu0U6FkpaNLEWLgd1NgFCp5uDY3mqLDgM8zCN8hqj8yo5wHYfLB2HjcdGw==",
      "path": "microsoft.identity.client.extensions.msal/4.61.3",
      "hashPath": "microsoft.identity.client.extensions.msal.4.61.3.nupkg.sha512"
    },
    "Microsoft.IdentityModel.Abstractions/6.35.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-xuR8E4Rd96M41CnUSCiOJ2DBh+z+zQSmyrYHdYhD6K4fXBcQGVnRCFQ0efROUYpP+p0zC1BLKr0JRpVuujTZSg==",
      "path": "microsoft.identitymodel.abstractions/6.35.0",
      "hashPath": "microsoft.identitymodel.abstractions.6.35.0.nupkg.sha512"
    },
    "Microsoft.IdentityModel.JsonWebTokens/6.35.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-9wxai3hKgZUb4/NjdRKfQd0QJvtXKDlvmGMYACbEC8DFaicMFCFhQFZq9ZET1kJLwZahf2lfY5Gtcpsx8zYzbg==",
      "path": "microsoft.identitymodel.jsonwebtokens/6.35.0",
      "hashPath": "microsoft.identitymodel.jsonwebtokens.6.35.0.nupkg.sha512"
    },
    "Microsoft.IdentityModel.Logging/6.35.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-jePrSfGAmqT81JDCNSY+fxVWoGuJKt9e6eJ+vT7+quVS55nWl//jGjUQn4eFtVKt4rt5dXaleZdHRB9J9AJZ7Q==",
      "path": "microsoft.identitymodel.logging/6.35.0",
      "hashPath": "microsoft.identitymodel.logging.6.35.0.nupkg.sha512"
    },
    "Microsoft.IdentityModel.Protocols/6.35.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-BPQhlDzdFvv1PzaUxNSk+VEPwezlDEVADIKmyxubw7IiELK18uJ06RQ9QKKkds30XI+gDu9n8j24XQ8w7fjWcg==",
      "path": "microsoft.identitymodel.protocols/6.35.0",
      "hashPath": "microsoft.identitymodel.protocols.6.35.0.nupkg.sha512"
    },
    "Microsoft.IdentityModel.Protocols.OpenIdConnect/6.35.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-LMtVqnECCCdSmyFoCOxIE5tXQqkOLrvGrL7OxHg41DIm1bpWtaCdGyVcTAfOQpJXvzND9zUKIN/lhngPkYR8vg==",
      "path": "microsoft.identitymodel.protocols.openidconnect/6.35.0",
      "hashPath": "microsoft.identitymodel.protocols.openidconnect.6.35.0.nupkg.sha512"
    },
    "Microsoft.IdentityModel.Tokens/6.35.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-RN7lvp7s3Boucg1NaNAbqDbxtlLj5Qeb+4uSS1TeK5FSBVM40P4DKaTKChT43sHyKfh7V0zkrMph6DdHvyA4bg==",
      "path": "microsoft.identitymodel.tokens/6.35.0",
      "hashPath": "microsoft.identitymodel.tokens.6.35.0.nupkg.sha512"
    },
    "Microsoft.NETCore.Platforms/1.1.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-kz0PEW2lhqygehI/d6XsPCQzD7ff7gUJaVGPVETX611eadGsA3A877GdSlU0LRVMCTH/+P3o2iDTak+S08V2+A==",
      "path": "microsoft.netcore.platforms/1.1.0",
      "hashPath": "microsoft.netcore.platforms.1.1.0.nupkg.sha512"
    },
    "Microsoft.NETCore.Targets/1.1.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-aOZA3BWfz9RXjpzt0sRJJMjAscAUm3Hoa4UWAfceV9UTYxgwZ1lZt5nO2myFf+/jetYQo4uTP7zS8sJY67BBxg==",
      "path": "microsoft.netcore.targets/1.1.0",
      "hashPath": "microsoft.netcore.targets.1.1.0.nupkg.sha512"
    },
    "Microsoft.SqlServer.Server/1.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-N4KeF3cpcm1PUHym1RmakkzfkEv3GRMyofVv40uXsQhCQeglr2OHNcUk2WOG51AKpGO8ynGpo9M/kFXSzghwug==",
      "path": "microsoft.sqlserver.server/1.0.0",
      "hashPath": "microsoft.sqlserver.server.1.0.0.nupkg.sha512"
    },
    "Microsoft.Win32.SystemEvents/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-hqTM5628jSsQiv+HGpiq3WKBl2c8v1KZfby2J6Pr7pEPlK9waPdgEO6b8A/+/xn/yZ9ulv8HuqK71ONy2tg67A==",
      "path": "microsoft.win32.systemevents/6.0.0",
      "hashPath": "microsoft.win32.systemevents.6.0.0.nupkg.sha512"
    },
    "Newtonsoft.Json/13.0.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-HrC5BXdl00IP9zeV+0Z848QWPAoCr9P3bDEZguI+gkLcBKAOxix/tLEAAHC+UvDNPv4a2d18lOReHMOagPa+zQ==",
      "path": "newtonsoft.json/13.0.3",
      "hashPath": "newtonsoft.json.13.0.3.nupkg.sha512"
    },
    "Newtonsoft.Json.Bson/1.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-QYFyxhaABwmq3p/21VrZNYvCg3DaEoN/wUuw5nmfAf0X3HLjgupwhkEWdgfb9nvGAUIv3osmZoD3kKl4jxEmYQ==",
      "path": "newtonsoft.json.bson/1.0.2",
      "hashPath": "newtonsoft.json.bson.1.0.2.nupkg.sha512"
    },
    "Serilog/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-+cDryFR0GRhsGOnZSKwaDzRRl4MupvJ42FhCE4zhQRVanX0Jpg6WuCBk59OVhVDPmab1bB+nRykAnykYELA9qQ==",
      "path": "serilog/4.3.0",
      "hashPath": "serilog.4.3.0.nupkg.sha512"
    },
    "Serilog.AspNetCore/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-JslDajPlBsn3Pww1554flJFTqROvK9zz9jONNQgn0D8Lx2Trw8L0A8/n6zEQK1DAZWXrJwiVLw8cnTR3YFuYsg==",
      "path": "serilog.aspnetcore/9.0.0",
      "hashPath": "serilog.aspnetcore.9.0.0.nupkg.sha512"
    },
    "Serilog.Extensions.Hosting/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-u2TRxuxbjvTAldQn7uaAwePkWxTHIqlgjelekBtilAGL5sYyF3+65NWctN4UrwwGLsDC7c3Vz3HnOlu+PcoxXg==",
      "path": "serilog.extensions.hosting/9.0.0",
      "hashPath": "serilog.extensions.hosting.9.0.0.nupkg.sha512"
    },
    "Serilog.Extensions.Logging/9.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-p8kk2McN6LxuQfLyCoOkL7+nJIhVKnV1WFUxAaGTQTQk0wySbgmCHe98j+xSQvIbYHtzKXROOE2G2R0TLwBfig==",
      "path": "serilog.extensions.logging/9.0.2",
      "hashPath": "serilog.extensions.logging.9.0.2.nupkg.sha512"
    },
    "Serilog.Formatting.Compact/3.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-wQsv14w9cqlfB5FX2MZpNsTawckN4a8dryuNGbebB/3Nh1pXnROHZov3swtu3Nj5oNG7Ba+xdu7Et/ulAUPanQ==",
      "path": "serilog.formatting.compact/3.0.0",
      "hashPath": "serilog.formatting.compact.3.0.0.nupkg.sha512"
    },
    "Serilog.Settings.Configuration/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-4/Et4Cqwa+F88l5SeFeNZ4c4Z6dEAIKbu3MaQb2Zz9F/g27T5a3wvfMcmCOaAiACjfUb4A6wrlTVfyYUZk3RRQ==",
      "path": "serilog.settings.configuration/9.0.0",
      "hashPath": "serilog.settings.configuration.9.0.0.nupkg.sha512"
    },
    "Serilog.Sinks.Async/2.1.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-SnmRknWsSMgyo9wDXeZZCqSp48kkQYy44taSM6vcpxfiRICzSf09oLKEmVr0RCwQnfd8mJQ2WNN6nvhqf0RowQ==",
      "path": "serilog.sinks.async/2.1.0",
      "hashPath": "serilog.sinks.async.2.1.0.nupkg.sha512"
    },
    "Serilog.Sinks.Console/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-fQGWqVMClCP2yEyTXPIinSr5c+CBGUvBybPxjAGcf7ctDhadFhrQw03Mv8rJ07/wR5PDfFjewf2LimvXCDzpbA==",
      "path": "serilog.sinks.console/6.0.0",
      "hashPath": "serilog.sinks.console.6.0.0.nupkg.sha512"
    },
    "Serilog.Sinks.Debug/3.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-4BzXcdrgRX7wde9PmHuYd9U6YqycCC28hhpKonK7hx0wb19eiuRj16fPcPSVp0o/Y1ipJuNLYQ00R3q2Zs8FDA==",
      "path": "serilog.sinks.debug/3.0.0",
      "hashPath": "serilog.sinks.debug.3.0.0.nupkg.sha512"
    },
    "Serilog.Sinks.File/7.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-fKL7mXv7qaiNBUC71ssvn/dU0k9t0o45+qm2XgKAlSt19xF+ijjxyA3R6HmCgfKEKwfcfkwWjayuQtRueZFkYw==",
      "path": "serilog.sinks.file/7.0.0",
      "hashPath": "serilog.sinks.file.7.0.0.nupkg.sha512"
    },
    "Serilog.Sinks.PeriodicBatching/5.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-k57sDVgYitVdA5h9XSvy8lSlEts1ZzqlApHINUNV5WIuvnt6Z18LNynUQI6JYioKdqbUhkY6+KP844w7/awcOw==",
      "path": "serilog.sinks.periodicbatching/5.0.0",
      "hashPath": "serilog.sinks.periodicbatching.5.0.0.nupkg.sha512"
    },
    "System.ClientModel/1.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-I3CVkvxeqFYjIVEP59DnjbeoGNfo/+SZrCLpRz2v/g0gpCHaEMPtWSY0s9k/7jR1rAsLNg2z2u1JRB76tPjnIw==",
      "path": "system.clientmodel/1.0.0",
      "hashPath": "system.clientmodel.1.0.0.nupkg.sha512"
    },
    "System.Configuration.ConfigurationManager/6.0.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-jXw9MlUu/kRfEU0WyTptAVueupqIeE3/rl0EZDMlf8pcvJnitQ8HeVEp69rZdaStXwTV72boi/Bhw8lOeO+U2w==",
      "path": "system.configuration.configurationmanager/6.0.1",
      "hashPath": "system.configuration.configurationmanager.6.0.1.nupkg.sha512"
    },
    "System.Diagnostics.DiagnosticSource/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-ddppcFpnbohLWdYKr/ZeLZHmmI+DXFgZ3Snq+/E7SwcdW4UnvxmaugkwGywvGVWkHPGCSZjCP+MLzu23AL5SDw==",
      "path": "system.diagnostics.diagnosticsource/9.0.0",
      "hashPath": "system.diagnostics.diagnosticsource.9.0.0.nupkg.sha512"
    },
    "System.Drawing.Common/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-NfuoKUiP2nUWwKZN6twGqXioIe1zVD0RIj2t976A+czLHr2nY454RwwXs6JU9Htc6mwqL6Dn/nEL3dpVf2jOhg==",
      "path": "system.drawing.common/6.0.0",
      "hashPath": "system.drawing.common.6.0.0.nupkg.sha512"
    },
    "System.Formats.Asn1/8.0.1": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-XqKba7Mm/koKSjKMfW82olQdmfbI5yqeoLV/tidRp7fbh5rmHAQ5raDI/7SU0swTzv+jgqtUGkzmFxuUg0it1A==",
      "path": "system.formats.asn1/8.0.1",
      "hashPath": "system.formats.asn1.8.0.1.nupkg.sha512"
    },
    "System.IdentityModel.Tokens.Jwt/6.35.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-yxGIQd3BFK7F6S62/7RdZk3C/mfwyVxvh6ngd1VYMBmbJ1YZZA9+Ku6suylVtso0FjI0wbElpJ0d27CdsyLpBQ==",
      "path": "system.identitymodel.tokens.jwt/6.35.0",
      "hashPath": "system.identitymodel.tokens.jwt.6.35.0.nupkg.sha512"
    },
    "System.IO.Pipelines/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-eA3cinogwaNB4jdjQHOP3Z3EuyiDII7MT35jgtnsA4vkn0LUrrSHsU0nzHTzFzmaFYeKV7MYyMxOocFzsBHpTw==",
      "path": "system.io.pipelines/9.0.0",
      "hashPath": "system.io.pipelines.9.0.0.nupkg.sha512"
    },
    "System.Memory/4.5.4": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-1MbJTHS1lZ4bS4FmsJjnuGJOu88ZzTT2rLvrhW7Ygic+pC0NWA+3hgAen0HRdsocuQXCkUTdFn9yHJJhsijDXw==",
      "path": "system.memory/4.5.4",
      "hashPath": "system.memory.4.5.4.nupkg.sha512"
    },
    "System.Memory.Data/1.0.2": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-JGkzeqgBsiZwKJZ1IxPNsDFZDhUvuEdX8L8BDC8N3KOj+6zMcNU28CNN59TpZE/VJYy9cP+5M+sbxtWJx3/xtw==",
      "path": "system.memory.data/1.0.2",
      "hashPath": "system.memory.data.1.0.2.nupkg.sha512"
    },
    "System.Numerics.Vectors/4.5.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-QQTlPTl06J/iiDbJCiepZ4H//BVraReU4O4EoRw1U02H5TLUIT7xn3GnDp9AXPSlJUDyFs4uWjWafNX6WrAojQ==",
      "path": "system.numerics.vectors/4.5.0",
      "hashPath": "system.numerics.vectors.4.5.0.nupkg.sha512"
    },
    "System.Runtime/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-JufQi0vPQ0xGnAczR13AUFglDyVYt4Kqnz1AZaiKZ5+GICq0/1MH/mO/eAJHt/mHW1zjKBJd7kV26SrxddAhiw==",
      "path": "system.runtime/4.3.0",
      "hashPath": "system.runtime.4.3.0.nupkg.sha512"
    },
    "System.Runtime.Caching/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-E0e03kUp5X2k+UAoVl6efmI7uU7JRBWi5EIdlQ7cr0NpBGjHG4fWII35PgsBY9T4fJQ8E4QPsL0rKksU9gcL5A==",
      "path": "system.runtime.caching/6.0.0",
      "hashPath": "system.runtime.caching.6.0.0.nupkg.sha512"
    },
    "System.Runtime.CompilerServices.Unsafe/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-/iUeP3tq1S0XdNNoMz5C9twLSrM/TH+qElHkXWaPvuNOt+99G75NrV0OS2EqHx5wMN7popYjpc8oTjC1y16DLg==",
      "path": "system.runtime.compilerservices.unsafe/6.0.0",
      "hashPath": "system.runtime.compilerservices.unsafe.6.0.0.nupkg.sha512"
    },
    "System.Security.AccessControl/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-AUADIc0LIEQe7MzC+I0cl0rAT8RrTAKFHl53yHjEUzNVIaUlhFY11vc2ebiVJzVBuOzun6F7FBA+8KAbGTTedQ==",
      "path": "system.security.accesscontrol/6.0.0",
      "hashPath": "system.security.accesscontrol.6.0.0.nupkg.sha512"
    },
    "System.Security.Cryptography.Cng/5.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-jIMXsKn94T9JY7PvPq/tMfqa6GAaHpElRDpmG+SuL+D3+sTw2M8VhnibKnN8Tq+4JqbPJ/f+BwtLeDMEnzAvRg==",
      "path": "system.security.cryptography.cng/5.0.0",
      "hashPath": "system.security.cryptography.cng.5.0.0.nupkg.sha512"
    },
    "System.Security.Cryptography.ProtectedData/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-rp1gMNEZpvx9vP0JW0oHLxlf8oSiQgtno77Y4PLUBjSiDYoD77Y8uXHr1Ea5XG4/pIKhqAdxZ8v8OTUtqo9PeQ==",
      "path": "system.security.cryptography.protecteddata/6.0.0",
      "hashPath": "system.security.cryptography.protecteddata.6.0.0.nupkg.sha512"
    },
    "System.Security.Permissions/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-T/uuc7AklkDoxmcJ7LGkyX1CcSviZuLCa4jg3PekfJ7SU0niF0IVTXwUiNVP9DSpzou2PpxJ+eNY2IfDM90ZCg==",
      "path": "system.security.permissions/6.0.0",
      "hashPath": "system.security.permissions.6.0.0.nupkg.sha512"
    },
    "System.Security.Principal.Windows/5.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-t0MGLukB5WAVU9bO3MGzvlGnyJPgUlcwerXn1kzBRjwLKixT96XV0Uza41W49gVd8zEMFu9vQEFlv0IOrytICA==",
      "path": "system.security.principal.windows/5.0.0",
      "hashPath": "system.security.principal.windows.5.0.0.nupkg.sha512"
    },
    "System.Text.Encoding/4.3.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-BiIg+KWaSDOITze6jGQynxg64naAPtqGHBwDrLaCtixsa5bKiR8dpPOHA7ge3C0JJQizJE+sfkz1wV+BAKAYZw==",
      "path": "system.text.encoding/4.3.0",
      "hashPath": "system.text.encoding.4.3.0.nupkg.sha512"
    },
    "System.Text.Encoding.CodePages/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-ZFCILZuOvtKPauZ/j/swhvw68ZRi9ATCfvGbk1QfydmcXBkIWecWKn/250UH7rahZ5OoDBaiAudJtPvLwzw85A==",
      "path": "system.text.encoding.codepages/6.0.0",
      "hashPath": "system.text.encoding.codepages.6.0.0.nupkg.sha512"
    },
    "System.Text.Encodings.Web/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-e2hMgAErLbKyUUwt18qSBf9T5Y+SFAL3ZedM8fLupkVj8Rj2PZ9oxQ37XX2LF8fTO1wNIxvKpihD7Of7D/NxZw==",
      "path": "system.text.encodings.web/9.0.0",
      "hashPath": "system.text.encodings.web.9.0.0.nupkg.sha512"
    },
    "System.Text.Json/9.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-js7+qAu/9mQvnhA4EfGMZNEzXtJCDxgkgj8ohuxq/Qxv+R56G+ljefhiJHOxTNiw54q8vmABCWUwkMulNdlZ4A==",
      "path": "system.text.json/9.0.0",
      "hashPath": "system.text.json.9.0.0.nupkg.sha512"
    },
    "System.Threading.Tasks.Extensions/4.5.4": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-zteT+G8xuGu6mS+mzDzYXbzS7rd3K6Fjb9RiZlYlJPam2/hU7JCBZBVEcywNuR+oZ1ncTvc/cq0faRr3P01OVg==",
      "path": "system.threading.tasks.extensions/4.5.4",
      "hashPath": "system.threading.tasks.extensions.4.5.4.nupkg.sha512"
    },
    "System.Windows.Extensions/6.0.0": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-IXoJOXIqc39AIe+CIR7koBtRGMiCt/LPM3lI+PELtDIy9XdyeSrwXFdWV9dzJ2Awl0paLWUaknLxFQ5HpHZUog==",
      "path": "system.windows.extensions/6.0.0",
      "hashPath": "system.windows.extensions.6.0.0.nupkg.sha512"
    },
    "TahaMucasirogluBlog.Application.Managers/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Application.Mapper/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Application.Validation/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Domain.Constant/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Domain.DTOs/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Domain.Entities/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Domain.Extensions/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Domain.Models/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "TahaMucasirogluBlog.Domain.Return/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    }
  }
}


=== DOSYA: Publishes\MainSite\TahaMucasirogluBlog.Client.TahaMucasirogluMVC.runtimeconfig.json ===

[İÇERİK]
{
  "runtimeOptions": {
    "tfm": "net8.0",
    "frameworks": [
      {
        "name": "Microsoft.NETCore.App",
        "version": "8.0.0"
      },
      {
        "name": "Microsoft.AspNetCore.App",
        "version": "8.0.0"
      }
    ],
    "configProperties": {
      "System.GC.Server": true,
      "System.Reflection.Metadata.MetadataUpdater.IsSupported": false,
      "System.Reflection.NullabilityInfoContext.IsSupported": true,
      "System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization": false
    }
  }
}


=== DOSYA: Publishes\MainSite\TahaMucasirogluBlog.Client.TahaMucasirogluMVC.staticwebassets.endpoints.json ===

[İÇERİK]
{"Version":1,"ManifestType":"Publish","Endpoints":[{"Route":"Pages/MaintenancePageAsset/main.3vr8wgql8t.js","AssetFile":"Pages/MaintenancePageAsset/main.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"3079"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"8YDsaXmQCin053wrMVaU9voIGhWY5niSTeayCbvduGY=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 20:44:38 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"3vr8wgql8t"},{"Name":"integrity","Value":"sha256-8YDsaXmQCin053wrMVaU9voIGhWY5niSTeayCbvduGY="},{"Name":"label","Value":"Pages/MaintenancePageAsset/main.js"}]},{"Route":"Pages/MaintenancePageAsset/main.bhuu9vrjvo.css","AssetFile":"Pages/MaintenancePageAsset/main.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"9080"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"z+rK+qeh2ip+hlGDLfvJG06pEdc4TaNkLjL5Gq3WaWI=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 20:44:38 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"bhuu9vrjvo"},{"Name":"integrity","Value":"sha256-z+rK+qeh2ip+hlGDLfvJG06pEdc4TaNkLjL5Gq3WaWI="},{"Name":"label","Value":"Pages/MaintenancePageAsset/main.css"}]},{"Route":"Pages/MaintenancePageAsset/main.css","AssetFile":"Pages/MaintenancePageAsset/main.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"9080"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"z+rK+qeh2ip+hlGDLfvJG06pEdc4TaNkLjL5Gq3WaWI=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 20:44:38 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-z+rK+qeh2ip+hlGDLfvJG06pEdc4TaNkLjL5Gq3WaWI="}]},{"Route":"Pages/MaintenancePageAsset/main.js","AssetFile":"Pages/MaintenancePageAsset/main.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"3079"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"8YDsaXmQCin053wrMVaU9voIGhWY5niSTeayCbvduGY=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 20:44:38 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-8YDsaXmQCin053wrMVaU9voIGhWY5niSTeayCbvduGY="}]},{"Route":"TahaMucasirogluBlog.Client.TahaMucasirogluMVC.1rc3pmjvfy.styles.css","AssetFile":"TahaMucasirogluBlog.Client.TahaMucasirogluMVC.styles.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"1163"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"s9uTUu5D7cXaIFaB4FL4CIlZbcVWpC9JQicbYTqD+hg=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 21:01:15 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"1rc3pmjvfy"},{"Name":"integrity","Value":"sha256-s9uTUu5D7cXaIFaB4FL4CIlZbcVWpC9JQicbYTqD+hg="},{"Name":"label","Value":"TahaMucasirogluBlog.Client.TahaMucasirogluMVC.styles.css"}]},{"Route":"TahaMucasirogluBlog.Client.TahaMucasirogluMVC.styles.css","AssetFile":"TahaMucasirogluBlog.Client.TahaMucasirogluMVC.styles.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"1163"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"s9uTUu5D7cXaIFaB4FL4CIlZbcVWpC9JQicbYTqD+hg=\""},{"Name":"Last-Modified","Value":"Sat, 12 Jul 2025 21:01:15 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-s9uTUu5D7cXaIFaB4FL4CIlZbcVWpC9JQicbYTqD+hg="}]},{"Route":"css/site.c2tiyv64ts.css","AssetFile":"css/site.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"362"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"pAGv4ietcJNk/EwsQZ5BN9+K4MuNYS2a9wl4Jw+q9D0=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"c2tiyv64ts"},{"Name":"integrity","Value":"sha256-pAGv4ietcJNk/EwsQZ5BN9+K4MuNYS2a9wl4Jw+q9D0="},{"Name":"label","Value":"css/site.css"}]},{"Route":"css/site.css","AssetFile":"css/site.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"362"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"pAGv4ietcJNk/EwsQZ5BN9+K4MuNYS2a9wl4Jw+q9D0=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-pAGv4ietcJNk/EwsQZ5BN9+K4MuNYS2a9wl4Jw+q9D0="}]},{"Route":"favicon.61n19gt1b8.ico","AssetFile":"favicon.ico","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"5430"},{"Name":"Content-Type","Value":"image/x-icon"},{"Name":"ETag","Value":"\"Jtxf9L+5ITKRc1gIRl4VbUpGkRNfOBXjYTdhJD4facM=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"61n19gt1b8"},{"Name":"integrity","Value":"sha256-Jtxf9L+5ITKRc1gIRl4VbUpGkRNfOBXjYTdhJD4facM="},{"Name":"label","Value":"favicon.ico"}]},{"Route":"favicon.ico","AssetFile":"favicon.ico","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"5430"},{"Name":"Content-Type","Value":"image/x-icon"},{"Name":"ETag","Value":"\"Jtxf9L+5ITKRc1gIRl4VbUpGkRNfOBXjYTdhJD4facM=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-Jtxf9L+5ITKRc1gIRl4VbUpGkRNfOBXjYTdhJD4facM="}]},{"Route":"js/site.js","AssetFile":"js/site.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"231"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"hRQyftXiu1lLX2P9Ly9xa4gHJgLeR1uGN5qegUobtGo=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-hRQyftXiu1lLX2P9Ly9xa4gHJgLeR1uGN5qegUobtGo="}]},{"Route":"js/site.xtxxf3hu2r.js","AssetFile":"js/site.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"231"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"hRQyftXiu1lLX2P9Ly9xa4gHJgLeR1uGN5qegUobtGo=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"xtxxf3hu2r"},{"Name":"integrity","Value":"sha256-hRQyftXiu1lLX2P9Ly9xa4gHJgLeR1uGN5qegUobtGo="},{"Name":"label","Value":"js/site.js"}]},{"Route":"lib/bootstrap/LICENSE","AssetFile":"lib/bootstrap/LICENSE","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"1153"},{"Name":"Content-Type","Value":"application/octet-stream"},{"Name":"ETag","Value":"\"ZH6pA6BSx6fuHZvdaKph1DwUJ+VSYilIiEQu8ilnvqk=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-ZH6pA6BSx6fuHZvdaKph1DwUJ+VSYilIiEQu8ilnvqk="}]},{"Route":"lib/bootstrap/LICENSE.81b7ukuj9c","AssetFile":"lib/bootstrap/LICENSE","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"1153"},{"Name":"Content-Type","Value":"application/octet-stream"},{"Name":"ETag","Value":"\"ZH6pA6BSx6fuHZvdaKph1DwUJ+VSYilIiEQu8ilnvqk=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"81b7ukuj9c"},{"Name":"integrity","Value":"sha256-ZH6pA6BSx6fuHZvdaKph1DwUJ+VSYilIiEQu8ilnvqk="},{"Name":"label","Value":"lib/bootstrap/LICENSE"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"75534"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"P4Ski6RrsG4nxKfPqaVoyRMoesl9UzArmfT+4fLqKHY=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-P4Ski6RrsG4nxKfPqaVoyRMoesl9UzArmfT+4fLqKHY="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"196535"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"QO8cMbVkLiktUX1cHeXSUSe5nXMXUgyL9cjwnMyxPqc=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-QO8cMbVkLiktUX1cHeXSUSe5nXMXUgyL9cjwnMyxPqc="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.css.st1cbwfwo5.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"196535"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"QO8cMbVkLiktUX1cHeXSUSe5nXMXUgyL9cjwnMyxPqc=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"st1cbwfwo5"},{"Name":"integrity","Value":"sha256-QO8cMbVkLiktUX1cHeXSUSe5nXMXUgyL9cjwnMyxPqc="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-grid.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.min.5p029spbuu.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"51325"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"96ayIUEnpKr7n5BIsFK5vJ3qXMXFgvRl9/CBcHs6/Ts=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"5p029spbuu"},{"Name":"integrity","Value":"sha256-96ayIUEnpKr7n5BIsFK5vJ3qXMXFgvRl9/CBcHs6/Ts="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-grid.min.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.min.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"51325"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"96ayIUEnpKr7n5BIsFK5vJ3qXMXFgvRl9/CBcHs6/Ts=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-96ayIUEnpKr7n5BIsFK5vJ3qXMXFgvRl9/CBcHs6/Ts="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.min.css.5vj65cig9w.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"117439"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"72C/qDCGu+OwWeVA03bf9Ke0T8oIozCub0lfJkhzhvE=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"5vj65cig9w"},{"Name":"integrity","Value":"sha256-72C/qDCGu+OwWeVA03bf9Ke0T8oIozCub0lfJkhzhvE="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-grid.min.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.min.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"117439"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"72C/qDCGu+OwWeVA03bf9Ke0T8oIozCub0lfJkhzhvE=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-72C/qDCGu+OwWeVA03bf9Ke0T8oIozCub0lfJkhzhvE="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.nakmwdwsxp.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"75534"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"P4Ski6RrsG4nxKfPqaVoyRMoesl9UzArmfT+4fLqKHY=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"nakmwdwsxp"},{"Name":"integrity","Value":"sha256-P4Ski6RrsG4nxKfPqaVoyRMoesl9UzArmfT+4fLqKHY="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-grid.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.rtl.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"75607"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"+ugQREUkP4Wnp1VX2L2lvw0Q2mgKYvYAZr1c2or+ysM=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-+ugQREUkP4Wnp1VX2L2lvw0Q2mgKYvYAZr1c2or+ysM="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.rtl.css.2q4vfeazbq.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"196539"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"qvA39OMlEs53jaewqVFmE8DQQrio47bZtlTs+Wu6U8g=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"2q4vfeazbq"},{"Name":"integrity","Value":"sha256-qvA39OMlEs53jaewqVFmE8DQQrio47bZtlTs+Wu6U8g="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-grid.rtl.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.rtl.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"196539"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"qvA39OMlEs53jaewqVFmE8DQQrio47bZtlTs+Wu6U8g=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-qvA39OMlEs53jaewqVFmE8DQQrio47bZtlTs+Wu6U8g="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.rtl.e6q6xbwqzk.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"75607"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"+ugQREUkP4Wnp1VX2L2lvw0Q2mgKYvYAZr1c2or+ysM=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"e6q6xbwqzk"},{"Name":"integrity","Value":"sha256-+ugQREUkP4Wnp1VX2L2lvw0Q2mgKYvYAZr1c2or+ysM="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-grid.rtl.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"51400"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"9eX2dpELXvYs+6il2MHwf5OOPVOZjxVK1b1GWgL0B0k=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-9eX2dpELXvYs+6il2MHwf5OOPVOZjxVK1b1GWgL0B0k="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"117516"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"NDSZjIiMPRIoO7/w7+jHef8retP4riQa8PMj4BVRGok=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-NDSZjIiMPRIoO7/w7+jHef8retP4riQa8PMj4BVRGok="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.css.o371a8zbv2.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"117516"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"NDSZjIiMPRIoO7/w7+jHef8retP4riQa8PMj4BVRGok=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"o371a8zbv2"},{"Name":"integrity","Value":"sha256-NDSZjIiMPRIoO7/w7+jHef8retP4riQa8PMj4BVRGok="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.dy6jgresuo.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"51400"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"9eX2dpELXvYs+6il2MHwf5OOPVOZjxVK1b1GWgL0B0k=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"dy6jgresuo"},{"Name":"integrity","Value":"sha256-9eX2dpELXvYs+6il2MHwf5OOPVOZjxVK1b1GWgL0B0k="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-grid.rtl.min.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"6276"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"Jtl65EICD4ds6dQZbx1ongvMXj8D127HCg5XRBXXYGw=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-Jtl65EICD4ds6dQZbx1ongvMXj8D127HCg5XRBXXYGw="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.css.jeal3x0ldm.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"105138"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"FZG0KxbNqITUi4QY7QvPFRS/TccntMfFWfSTdHN/pws=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"jeal3x0ldm"},{"Name":"integrity","Value":"sha256-FZG0KxbNqITUi4QY7QvPFRS/TccntMfFWfSTdHN/pws="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-reboot.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"105138"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"FZG0KxbNqITUi4QY7QvPFRS/TccntMfFWfSTdHN/pws=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-FZG0KxbNqITUi4QY7QvPFRS/TccntMfFWfSTdHN/pws="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.min.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"4653"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"359CMPAICGkV+zve4A4HJMha3bwqTFTjl+QC1KJK5DQ=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-359CMPAICGkV+zve4A4HJMha3bwqTFTjl+QC1KJK5DQ="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.min.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"35330"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"2BbRsE/+czX1ufmDPGpnEieC9u6I3m5BKNDSX1ob3lg=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-2BbRsE/+czX1ufmDPGpnEieC9u6I3m5BKNDSX1ob3lg="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.min.css.okkk44j0xs.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"35330"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"2BbRsE/+czX1ufmDPGpnEieC9u6I3m5BKNDSX1ob3lg=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"okkk44j0xs"},{"Name":"integrity","Value":"sha256-2BbRsE/+czX1ufmDPGpnEieC9u6I3m5BKNDSX1ob3lg="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-reboot.min.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.min.z7kmom2977.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"4653"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"359CMPAICGkV+zve4A4HJMha3bwqTFTjl+QC1KJK5DQ=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"z7kmom2977"},{"Name":"integrity","Value":"sha256-359CMPAICGkV+zve4A4HJMha3bwqTFTjl+QC1KJK5DQ="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-reboot.min.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.mk8rdyw69w.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"6276"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"Jtl65EICD4ds6dQZbx1ongvMXj8D127HCg5XRBXXYGw=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"mk8rdyw69w"},{"Name":"integrity","Value":"sha256-Jtl65EICD4ds6dQZbx1ongvMXj8D127HCg5XRBXXYGw="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-reboot.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.97yrjpyf9r.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"6250"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"G0PQCDL7ETO6rITRlBIHDKvvSuJFn5p6h+WmbPX5xr4=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"97yrjpyf9r"},{"Name":"integrity","Value":"sha256-G0PQCDL7ETO6rITRlBIHDKvvSuJFn5p6h+WmbPX5xr4="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"6250"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"G0PQCDL7ETO6rITRlBIHDKvvSuJFn5p6h+WmbPX5xr4=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-G0PQCDL7ETO6rITRlBIHDKvvSuJFn5p6h+WmbPX5xr4="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.css.cwzlr5n8x4.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"105151"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"/EdWHN6t5XYPplC88vixGfrBvfEii19kAssb+0YBVU8=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"cwzlr5n8x4"},{"Name":"integrity","Value":"sha256-/EdWHN6t5XYPplC88vixGfrBvfEii19kAssb+0YBVU8="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"105151"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"/EdWHN6t5XYPplC88vixGfrBvfEii19kAssb+0YBVU8=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-/EdWHN6t5XYPplC88vixGfrBvfEii19kAssb+0YBVU8="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"4725"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"BnHmEJpgor1n0UuwNdXG2VhHdV1r9MibuqBVHsgp9a8=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-BnHmEJpgor1n0UuwNdXG2VhHdV1r9MibuqBVHsgp9a8="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"41570"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"GMDk5pA5dFkOimkBAWeEjYZ+7lgHPS0jYln6p/WJVYs=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-GMDk5pA5dFkOimkBAWeEjYZ+7lgHPS0jYln6p/WJVYs="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.css.wmug9u23qg.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"41570"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"GMDk5pA5dFkOimkBAWeEjYZ+7lgHPS0jYln6p/WJVYs=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"wmug9u23qg"},{"Name":"integrity","Value":"sha256-GMDk5pA5dFkOimkBAWeEjYZ+7lgHPS0jYln6p/WJVYs="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.y53cy5s2zj.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"4725"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"BnHmEJpgor1n0UuwNdXG2VhHdV1r9MibuqBVHsgp9a8=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"y53cy5s2zj"},{"Name":"integrity","Value":"sha256-BnHmEJpgor1n0UuwNdXG2VhHdV1r9MibuqBVHsgp9a8="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-reboot.rtl.min.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"76449"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"mcVOHRq7FsWaycSfboGsTpzuQZ3cIOR/GDHYxL6q2Yg=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-mcVOHRq7FsWaycSfboGsTpzuQZ3cIOR/GDHYxL6q2Yg="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.css.j75batdsum.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"192271"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"4WIqPof/vrXYO/jeJ4fDOQKUYWIwe64V3d+9/qNju20=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"j75batdsum"},{"Name":"integrity","Value":"sha256-4WIqPof/vrXYO/jeJ4fDOQKUYWIwe64V3d+9/qNju20="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-utilities.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"192271"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"4WIqPof/vrXYO/jeJ4fDOQKUYWIwe64V3d+9/qNju20=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-4WIqPof/vrXYO/jeJ4fDOQKUYWIwe64V3d+9/qNju20="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.min.2yn17lgxub.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"53485"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"ekoF4YNq4OUU4BoZ6FG2LTKD68LJvW49arNgykHOZfM=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"2yn17lgxub"},{"Name":"integrity","Value":"sha256-ekoF4YNq4OUU4BoZ6FG2LTKD68LJvW49arNgykHOZfM="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-utilities.min.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.min.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"53485"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"ekoF4YNq4OUU4BoZ6FG2LTKD68LJvW49arNgykHOZfM=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-ekoF4YNq4OUU4BoZ6FG2LTKD68LJvW49arNgykHOZfM="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.min.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"111875"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"p1dop4slefZhL4zG2pa6+2HUrOY1UUArGJXmet8Md9c=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-p1dop4slefZhL4zG2pa6+2HUrOY1UUArGJXmet8Md9c="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.min.css.vy0bq9ydhf.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"111875"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"p1dop4slefZhL4zG2pa6+2HUrOY1UUArGJXmet8Md9c=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"vy0bq9ydhf"},{"Name":"integrity","Value":"sha256-p1dop4slefZhL4zG2pa6+2HUrOY1UUArGJXmet8Md9c="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-utilities.min.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"76307"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"1N1aPW6sTYexHfJCcDS4iElpPdWahP2Fr+Um56w0PjI=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-1N1aPW6sTYexHfJCcDS4iElpPdWahP2Fr+Um56w0PjI="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.css.ab1c3rmv7g.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"192214"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"puDgKwvlFAord9R8G8of9P2CVYIJUFSoIbjDLEsKEH0=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"ab1c3rmv7g"},{"Name":"integrity","Value":"sha256-puDgKwvlFAord9R8G8of9P2CVYIJUFSoIbjDLEsKEH0="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"192214"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"puDgKwvlFAord9R8G8of9P2CVYIJUFSoIbjDLEsKEH0=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-puDgKwvlFAord9R8G8of9P2CVYIJUFSoIbjDLEsKEH0="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"53413"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"wseUsl7uipUzPYc/DBMMTMFA7hBTcxpw29RKOxLzXSc=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-wseUsl7uipUzPYc/DBMMTMFA7hBTcxpw29RKOxLzXSc="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.css.56d2bn4wt9.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"111710"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"02ka4ymoE5yEecLUncLG3/SouTQMnTJOktX+96Pt/88=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"56d2bn4wt9"},{"Name":"integrity","Value":"sha256-02ka4ymoE5yEecLUncLG3/SouTQMnTJOktX+96Pt/88="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"111710"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"02ka4ymoE5yEecLUncLG3/SouTQMnTJOktX+96Pt/88=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-02ka4ymoE5yEecLUncLG3/SouTQMnTJOktX+96Pt/88="}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.ik6i2hrs65.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"53413"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"wseUsl7uipUzPYc/DBMMTMFA7hBTcxpw29RKOxLzXSc=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"ik6i2hrs65"},{"Name":"integrity","Value":"sha256-wseUsl7uipUzPYc/DBMMTMFA7hBTcxpw29RKOxLzXSc="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.min.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.ophe14yye5.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"76307"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"1N1aPW6sTYexHfJCcDS4iElpPdWahP2Fr+Um56w0PjI=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"ophe14yye5"},{"Name":"integrity","Value":"sha256-1N1aPW6sTYexHfJCcDS4iElpPdWahP2Fr+Um56w0PjI="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-utilities.rtl.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap-utilities.z9shlbduue.css","AssetFile":"lib/bootstrap/dist/css/bootstrap-utilities.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"76449"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"mcVOHRq7FsWaycSfboGsTpzuQZ3cIOR/GDHYxL6q2Yg=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"z9shlbduue"},{"Name":"integrity","Value":"sha256-mcVOHRq7FsWaycSfboGsTpzuQZ3cIOR/GDHYxL6q2Yg="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap-utilities.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap.css","AssetFile":"lib/bootstrap/dist/css/bootstrap.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"215356"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"ZMvmWDSU4zY1Z29EQGm5Mubfz/YxF4hiReGqx84o4tA=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-ZMvmWDSU4zY1Z29EQGm5Mubfz/YxF4hiReGqx84o4tA="}]},{"Route":"lib/bootstrap/dist/css/bootstrap.css.73kdqttayv.map","AssetFile":"lib/bootstrap/dist/css/bootstrap.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"536547"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"DRvWr0gangj5/5Q3DRn6ttzpcWDzl3OpHoAwAzNDR5Q=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"73kdqttayv"},{"Name":"integrity","Value":"sha256-DRvWr0gangj5/5Q3DRn6ttzpcWDzl3OpHoAwAzNDR5Q="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"536547"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"DRvWr0gangj5/5Q3DRn6ttzpcWDzl3OpHoAwAzNDR5Q=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-DRvWr0gangj5/5Q3DRn6ttzpcWDzl3OpHoAwAzNDR5Q="}]},{"Route":"lib/bootstrap/dist/css/bootstrap.min.6gzpyzhau4.css","AssetFile":"lib/bootstrap/dist/css/bootstrap.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"162726"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"SiIVMGgRhdXjKSTIddX7mh9IbOXVcwQWc7/p4nS6D/0=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"6gzpyzhau4"},{"Name":"integrity","Value":"sha256-SiIVMGgRhdXjKSTIddX7mh9IbOXVcwQWc7/p4nS6D/0="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap.min.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap.min.css","AssetFile":"lib/bootstrap/dist/css/bootstrap.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"162726"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"SiIVMGgRhdXjKSTIddX7mh9IbOXVcwQWc7/p4nS6D/0=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-SiIVMGgRhdXjKSTIddX7mh9IbOXVcwQWc7/p4nS6D/0="}]},{"Route":"lib/bootstrap/dist/css/bootstrap.min.css.8inm30yfxf.map","AssetFile":"lib/bootstrap/dist/css/bootstrap.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"449111"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"gBwg2tmA0Ci2u54gMF1jNCVku6vznarkLS6D76htNNQ=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"8inm30yfxf"},{"Name":"integrity","Value":"sha256-gBwg2tmA0Ci2u54gMF1jNCVku6vznarkLS6D76htNNQ="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap.min.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap.min.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"449111"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"gBwg2tmA0Ci2u54gMF1jNCVku6vznarkLS6D76htNNQ=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-gBwg2tmA0Ci2u54gMF1jNCVku6vznarkLS6D76htNNQ="}]},{"Route":"lib/bootstrap/dist/css/bootstrap.ozu22stjof.css","AssetFile":"lib/bootstrap/dist/css/bootstrap.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"215356"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"ZMvmWDSU4zY1Z29EQGm5Mubfz/YxF4hiReGqx84o4tA=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"ozu22stjof"},{"Name":"integrity","Value":"sha256-ZMvmWDSU4zY1Z29EQGm5Mubfz/YxF4hiReGqx84o4tA="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap.rtl.css","AssetFile":"lib/bootstrap/dist/css/bootstrap.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"214999"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"hA1uBYAPgKq7OVoXF7sqU9NtylyP0K7AJn0a4zQcTbg=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-hA1uBYAPgKq7OVoXF7sqU9NtylyP0K7AJn0a4zQcTbg="}]},{"Route":"lib/bootstrap/dist/css/bootstrap.rtl.css.4gxs3k148c.map","AssetFile":"lib/bootstrap/dist/css/bootstrap.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"536461"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"VFvmi/ZSwQFmjS6Pry9B8zXeZ/GA168TXLyykDhNMZE=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"4gxs3k148c"},{"Name":"integrity","Value":"sha256-VFvmi/ZSwQFmjS6Pry9B8zXeZ/GA168TXLyykDhNMZE="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap.rtl.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap.rtl.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap.rtl.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"536461"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"VFvmi/ZSwQFmjS6Pry9B8zXeZ/GA168TXLyykDhNMZE=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-VFvmi/ZSwQFmjS6Pry9B8zXeZ/GA168TXLyykDhNMZE="}]},{"Route":"lib/bootstrap/dist/css/bootstrap.rtl.gjcw7pocpk.css","AssetFile":"lib/bootstrap/dist/css/bootstrap.rtl.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"214999"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"hA1uBYAPgKq7OVoXF7sqU9NtylyP0K7AJn0a4zQcTbg=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"gjcw7pocpk"},{"Name":"integrity","Value":"sha256-hA1uBYAPgKq7OVoXF7sqU9NtylyP0K7AJn0a4zQcTbg="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap.rtl.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap.rtl.min.6l4ir0ityv.css","AssetFile":"lib/bootstrap/dist/css/bootstrap.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"162831"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"ukKL5IDSyNoXFyp0wkgXeBpBITyM7JsCE6Dp96H1vI8=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"6l4ir0ityv"},{"Name":"integrity","Value":"sha256-ukKL5IDSyNoXFyp0wkgXeBpBITyM7JsCE6Dp96H1vI8="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap.rtl.min.css"}]},{"Route":"lib/bootstrap/dist/css/bootstrap.rtl.min.css","AssetFile":"lib/bootstrap/dist/css/bootstrap.rtl.min.css","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"162831"},{"Name":"Content-Type","Value":"text/css"},{"Name":"ETag","Value":"\"ukKL5IDSyNoXFyp0wkgXeBpBITyM7JsCE6Dp96H1vI8=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-ukKL5IDSyNoXFyp0wkgXeBpBITyM7JsCE6Dp96H1vI8="}]},{"Route":"lib/bootstrap/dist/css/bootstrap.rtl.min.css.fctod5rc9n.map","AssetFile":"lib/bootstrap/dist/css/bootstrap.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"661035"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"j7uqK5VoTT4rUHMr911QEU5Sa94lR3uh9E28XBMlzrM=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"fctod5rc9n"},{"Name":"integrity","Value":"sha256-j7uqK5VoTT4rUHMr911QEU5Sa94lR3uh9E28XBMlzrM="},{"Name":"label","Value":"lib/bootstrap/dist/css/bootstrap.rtl.min.css.map"}]},{"Route":"lib/bootstrap/dist/css/bootstrap.rtl.min.css.map","AssetFile":"lib/bootstrap/dist/css/bootstrap.rtl.min.css.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"661035"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"j7uqK5VoTT4rUHMr911QEU5Sa94lR3uh9E28XBMlzrM=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-j7uqK5VoTT4rUHMr911QEU5Sa94lR3uh9E28XBMlzrM="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.1piudyfv7h.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"153194"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"JV8zLOxqX3ENLwiQX8lCiDY3TvQzbeibDAsdYtalZ4w=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"1piudyfv7h"},{"Name":"integrity","Value":"sha256-JV8zLOxqX3ENLwiQX8lCiDY3TvQzbeibDAsdYtalZ4w="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.js"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.bundle.f6zq8v6eb3.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.bundle.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"215272"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"l/hyCcHXdGwW6cO0xfobuAMZk3Nh8dsRdWwdaeSn9qo=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"f6zq8v6eb3"},{"Name":"integrity","Value":"sha256-l/hyCcHXdGwW6cO0xfobuAMZk3Nh8dsRdWwdaeSn9qo="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.bundle.js"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.bundle.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.bundle.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"215272"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"l/hyCcHXdGwW6cO0xfobuAMZk3Nh8dsRdWwdaeSn9qo=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-l/hyCcHXdGwW6cO0xfobuAMZk3Nh8dsRdWwdaeSn9qo="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.bundle.js.kbynt5jhd9.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.bundle.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"425643"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"gO4uhxfGuK0ONjRlHuwfghGfEXT5azm1oHWnTEFGTfk=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"kbynt5jhd9"},{"Name":"integrity","Value":"sha256-gO4uhxfGuK0ONjRlHuwfghGfEXT5azm1oHWnTEFGTfk="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.bundle.js.map"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.bundle.js.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.bundle.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"425643"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"gO4uhxfGuK0ONjRlHuwfghGfEXT5azm1oHWnTEFGTfk=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-gO4uhxfGuK0ONjRlHuwfghGfEXT5azm1oHWnTEFGTfk="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.bundle.min.89qbw8ngem.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.bundle.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"78474"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"rAnWnVnzChxAAi8NS+Ilr1mE7Sj+do+X/DqyilNsznM=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"89qbw8ngem"},{"Name":"integrity","Value":"sha256-rAnWnVnzChxAAi8NS+Ilr1mE7Sj+do+X/DqyilNsznM="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.bundle.min.js"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.bundle.min.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.bundle.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"78474"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"rAnWnVnzChxAAi8NS+Ilr1mE7Sj+do+X/DqyilNsznM=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-rAnWnVnzChxAAi8NS+Ilr1mE7Sj+do+X/DqyilNsznM="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.bundle.min.js.c2nslu3uf3.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.bundle.min.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"327261"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"xIBBxDPvWhk8/JdaFEZoejadfaKFUfZFwRS1D4Jkuro=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"c2nslu3uf3"},{"Name":"integrity","Value":"sha256-xIBBxDPvWhk8/JdaFEZoejadfaKFUfZFwRS1D4Jkuro="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.bundle.min.js.map"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.bundle.min.js.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.bundle.min.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"327261"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"xIBBxDPvWhk8/JdaFEZoejadfaKFUfZFwRS1D4Jkuro=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-xIBBxDPvWhk8/JdaFEZoejadfaKFUfZFwRS1D4Jkuro="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.esm.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.esm.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"143996"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"SySIctW5IQsq8JoYGrNJU4ZilHaieJru5P0+8vTcfDA=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-SySIctW5IQsq8JoYGrNJU4ZilHaieJru5P0+8vTcfDA="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.esm.js.2lgwfvgpvi.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.esm.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"288320"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"CllC/sbLvyLE9cQljmFRlITfqdZRnBv2ysX5LJtl/dg=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"2lgwfvgpvi"},{"Name":"integrity","Value":"sha256-CllC/sbLvyLE9cQljmFRlITfqdZRnBv2ysX5LJtl/dg="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.esm.js.map"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.esm.js.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.esm.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"288320"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"CllC/sbLvyLE9cQljmFRlITfqdZRnBv2ysX5LJtl/dg=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-CllC/sbLvyLE9cQljmFRlITfqdZRnBv2ysX5LJtl/dg="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.esm.min.jqwzsa9uv6.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.esm.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"72022"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"hVv0IJy8sIv1uIlVQOHnZFNAGprmLfDV+x0anYPmxYU=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"jqwzsa9uv6"},{"Name":"integrity","Value":"sha256-hVv0IJy8sIv1uIlVQOHnZFNAGprmLfDV+x0anYPmxYU="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.esm.min.js"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.esm.min.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.esm.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"72022"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"hVv0IJy8sIv1uIlVQOHnZFNAGprmLfDV+x0anYPmxYU=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-hVv0IJy8sIv1uIlVQOHnZFNAGprmLfDV+x0anYPmxYU="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.esm.min.js.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.esm.min.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"222508"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"sPqzWcSS9aRa2gpWTVNQzemajn8hrFjgXPj3j9QItQo=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-sPqzWcSS9aRa2gpWTVNQzemajn8hrFjgXPj3j9QItQo="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.esm.min.js.wsezl0heh6.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.esm.min.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"222508"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"sPqzWcSS9aRa2gpWTVNQzemajn8hrFjgXPj3j9QItQo=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"wsezl0heh6"},{"Name":"integrity","Value":"sha256-sPqzWcSS9aRa2gpWTVNQzemajn8hrFjgXPj3j9QItQo="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.esm.min.js.map"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.esm.n5w6o92d9r.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.esm.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"143996"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"SySIctW5IQsq8JoYGrNJU4ZilHaieJru5P0+8vTcfDA=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"n5w6o92d9r"},{"Name":"integrity","Value":"sha256-SySIctW5IQsq8JoYGrNJU4ZilHaieJru5P0+8vTcfDA="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.esm.js"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"153194"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"JV8zLOxqX3ENLwiQX8lCiDY3TvQzbeibDAsdYtalZ4w=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-JV8zLOxqX3ENLwiQX8lCiDY3TvQzbeibDAsdYtalZ4w="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.js.6ukhryfubh.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"289522"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"Qkl5mZUZ64aYBaORRMP9jfD1kz8J6FwiV2M86JDJkdQ=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"6ukhryfubh"},{"Name":"integrity","Value":"sha256-Qkl5mZUZ64aYBaORRMP9jfD1kz8J6FwiV2M86JDJkdQ="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.js.map"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.js.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"289522"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"Qkl5mZUZ64aYBaORRMP9jfD1kz8J6FwiV2M86JDJkdQ=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-Qkl5mZUZ64aYBaORRMP9jfD1kz8J6FwiV2M86JDJkdQ="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.min.4908xmbfjr.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"59517"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"uAMYHAQlaHq1buKLwrk7FF4qxvcLWntS2/DpdKucfmU=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"4908xmbfjr"},{"Name":"integrity","Value":"sha256-uAMYHAQlaHq1buKLwrk7FF4qxvcLWntS2/DpdKucfmU="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.min.js"}]},{"Route":"lib/bootstrap/dist/js/bootstrap.min.js","AssetFile":"lib/bootstrap/dist/js/bootstrap.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"59517"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"uAMYHAQlaHq1buKLwrk7FF4qxvcLWntS2/DpdKucfmU=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-uAMYHAQlaHq1buKLwrk7FF4qxvcLWntS2/DpdKucfmU="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.min.js.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.min.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"217145"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"ui/FQI+y0IUsY8Pbi80b8s3GeEL+PsvdaLTONobpn88=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-ui/FQI+y0IUsY8Pbi80b8s3GeEL+PsvdaLTONobpn88="}]},{"Route":"lib/bootstrap/dist/js/bootstrap.min.js.u33ctipx7g.map","AssetFile":"lib/bootstrap/dist/js/bootstrap.min.js.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"217145"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"ui/FQI+y0IUsY8Pbi80b8s3GeEL+PsvdaLTONobpn88=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"u33ctipx7g"},{"Name":"integrity","Value":"sha256-ui/FQI+y0IUsY8Pbi80b8s3GeEL+PsvdaLTONobpn88="},{"Name":"label","Value":"lib/bootstrap/dist/js/bootstrap.min.js.map"}]},{"Route":"lib/jquery-validation-unobtrusive/LICENSE.356vix0kms.txt","AssetFile":"lib/jquery-validation-unobtrusive/LICENSE.txt","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"1139"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"16aFlqtpsG9RyieKZUUUjkJpqTgcJtWXwT312I4Iz1s=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"356vix0kms"},{"Name":"integrity","Value":"sha256-16aFlqtpsG9RyieKZUUUjkJpqTgcJtWXwT312I4Iz1s="},{"Name":"label","Value":"lib/jquery-validation-unobtrusive/LICENSE.txt"}]},{"Route":"lib/jquery-validation-unobtrusive/LICENSE.txt","AssetFile":"lib/jquery-validation-unobtrusive/LICENSE.txt","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"1139"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"16aFlqtpsG9RyieKZUUUjkJpqTgcJtWXwT312I4Iz1s=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-16aFlqtpsG9RyieKZUUUjkJpqTgcJtWXwT312I4Iz1s="}]},{"Route":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.03hjc8e09r.js","AssetFile":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"19820"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"xJbBMLGhYbXlPrrrddrSVmduyF6KEtbxEsYxw7hYZV4=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"03hjc8e09r"},{"Name":"integrity","Value":"sha256-xJbBMLGhYbXlPrrrddrSVmduyF6KEtbxEsYxw7hYZV4="},{"Name":"label","Value":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js"}]},{"Route":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js","AssetFile":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"19820"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"xJbBMLGhYbXlPrrrddrSVmduyF6KEtbxEsYxw7hYZV4=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-xJbBMLGhYbXlPrrrddrSVmduyF6KEtbxEsYxw7hYZV4="}]},{"Route":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.48y08845bh.js","AssetFile":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"5831"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"RFWFWIIPsjB4DucR4jqwxTWw13ZmtI+s6tVR2LJmZXk=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"48y08845bh"},{"Name":"integrity","Value":"sha256-RFWFWIIPsjB4DucR4jqwxTWw13ZmtI+s6tVR2LJmZXk="},{"Name":"label","Value":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"}]},{"Route":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js","AssetFile":"lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"5831"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"RFWFWIIPsjB4DucR4jqwxTWw13ZmtI+s6tVR2LJmZXk=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-RFWFWIIPsjB4DucR4jqwxTWw13ZmtI+s6tVR2LJmZXk="}]},{"Route":"lib/jquery-validation/LICENSE.md","AssetFile":"lib/jquery-validation/LICENSE.md","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"1117"},{"Name":"Content-Type","Value":"text/markdown"},{"Name":"ETag","Value":"\"geHEkw/WGPdaHQMRq5HuNY9snliNzU/y2OW8ycnhGXw=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-geHEkw/WGPdaHQMRq5HuNY9snliNzU/y2OW8ycnhGXw="}]},{"Route":"lib/jquery-validation/LICENSE.x0q3zqp4vz.md","AssetFile":"lib/jquery-validation/LICENSE.md","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"1117"},{"Name":"Content-Type","Value":"text/markdown"},{"Name":"ETag","Value":"\"geHEkw/WGPdaHQMRq5HuNY9snliNzU/y2OW8ycnhGXw=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"x0q3zqp4vz"},{"Name":"integrity","Value":"sha256-geHEkw/WGPdaHQMRq5HuNY9snliNzU/y2OW8ycnhGXw="},{"Name":"label","Value":"lib/jquery-validation/LICENSE.md"}]},{"Route":"lib/jquery-validation/dist/additional-methods.ay5nd8zt9x.js","AssetFile":"lib/jquery-validation/dist/additional-methods.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"52977"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"4jrcLBsi0Ugm8iLKdqDsAyaCDjkscYZdoGuNH/zqs4E=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"ay5nd8zt9x"},{"Name":"integrity","Value":"sha256-4jrcLBsi0Ugm8iLKdqDsAyaCDjkscYZdoGuNH/zqs4E="},{"Name":"label","Value":"lib/jquery-validation/dist/additional-methods.js"}]},{"Route":"lib/jquery-validation/dist/additional-methods.js","AssetFile":"lib/jquery-validation/dist/additional-methods.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"52977"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"4jrcLBsi0Ugm8iLKdqDsAyaCDjkscYZdoGuNH/zqs4E=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-4jrcLBsi0Ugm8iLKdqDsAyaCDjkscYZdoGuNH/zqs4E="}]},{"Route":"lib/jquery-validation/dist/additional-methods.min.9oaff4kq20.js","AssetFile":"lib/jquery-validation/dist/additional-methods.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"22177"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"N11IyJpHTgDcSCb3AfX4VrBnpGQeem1NoNzzgcXVyCc=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"9oaff4kq20"},{"Name":"integrity","Value":"sha256-N11IyJpHTgDcSCb3AfX4VrBnpGQeem1NoNzzgcXVyCc="},{"Name":"label","Value":"lib/jquery-validation/dist/additional-methods.min.js"}]},{"Route":"lib/jquery-validation/dist/additional-methods.min.js","AssetFile":"lib/jquery-validation/dist/additional-methods.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"22177"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"N11IyJpHTgDcSCb3AfX4VrBnpGQeem1NoNzzgcXVyCc=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-N11IyJpHTgDcSCb3AfX4VrBnpGQeem1NoNzzgcXVyCc="}]},{"Route":"lib/jquery-validation/dist/jquery.validate.6d0lkjaslc.js","AssetFile":"lib/jquery-validation/dist/jquery.validate.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"52831"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"5qqb5VxQ2t2a6Zx/neW5uppLLvaGn4nn0NdYp6g8Lyg=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"6d0lkjaslc"},{"Name":"integrity","Value":"sha256-5qqb5VxQ2t2a6Zx/neW5uppLLvaGn4nn0NdYp6g8Lyg="},{"Name":"label","Value":"lib/jquery-validation/dist/jquery.validate.js"}]},{"Route":"lib/jquery-validation/dist/jquery.validate.js","AssetFile":"lib/jquery-validation/dist/jquery.validate.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"52831"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"5qqb5VxQ2t2a6Zx/neW5uppLLvaGn4nn0NdYp6g8Lyg=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-5qqb5VxQ2t2a6Zx/neW5uppLLvaGn4nn0NdYp6g8Lyg="}]},{"Route":"lib/jquery-validation/dist/jquery.validate.min.js","AssetFile":"lib/jquery-validation/dist/jquery.validate.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"24604"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"6e0N+WJiVKBeTitK1GKSwPi3rbdPpLtuqaiitZjeD2w=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-6e0N+WJiVKBeTitK1GKSwPi3rbdPpLtuqaiitZjeD2w="}]},{"Route":"lib/jquery-validation/dist/jquery.validate.min.l1zq2mitth.js","AssetFile":"lib/jquery-validation/dist/jquery.validate.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"24604"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"6e0N+WJiVKBeTitK1GKSwPi3rbdPpLtuqaiitZjeD2w=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"l1zq2mitth"},{"Name":"integrity","Value":"sha256-6e0N+WJiVKBeTitK1GKSwPi3rbdPpLtuqaiitZjeD2w="},{"Name":"label","Value":"lib/jquery-validation/dist/jquery.validate.min.js"}]},{"Route":"lib/jquery/LICENSE.mlv21k5csn.txt","AssetFile":"lib/jquery/LICENSE.txt","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"1117"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"hjIBkvmgxQXbNXK3B9YQ3t06RwLuQSQzC/dpvuB/lMk=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"mlv21k5csn"},{"Name":"integrity","Value":"sha256-hjIBkvmgxQXbNXK3B9YQ3t06RwLuQSQzC/dpvuB/lMk="},{"Name":"label","Value":"lib/jquery/LICENSE.txt"}]},{"Route":"lib/jquery/LICENSE.txt","AssetFile":"lib/jquery/LICENSE.txt","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"1117"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"hjIBkvmgxQXbNXK3B9YQ3t06RwLuQSQzC/dpvuB/lMk=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-hjIBkvmgxQXbNXK3B9YQ3t06RwLuQSQzC/dpvuB/lMk="}]},{"Route":"lib/jquery/dist/jquery.7s2n0ol71w.js","AssetFile":"lib/jquery/dist/jquery.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"299461"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"KSI/3xxCrCexCupdzQJRP1B6Iqg+2NA+X2u38cQdqq8=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"7s2n0ol71w"},{"Name":"integrity","Value":"sha256-KSI/3xxCrCexCupdzQJRP1B6Iqg+2NA+X2u38cQdqq8="},{"Name":"label","Value":"lib/jquery/dist/jquery.js"}]},{"Route":"lib/jquery/dist/jquery.js","AssetFile":"lib/jquery/dist/jquery.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"299461"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"KSI/3xxCrCexCupdzQJRP1B6Iqg+2NA+X2u38cQdqq8=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-KSI/3xxCrCexCupdzQJRP1B6Iqg+2NA+X2u38cQdqq8="}]},{"Route":"lib/jquery/dist/jquery.min.5pze98is44.map","AssetFile":"lib/jquery/dist/jquery.min.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"137972"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"OZVI+w57FGwS9boYCZpH1ZSpcP7pYhLu4KtIUvPlZ4I=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"5pze98is44"},{"Name":"integrity","Value":"sha256-OZVI+w57FGwS9boYCZpH1ZSpcP7pYhLu4KtIUvPlZ4I="},{"Name":"label","Value":"lib/jquery/dist/jquery.min.map"}]},{"Route":"lib/jquery/dist/jquery.min.ehgnz7f14e.js","AssetFile":"lib/jquery/dist/jquery.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"max-age=31536000, immutable"},{"Name":"Content-Length","Value":"89503"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"zp0HUArZHsK1JMJwdk7EyaM+eDINjTdOxADt5Ij2JRs=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"fingerprint","Value":"ehgnz7f14e"},{"Name":"integrity","Value":"sha256-zp0HUArZHsK1JMJwdk7EyaM+eDINjTdOxADt5Ij2JRs="},{"Name":"label","Value":"lib/jquery/dist/jquery.min.js"}]},{"Route":"lib/jquery/dist/jquery.min.js","AssetFile":"lib/jquery/dist/jquery.min.js","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"89503"},{"Name":"Content-Type","Value":"text/javascript"},{"Name":"ETag","Value":"\"zp0HUArZHsK1JMJwdk7EyaM+eDINjTdOxADt5Ij2JRs=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-zp0HUArZHsK1JMJwdk7EyaM+eDINjTdOxADt5Ij2JRs="}]},{"Route":"lib/jquery/dist/jquery.min.map","AssetFile":"lib/jquery/dist/jquery.min.map","Selectors":[],"ResponseHeaders":[{"Name":"Accept-Ranges","Value":"bytes"},{"Name":"Cache-Control","Value":"no-cache"},{"Name":"Content-Length","Value":"137972"},{"Name":"Content-Type","Value":"text/plain"},{"Name":"ETag","Value":"\"OZVI+w57FGwS9boYCZpH1ZSpcP7pYhLu4KtIUvPlZ4I=\""},{"Name":"Last-Modified","Value":"Fri, 11 Jul 2025 20:12:11 GMT"}],"EndpointProperties":[{"Name":"integrity","Value":"sha256-OZVI+w57FGwS9boYCZpH1ZSpcP7pYhLu4KtIUvPlZ4I="}]}]}


=== DOSYA: Publishes\MainSite\appsettings.Development.json ===

[İÇERİK]
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}



=== DOSYA: Publishes\MainSite\appsettings.json ===

[İÇERİK]
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",


  "ApiSettings": {
    "ApiUrl": "http://localhost:5000/api/"
  },

  "LoggerSettings": {
    "LogStatus": true,
    "LogLevel": 0
  },

  "Maintenance": {
    "Enabled": true,
    "EndDateTime": "2025-08-01T15:30:00" // bakım bitiş zamanı (yerel saatinize göre)
  }
}



=== DOSYA: Publishes\MainSite\web.config ===

[İÇERİK]
﻿<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <location path="." inheritInChildApplications="false">
    <system.webServer>
      <handlers>
        <add name="aspNetCore" path="*" verb="*" modules="AspNetCoreModuleV2" resourceType="Unspecified" />
      </handlers>
      <aspNetCore processPath="dotnet" arguments=".\TahaMucasirogluBlog.Client.TahaMucasirogluMVC.dll" stdoutLogEnabled="false" stdoutLogFile=".\logs\stdout" hostingModel="inprocess" />
    </system.webServer>
  </location>
</configuration>
<!--ProjectGuid: D4BBFDEA-5682-4A3B-8BFF-386D5DDA0B5B-->


=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Managers\LoggerManager\ILoggerManager.cs ===

[İÇERİK]
﻿using Microsoft.Extensions.Logging;

namespace TahaMucasirogluBlog.Application.Managers.LoggerManager
{
    public interface ILoggerManager<T>
    {
        public ILogger<T> logger { get; init; }
        public void LogInfo(string message);
        public void LogWarn(string message);
        public void LogDebug(string message);
        public void LogError(string message, Exception? ex = null);
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Managers\LoggerManager\LoggerManager.cs ===

[İÇERİK]
﻿using Microsoft.Extensions.Logging;
using TahaMucasirogluBlog.Domain.Return.Abstract;

namespace TahaMucasirogluBlog.Application.Managers.LoggerManager
{
    public abstract class LoggerManager<T> : ILoggerManager<T>
    {
        public ILogger<T> logger { get; init; }

        public LoggerManager(ILogger<T> logger)
        {
            this.logger = logger;
        }

        public void LogInfo(string message) => logger.LogInformation(message);

        public void LogWarn(string message) => logger.LogWarning(message);

        public void LogDebug(string message) => logger.LogDebug(message);

        public void LogError(string message, Exception? ex = null)
        {
            if (ex != null)
                logger.LogError(ex, message);
            else
                logger.LogError(message);
        }

        public void LogReturn(IReturn @return)
        {
            //if (@return.Status) { LogInfo(@return.GetLog()); }
            //else { LogError(@return.GetLog(), @return.Exception); }
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Managers\PasswordManager\IPasswordManager.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TahaMucasirogluBlog.Application.Managers.PasswordManager
{
    public interface IPasswordManager
    {
        public string GenerateSalt();
        public string HashPassword();
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Managers\PasswordManager\PasswordManager.cs ===

[İÇERİK]
﻿using System.Security.Cryptography;
using TahaMucasirogluBlog.Domain.Constant;
using TahaMucasirogluBlog.Domain.Extensions;

namespace TahaMucasirogluBlog.Application.Managers.PasswordManager
{
    public class PasswordManager : IPasswordManager
    {
        internal readonly string Password;
        internal readonly string? Salt;
        internal readonly PasswordHashType HashType;
        internal readonly int SaltLength;

        public PasswordManager(
        string Password,
        string? Salt = null,
        PasswordHashType HashType = PasswordHashType.SHA512_HEX,
        bool GenerateRandomSalt = false,
        int SaltLength = 16)
        {
            this.Password = Password;
            this.Salt = GenerateRandomSalt ? GenerateSalt() : Salt;
            this.HashType = HashType;
            this.SaltLength = SaltLength;
        }

        public string GenerateSalt()
        {
            var saltBytes = new byte[SaltLength];
            using (var rng = RandomNumberGenerator.Create())
            {
                rng.GetBytes(saltBytes);
            }
            return Convert.ToBase64String(saltBytes);
        }

        public string HashPassword()
        {
            string combined = string.IsNullOrWhiteSpace(Salt) ? Password : Password + Salt;
            return HashType switch
            {
                PasswordHashType.MD5_BASE64 => combined.ToMd5Base64(),
                PasswordHashType.MD5_HEX => combined.ToMd5Hex(),
                PasswordHashType.SHA1_BASE64 => combined.ToSha1Base64(),
                PasswordHashType.SHA1_HEX => combined.ToSha1Hex(),
                PasswordHashType.SHA256_BASE64 => combined.ToSha256Base64(),
                PasswordHashType.SHA256_HEX => combined.ToSha256Hex(),
                PasswordHashType.SHA384_BASE64 => combined.ToSha384Base64(),
                PasswordHashType.SHA384_HEX => combined.ToSha384Hex(),
                PasswordHashType.SHA512_BASE64 => combined.ToSha512Base64(),
                PasswordHashType.SHA512_HEX => combined.ToSha512Hex(),
                _ => throw new NotSupportedException("Unsupported hash type")
            };
        }

    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Managers\TahaMucasirogluBlog.Application.Managers.csproj ===

[İÇERİK]
﻿<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
	  <!--uyarıları hata göstererek düzgün ilerleme sağlar-->
	  <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Serilog" Version="4.3.0" />
    <PackageReference Include="Serilog.AspNetCore" Version="9.0.0" />
    <PackageReference Include="Serilog.Extensions.Logging" Version="9.0.2" />
    <PackageReference Include="Serilog.Settings.Configuration" Version="9.0.0" />
    <PackageReference Include="Serilog.Sinks.Async" Version="2.1.0" />
    <PackageReference Include="Serilog.Sinks.Console" Version="6.0.0" />
    <PackageReference Include="Serilog.Sinks.Debug" Version="3.0.0" />
    <PackageReference Include="Serilog.Sinks.File" Version="7.0.0" />
    <PackageReference Include="Serilog.Sinks.PeriodicBatching" Version="5.0.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\Domain\TahaMucasirogluBlog.Domain.Constant\TahaMucasirogluBlog.Domain.Constant.csproj" />
    <ProjectReference Include="..\..\Domain\TahaMucasirogluBlog.Domain.DTOs\TahaMucasirogluBlog.Domain.DTOs.csproj" />
    <ProjectReference Include="..\..\Domain\TahaMucasirogluBlog.Domain.Entities\TahaMucasirogluBlog.Domain.Entities.csproj" />
    <ProjectReference Include="..\..\Domain\TahaMucasirogluBlog.Domain.Extensions\TahaMucasirogluBlog.Domain.Extensions.csproj" />
    <ProjectReference Include="..\..\Domain\TahaMucasirogluBlog.Domain.Models\TahaMucasirogluBlog.Domain.Models.csproj" />
    <ProjectReference Include="..\..\Domain\TahaMucasirogluBlog.Domain.Return\TahaMucasirogluBlog.Domain.Return.csproj" />
  </ItemGroup>

</Project>



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Mapper\Extensions\ConfigExtension\ConfigExtension.cs ===

[İÇERİK]
﻿using AutoMapper;
using TahaMucasirogluBlog.Domain.DTOs.Abstract;
using TahaMucasirogluBlog.Domain.Entities.Abstract;

namespace TahaMucasirogluBlog.Application.Mapper.Extensions.ConfigExtension
{
    static public class ConfigExtension
    {
        /// <summary>
        /// Bir nesnenin ekleme (insert) işlemi için varsayılan haritalama konfigürasyonunu ayarlar.
        /// </summary>
        /// <typeparam name="TDest">Hedef DTO türü. <see cref="IAddDTO"/> arayüzünü uygulamalıdır.</typeparam>
        /// <typeparam name="TSrc">Kaynak Entity türü. <see cref="IEntity"/> arayüzünü uygulamalıdır.</typeparam>
        /// <param name="mapper">IMappingExpression nesnesi.</param>
        /// <returns>IMappingExpression nesnesi.</returns>
        static public IMappingExpression<TDest, TSrc> DefaultAddMapConfig<TDest, TSrc>(this IMappingExpression<TDest, TSrc> mapper)
            where TDest : IAddDTO
            where TSrc : IEntity
            => mapper
            .ForMember(dest => dest.Id, opt => opt.MapFrom(src => Guid.NewGuid()))
            .ForMember(dest => dest.InsertedAt, opt => opt.MapFrom(src => DateTime.UtcNow))
            .ForMember(dest => dest.InsertedBy, opt => opt.MapFrom(src => src.IslemYapanKullaniciId))
            .ForMember(dest => dest.IsDeleted, opt => opt.MapFrom(src => false));
        /// <summary>
        /// Bir nesnenin güncelleme (update) işlemi için varsayılan haritalama konfigürasyonunu ayarlar.
        /// </summary>
        /// <typeparam name="TDest">Hedef DTO türü. <see cref="IUpdateDTO"/> arayüzünü uygulamalıdır.</typeparam>
        /// <typeparam name="TSrc">Kaynak Entity türü. <see cref="IEntity"/> arayüzünü uygulamalıdır.</typeparam>
        /// <param name="mapper">IMappingExpression nesnesi.</param>
        /// <returns>IMappingExpression nesnesi.</returns>
        static public IMappingExpression<TDest, TSrc> DefaultUpdateMapConfig<TDest, TSrc>(this IMappingExpression<TDest, TSrc> mapper)
            where TDest : IUpdateDTO
            where TSrc : IEntity
            => mapper
            .ForMember(dest => dest.UpdatedAt, src => src.MapFrom(src => DateTime.UtcNow))
            .ForMember(dest => dest.UpdatedBy, src => src.MapFrom(src => src.IslemYapanKullaniciId));
        /// <summary>
        /// Bir nesnenin silme (delete) işlemi için varsayılan haritalama konfigürasyonunu ayarlar.
        /// </summary>
        /// <typeparam name="TDest">Hedef DTO türü. <see cref="IDeleteDTO"/> arayüzünü uygulamalıdır.</typeparam>
        /// <typeparam name="TSrc">Kaynak Entity türü. <see cref="IEntity"/> arayüzünü uygulamalıdır.</typeparam>
        /// <param name="mapper">IMappingExpression nesnesi.</param>
        /// <returns>IMappingExpression nesnesi.</returns>
        static public IMappingExpression<TDest, TSrc> DefaultDeleteMapConfig<TDest, TSrc>(this IMappingExpression<TDest, TSrc> mapper)
            where TDest : IDeleteDTO
            where TSrc : IEntity
            => mapper
            .ForMember(dest => dest.DeletedAt, src => src.MapFrom(src => DateTime.UtcNow))
            .ForMember(dest => dest.DeletedBy, opt => opt.MapFrom(src => src.IslemYapanKullaniciId))
            .ForMember(dest => dest.IsDeleted, src => src.MapFrom(src => true));
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Mapper\MapProfile\Entity\BlogPostCategoryMapProfile.cs ===

[İÇERİK]
﻿using AutoMapper;
using TahaMucasirogluBlog.Application.Mapper.Extensions.ConfigExtension;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPostCategory;
using TahaMucasirogluBlog.Domain.Entities.Concrete;

namespace TahaMucasirogluBlog.Application.Mapper.MapProfile.Entity
{
    public class BlogPostCategoryMapProfile : Profile
    {
        public BlogPostCategoryMapProfile()
        {
            CreateMap<AddBlogPostCategoryDTO, BlogPostCategory>().DefaultAddMapConfig();
            CreateMap<UpdateBlogPostCategoryDTO, BlogPostCategory>().DefaultUpdateMapConfig();
            CreateMap<DeleteBlogPostCategoryDTO, BlogPostCategory>().DefaultDeleteMapConfig();
            CreateMap<BlogPostCategory, GetBlogPostCategoryDTO>();
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Mapper\MapProfile\Entity\BlogPostMapProfile.cs ===

[İÇERİK]
﻿using AutoMapper;
using TahaMucasirogluBlog.Application.Mapper.Extensions.ConfigExtension;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPost;
using TahaMucasirogluBlog.Domain.Entities.Concrete;

namespace TahaMucasirogluBlog.Application.Mapper.MapProfile.Entity
{
    public class BlogPostMapProfile : Profile
    {
        public BlogPostMapProfile()
        {
            CreateMap<AddBlogPostDTO, BlogPost>().DefaultAddMapConfig();
            CreateMap<UpdateBlogPostDTO, BlogPost>().DefaultUpdateMapConfig();
            CreateMap<DeleteBlogPostDTO, BlogPost>().DefaultDeleteMapConfig();
            CreateMap<BlogPost, GetBlogPostDTO>();
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Mapper\MapProfile\Entity\BlogPostTagMapProfile.cs ===

[İÇERİK]
﻿using AutoMapper;
using TahaMucasirogluBlog.Application.Mapper.Extensions.ConfigExtension;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPostTag;
using TahaMucasirogluBlog.Domain.Entities.Concrete;

namespace TahaMucasirogluBlog.Application.Mapper.MapProfile.Entity
{
    public class BlogPostTagMapProfile : Profile
    {
        public BlogPostTagMapProfile()
        {
            CreateMap<AddBlogPostTagDTO, BlogPostTag>().DefaultAddMapConfig();
            CreateMap<UpdateBlogPostTagDTO, BlogPostTag>().DefaultUpdateMapConfig();
            CreateMap<DeleteBlogPostTagDTO, BlogPostTag>().DefaultDeleteMapConfig();
            CreateMap<BlogPostTag, GetBlogPostTagDTO>();
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Mapper\MapProfile\Entity\CategoryMapProfile.cs ===

[İÇERİK]
﻿using AutoMapper;
using TahaMucasirogluBlog.Application.Mapper.Extensions.ConfigExtension;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Category;
using TahaMucasirogluBlog.Domain.Entities.Concrete;

namespace TahaMucasirogluBlog.Application.Mapper.MapProfile.Entity
{
    public class CategoryMapProfile : Profile
    {
        public CategoryMapProfile()
        {
            CreateMap<AddCategoryDTO, Category>().DefaultAddMapConfig();
            CreateMap<UpdateCategoryDTO, Category>().DefaultUpdateMapConfig();
            CreateMap<DeleteCategoryDTO, Category>().DefaultDeleteMapConfig();
            CreateMap<Category, GetCategoryDTO>();
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Mapper\MapProfile\Entity\CommentMapProfile.cs ===

[İÇERİK]
﻿using AutoMapper;
using TahaMucasirogluBlog.Application.Mapper.Extensions.ConfigExtension;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Comment;
using TahaMucasirogluBlog.Domain.Entities.Concrete;

namespace TahaMucasirogluBlog.Application.Mapper.MapProfile.Entity
{
    public class CommentMapProfile : Profile
    {
        public CommentMapProfile()
        {
            CreateMap<AddCommentDTO, Comment>().DefaultAddMapConfig();
            CreateMap<UpdateCommentDTO, Comment>().DefaultUpdateMapConfig();
            CreateMap<DeleteCommentDTO, Comment>().DefaultDeleteMapConfig();
            CreateMap<Comment, GetCommentDTO>();
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Mapper\MapProfile\Entity\ExperienceMapProfile.cs ===

[İÇERİK]
﻿using AutoMapper;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Mapper.Extensions.ConfigExtension;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Comment;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Experience;
using TahaMucasirogluBlog.Domain.Entities.Concrete;

namespace TahaMucasirogluBlog.Application.Mapper.MapProfile.Entity
{
    public class ExperienceMapProfile : Profile
    {
        public ExperienceMapProfile()
        {
            CreateMap<AddExperienceDTO, Experience>().DefaultAddMapConfig();
            CreateMap<UpdateExperienceDTO, Experience>().DefaultUpdateMapConfig();
            CreateMap<DeleteExperienceDTO, Experience>().DefaultDeleteMapConfig();
            CreateMap<Experience, GetExperienceDTO>();
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Mapper\MapProfile\Entity\ExperienceTechnologyMapProfile.cs ===

[İÇERİK]
﻿using AutoMapper;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Mapper.Extensions.ConfigExtension;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Experience;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceTechnology;
using TahaMucasirogluBlog.Domain.Entities.Concrete;

namespace TahaMucasirogluBlog.Application.Mapper.MapProfile.Entity
{
    public class ExperienceTechnologyMapProfile : Profile
    {
        public ExperienceTechnologyMapProfile()
        {
            CreateMap<AddExperienceTechnologyDTO, ExperienceTechnology>().DefaultAddMapConfig();
            CreateMap<UpdateExperienceTechnologyDTO, ExperienceTechnology>().DefaultUpdateMapConfig();
            CreateMap<DeleteExperienceTechnologyDTO, ExperienceTechnology>().DefaultDeleteMapConfig();
            CreateMap<ExperienceTechnology, GetExperienceTechnologyDTO>();
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Mapper\MapProfile\Entity\ExperienceTypeMapProfile.cs ===

[İÇERİK]
﻿using AutoMapper;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Mapper.Extensions.ConfigExtension;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceTechnology;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceType;
using TahaMucasirogluBlog.Domain.Entities.Concrete;

namespace TahaMucasirogluBlog.Application.Mapper.MapProfile.Entity
{
    public class ExperienceTypeMapProfile : Profile
    {
        public ExperienceTypeMapProfile()
        {
            CreateMap<AddExperienceTypeDTO, ExperienceType>().DefaultAddMapConfig();
            CreateMap<UpdateExperienceTypeDTO, ExperienceType>().DefaultUpdateMapConfig();
            CreateMap<DeleteExperienceTypeDTO, ExperienceType>().DefaultDeleteMapConfig();
            CreateMap<ExperienceType, GetExperienceTypeDTO>();
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Mapper\MapProfile\Entity\InfoMapProfile.cs ===

[İÇERİK]
﻿using AutoMapper;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Mapper.Extensions.ConfigExtension;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceType;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Info;
using TahaMucasirogluBlog.Domain.Entities.Concrete;

namespace TahaMucasirogluBlog.Application.Mapper.MapProfile.Entity
{
    public class InfoMapProfile : Profile
    {
        public InfoMapProfile()
        {
            CreateMap<AddInfoDTO, Info>().DefaultAddMapConfig();
            CreateMap<UpdateInfoDTO, Info>().DefaultUpdateMapConfig();
            CreateMap<DeleteInfoDTO, Info>().DefaultDeleteMapConfig();
            CreateMap<Info, GetInfoDTO>();
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Mapper\MapProfile\Entity\SkillMapProfile.cs ===

[İÇERİK]
﻿using AutoMapper;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Mapper.Extensions.ConfigExtension;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Info;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Skill;
using TahaMucasirogluBlog.Domain.Entities.Concrete;

namespace TahaMucasirogluBlog.Application.Mapper.MapProfile.Entity
{
    public class SkillMapProfile : Profile
    {
        public SkillMapProfile()
        {
            CreateMap<AddSkillDTO, Skill>().DefaultAddMapConfig();
            CreateMap<UpdateSkillDTO, Skill>().DefaultUpdateMapConfig();
            CreateMap<DeleteSkillDTO, Skill>().DefaultDeleteMapConfig();
            CreateMap<Skill, GetSkillDTO>();
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Mapper\MapProfile\Entity\SocialLinkMapProfile.cs ===

[İÇERİK]
﻿using AutoMapper;
using TahaMucasirogluBlog.Application.Mapper.Extensions.ConfigExtension;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SocialLink;
using TahaMucasirogluBlog.Domain.Entities.Concrete;

namespace TahaMucasirogluBlog.Application.Mapper.MapProfile.Entity
{
    public class SocialLinkMapProfile : Profile
    {
        public SocialLinkMapProfile()
        {
            CreateMap<AddSocialLinkDTO, SocialLink>().DefaultAddMapConfig();
            CreateMap<UpdateSocialLinkDTO, SocialLink>().DefaultUpdateMapConfig();
            CreateMap<DeleteSocialLinkDTO, SocialLink>().DefaultDeleteMapConfig();
            CreateMap<SocialLink, GetSocialLinkDTO>();
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Mapper\MapProfile\Entity\SubSkillMapProfile.cs ===

[İÇERİK]
﻿using AutoMapper;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Mapper.Extensions.ConfigExtension;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Skill;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SubSkill;
using TahaMucasirogluBlog.Domain.Entities.Concrete;

namespace TahaMucasirogluBlog.Application.Mapper.MapProfile.Entity
{
    public class SubSkillMapProfile : Profile
    {
        public SubSkillMapProfile()
        {
            CreateMap<AddSubSkillDTO, SubSkill>().DefaultAddMapConfig();
            CreateMap<UpdateSubSkillDTO, SubSkill>().DefaultUpdateMapConfig();
            CreateMap<DeleteSubSkillDTO, SubSkill>().DefaultDeleteMapConfig();
            CreateMap<SubSkill, GetSubSkillDTO>();
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Mapper\MapProfile\Entity\TagMapProfile.cs ===

[İÇERİK]
﻿using AutoMapper;
using TahaMucasirogluBlog.Application.Mapper.Extensions.ConfigExtension;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Tag;
using TahaMucasirogluBlog.Domain.Entities.Concrete;

namespace TahaMucasirogluBlog.Application.Mapper.MapProfile.Entity
{
    public class TagMapProfile : Profile
    {
        public TagMapProfile()
        {
            CreateMap<AddTagDTO, Tag>().DefaultAddMapConfig();
            CreateMap<UpdateTagDTO, Tag>().DefaultUpdateMapConfig();
            CreateMap<DeleteTagDTO, Tag>().DefaultDeleteMapConfig();
            CreateMap<Tag, GetTagDTO>();
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Mapper\MapProfile\Entity\UserMapProfile.cs ===

[İÇERİK]
﻿using AutoMapper;
using TahaMucasirogluBlog.Application.Mapper.Extensions.ConfigExtension;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.User;
using TahaMucasirogluBlog.Domain.Entities.Concrete;

namespace TahaMucasirogluBlog.Application.Mapper.MapProfile.Entity
{
    public class UserMapProfile : Profile
    {
        public UserMapProfile()
        {
            CreateMap<AddUserDTO, User>().DefaultAddMapConfig();
            CreateMap<UpdateUserDTO, User>().DefaultUpdateMapConfig();
            CreateMap<DeleteUserDTO, User>().DefaultDeleteMapConfig();
            CreateMap<User, GetUserDTO>();
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Mapper\MapProfile\Response\CvResponseDTOMappingProfile.cs ===

[İÇERİK]
﻿using AutoMapper;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Experience;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Info;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Skill;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SubSkill;
using TahaMucasirogluBlog.Domain.Entities.Concrete;

namespace TahaMucasirogluBlog.Application.Mapper.MapProfile.Response
{
    public class CvResponseDTOMappingProfile : Profile
    {
        public CvResponseDTOMappingProfile()
        {
            // Experience => GetExperienceWithTechnologyAndTypeDTO
            CreateMap<Experience, GetExperienceWithTechnologyAndTypeDTO>()
                .ForMember(dest => dest.ExperienceType, opt => opt.MapFrom(src => src.ExperienceType))
                .ForMember(dest => dest.SubSkills, opt => opt.MapFrom(src => src.ExperienceTechnologies));//burada dönüşüm hatası olacak

            // Skill => GetSkillWithSubSkillsDTO
            CreateMap<Skill, GetSkillWithSubSkillsDTO>()
                .ForMember(dest => dest.SubSkills, opt => opt.MapFrom(src => src.SubSkills));
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Mapper\TahaMucasirogluBlog.Application.Mapper.csproj ===

[İÇERİK]
﻿<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
	  <!--uyarıları hata göstererek düzgün ilerleme sağlar-->
	  <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="AutoMapper" Version="14.0.0" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="Extensions\ConvertExtension\" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\Domain\TahaMucasirogluBlog.Domain.Constant\TahaMucasirogluBlog.Domain.Constant.csproj" />
    <ProjectReference Include="..\..\Domain\TahaMucasirogluBlog.Domain.DTOs\TahaMucasirogluBlog.Domain.DTOs.csproj" />
    <ProjectReference Include="..\..\Domain\TahaMucasirogluBlog.Domain.Entities\TahaMucasirogluBlog.Domain.Entities.csproj" />
    <ProjectReference Include="..\..\Domain\TahaMucasirogluBlog.Domain.Extensions\TahaMucasirogluBlog.Domain.Extensions.csproj" />
    <ProjectReference Include="..\..\Domain\TahaMucasirogluBlog.Domain.Models\TahaMucasirogluBlog.Domain.Models.csproj" />
    <ProjectReference Include="..\..\Domain\TahaMucasirogluBlog.Domain.Return\TahaMucasirogluBlog.Domain.Return.csproj" />
  </ItemGroup>

</Project>



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Base\AddValidation.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Extensions;
using TahaMucasirogluBlog.Domain.DTOs.Abstract;

namespace TahaMucasirogluBlog.Application.Validation.Base
{
    public class AddValidation<T> : Validator<T>
        where T : class, IAddDTO
    {
        public AddValidation() : base()
        {
            RuleFor(e => e.IslemYapanKullaniciId).IsGuid(nameof(IAddDTO.IslemYapanKullaniciId));
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Base\DeleteValidation.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Extensions;
using TahaMucasirogluBlog.Domain.DTOs.Abstract;

namespace TahaMucasirogluBlog.Application.Validation.Base
{
    public class DeleteValidation<T> : Validator<T>
        where T : class, IDeleteDTO
    {
        public DeleteValidation() : base()
        {
            RuleFor(e => e.Id).IsGuid(nameof(IDeleteDTO.Id));
            RuleFor(e => e.IslemYapanKullaniciId).IsGuid(nameof(IDeleteDTO.IslemYapanKullaniciId));
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Base\RequestValidation.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Extensions;
using TahaMucasirogluBlog.Domain.DTOs.Abstract;

namespace TahaMucasirogluBlog.Application.Validation.Base
{
    public class RequestValidation<T> : Validator<T>
            where T : class, IRequestDTO
    {
        public RequestValidation() : base()
        {
            RuleFor(e => e.IslemYapanKullaniciId).IsGuid(nameof(IRequestDTO.IslemYapanKullaniciId));
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Base\UpdateValidation.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Extensions;
using TahaMucasirogluBlog.Domain.DTOs.Abstract;

namespace TahaMucasirogluBlog.Application.Validation.Base
{
    public class UpdateValidation<T> : Validator<T>
        where T : class, IUpdateDTO
    {
        public UpdateValidation() : base()
        {
            RuleFor(e => e.Id).IsGuid(nameof(IUpdateDTO.Id));
            RuleFor(e => e.IslemYapanKullaniciId).IsGuid(nameof(IUpdateDTO.IslemYapanKullaniciId));
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Base\Validator.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Abstract;

namespace TahaMucasirogluBlog.Application.Validation.Base
{
    public class Validator<T> : AbstractValidator<T>
        where T : class, IDTO
    {
        public Validator() { }


        internal bool BeValidPathOrUrl(string path)
        {
            if (Uri.TryCreate(path, UriKind.Absolute, out var uri))
            {
                return uri.Scheme is "http" or "https" && path.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase);
            }
            // Local dosya yolu olarak kontrol
            return (path.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase)
                    && (path.Contains("\\") || path.Contains("/")));
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\BlogPostCategory\AddBlogPostCategoryDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Application.Validation.Concrete.Entity.BlogPost;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPost;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPostCategory;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.BlogPostCategory
{
    public class AddBlogPostCategoryListDTOValidation : AbstractValidator<IEnumerable<AddBlogPostCategoryDTO>>
    {
        public AddBlogPostCategoryListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new AddBlogPostCategoryDTOValidation());
        }
    }
    public class AddBlogPostCategoryDTOValidation : AddValidation<AddBlogPostCategoryDTO>
    {
        public AddBlogPostCategoryDTOValidation() : base()
        {
            RuleFor(x => x.PostId)
           .NotEmpty()
           .WithMessage("PostId zorunludur ve geçerli bir GUID olmalıdır.");

            RuleFor(x => x.CategoryId)
                .NotEmpty()
                .WithMessage("CategoryId zorunludur ve geçerli bir GUID olmalıdır.");

            When(x => x.PostId != Guid.Empty, () =>
            {
                RuleFor(x => x.CategoryId)
                    .Must((model, categoryId) => categoryId != model.PostId)
                    .WithMessage("CategoryId, PostId ile aynı olamaz.");
            });
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\BlogPostCategory\DeleteBlogPostCategoryDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPostCategory;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.BlogPostCategory
{
    public class DeleteBlogPostCategoryListDTOValidation : AbstractValidator<IEnumerable<DeleteBlogPostCategoryDTO>>
    {
        public DeleteBlogPostCategoryListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new DeleteBlogPostCategoryDTOValidation());
        }
    }
    public class DeleteBlogPostCategoryDTOValidation : DeleteValidation<DeleteBlogPostCategoryDTO>
    {
        public DeleteBlogPostCategoryDTOValidation() : base()
        {
            
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\BlogPostCategory\UpdateBlogPostCategoryDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPostCategory;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.BlogPostCategory
{
    public class UpdateBlogPostCategoryListDTOValidation : AbstractValidator<IEnumerable<UpdateBlogPostCategoryDTO>>
    {
        public UpdateBlogPostCategoryListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new UpdateBlogPostCategoryDTOValidation());
        }
    }
    public class UpdateBlogPostCategoryDTOValidation : UpdateValidation<UpdateBlogPostCategoryDTO>
    {
        public UpdateBlogPostCategoryDTOValidation() : base()
        {
            RuleFor(x => x.PostId)
            .NotEmpty()
            .WithMessage("PostId zorunludur ve geçerli bir GUID olmalıdır.");

            RuleFor(x => x.CategoryId)
                .NotEmpty()
                .WithMessage("CategoryId zorunludur ve geçerli bir GUID olmalıdır.");

            When(x => x.PostId != Guid.Empty, () =>
            {
                RuleFor(x => x.CategoryId)
                    .Must((model, categoryId) => categoryId != model.PostId)
                    .WithMessage("CategoryId, PostId ile aynı olamaz.");
            });

        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\BlogPostTag\AddBlogPostTagDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Application.Validation.Concrete.Entity.BlogPostCategory;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPostCategory;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPostTag;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.BlogPostTag
{
    public class AddBlogPostTagListDTOValidation : AbstractValidator<IEnumerable<AddBlogPostTagDTO>>
    {
        public AddBlogPostTagListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new AddBlogPostTagDTOValidation());
        }
    }
    public class AddBlogPostTagDTOValidation : AddValidation<AddBlogPostTagDTO>
    {
        public AddBlogPostTagDTOValidation() : base()
        {
            // PostId boş olamaz
            RuleFor(x => x.PostId)
                .NotEmpty()
                .WithMessage("PostId zorunludur ve geçerli bir GUID olmalıdır.");

            // TagId boş olamaz
            RuleFor(x => x.TagId)
                .NotEmpty()
                .WithMessage("TagId zorunludur ve geçerli bir GUID olmalıdır.");

            // PostId doluysa, TagId PostId ile aynı olamaz
            When(x => x.PostId != Guid.Empty, () =>
            {
                RuleFor(x => x.TagId)
                    .Must((model, tagId) => tagId != model.PostId)
                    .WithMessage("TagId, PostId ile aynı olamaz.");
            });
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\BlogPostTag\DeleteBlogPostTagDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPostTag;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.BlogPostTag
{
    public class DeleteBlogPostTagListDTOValidation : AbstractValidator<IEnumerable<DeleteBlogPostTagDTO>>
    {
        public DeleteBlogPostTagListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new DeleteBlogPostTagDTOValidation());
        }
    }
    public class DeleteBlogPostTagDTOValidation : DeleteValidation<DeleteBlogPostTagDTO>
    {
        public DeleteBlogPostTagDTOValidation() : base()
        {
            
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\BlogPostTag\UpdateBlogPostTagDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPostTag;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.BlogPostTag
{
    public class UpdateBlogPostTagListDTOValidation : AbstractValidator<IEnumerable<UpdateBlogPostTagDTO>>
    {
        public UpdateBlogPostTagListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new UpdateBlogPostTagDTOValidation());
        }
    }
    public class UpdateBlogPostTagDTOValidation : UpdateValidation<UpdateBlogPostTagDTO>
    {
        public UpdateBlogPostTagDTOValidation() : base()
        {
            // PostId boş olamaz
            RuleFor(x => x.PostId)
                .NotEmpty()
                .WithMessage("PostId zorunludur ve geçerli bir GUID olmalıdır.");

            // TagId boş olamaz
            RuleFor(x => x.TagId)
                .NotEmpty()
                .WithMessage("TagId zorunludur ve geçerli bir GUID olmalıdır.");

            // PostId doluysa, TagId PostId ile aynı olamaz
            When(x => x.PostId != Guid.Empty, () =>
            {
                RuleFor(x => x.TagId)
                    .Must((model, tagId) => tagId != model.PostId)
                    .WithMessage("TagId, PostId ile aynı olamaz.");
            });
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\BlogPost\AddBlogPostDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPost;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.BlogPost
{

    public class AddBlogPostListDTOValidation : AbstractValidator<IEnumerable<AddBlogPostDTO>>
    {
        public AddBlogPostListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new AddBlogPostDTOValidation());
        }
    }
    public class AddBlogPostDTOValidation : AddValidation<AddBlogPostDTO>
    {
        public AddBlogPostDTOValidation() : base()
        {
            // Yazar ID'si boş (default Guid) olmamalı
            RuleFor(x => x.AuthorId)
                .NotEmpty()
                .WithMessage("AuthorId zorunludur.");

            // Başlık boş olmamalı, minimum/maximum uzunluk olabilir
            RuleFor(x => x.Title)
                .NotEmpty().WithMessage("Title boş olamaz.")
                .Length(5, 200).WithMessage("Title 5–200 karakter olmalı.");

            // Slug boş olmamalı, düzenli ifade ile kontrol (sadece a–z, 0–9 ve -)
            RuleFor(x => x.Slug)
                .NotEmpty().WithMessage("Slug boş olamaz.")
                .Matches("^[a-z0-9]+(-[a-z0-9]+)*$")
                .WithMessage("Slug yalnızca küçük harf, rakam ve - içermeli.");

            // İçerik boş olmamalı, minimum uzunluk olabilir
            RuleFor(x => x.Content)
                .NotEmpty().WithMessage("Content boş olamaz.")
                .MinimumLength(20).WithMessage("Content en az 20 karakter olmalı.");

            // ViewCount negatif olamaz
            RuleFor(x => x.ViewCount)
                .GreaterThanOrEqualTo(0)
                .WithMessage("ViewCount negatif olamaz.");
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\BlogPost\DeleteBlogPostDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPost;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.BlogPost
{
    public class DeleteBlogPostListDTOValidation : AbstractValidator<IEnumerable<DeleteBlogPostDTO>>
    {
        public DeleteBlogPostListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new DeleteBlogPostDTOValidation());
        }
    }
    public class DeleteBlogPostDTOValidation : DeleteValidation<DeleteBlogPostDTO>
    {
        public DeleteBlogPostDTOValidation() : base()
        {
            
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\BlogPost\UpdateBlogPostDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPost;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.BlogPost
{

    public class UpdateBlogPostListDTOValidation : AbstractValidator<IEnumerable<UpdateBlogPostDTO>>
    {
        public UpdateBlogPostListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new UpdateBlogPostDTOValidation());
        }
    }
    public class UpdateBlogPostDTOValidation : UpdateValidation<UpdateBlogPostDTO>
    {
        public UpdateBlogPostDTOValidation() : base()
        {
            // Yazar ID'si boş (default Guid) olmamalı
            RuleFor(x => x.AuthorId)
                .NotEmpty()
                .WithMessage("AuthorId zorunludur.");

            // Başlık boş olmamalı, minimum/maximum uzunluk olabilir
            RuleFor(x => x.Title)
                .NotEmpty().WithMessage("Title boş olamaz.")
                .Length(5, 200).WithMessage("Title 5–200 karakter olmalı.");

            // Slug boş olmamalı, düzenli ifade ile kontrol (sadece a–z, 0–9 ve -)
            RuleFor(x => x.Slug)
                .NotEmpty().WithMessage("Slug boş olamaz.")
                .Matches("^[a-z0-9]+(-[a-z0-9]+)*$")
                .WithMessage("Slug yalnızca küçük harf, rakam ve - içermeli.");

            // İçerik boş olmamalı, minimum uzunluk olabilir
            RuleFor(x => x.Content)
                .NotEmpty().WithMessage("Content boş olamaz.")
                .MinimumLength(20).WithMessage("Content en az 20 karakter olmalı.");

            // ViewCount negatif olamaz
            RuleFor(x => x.ViewCount)
                .GreaterThanOrEqualTo(0)
                .WithMessage("ViewCount negatif olamaz.");
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\Category\AddCategoryDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Application.Validation.Concrete.Entity.BlogPostTag;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPostTag;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Category;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Category
{
    public class AddCategoryListDTOValidation : AbstractValidator<IEnumerable<AddCategoryDTO>>
    {
        public AddCategoryListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new AddCategoryDTOValidation());
        }
    }
    public class AddCategoryDTOValidation : AddValidation<AddCategoryDTO>
    {
        public AddCategoryDTOValidation() : base()
        {
            // ParentCategoryId: nullable olabilir ama boş GUID olmamalı
            RuleFor(x => x.ParentCategoryId)
                .Must(id => id == null || id != Guid.Empty)
                .WithMessage("ParentCategoryId, boş GUID olamaz.");

            // Name: boş olmamalı, trim sonrası minimum/maximum sınırı
            RuleFor(x => x.Name)
                .NotEmpty().WithMessage("Category name zorunludur.")
                .Length(2, 100)
                .WithMessage("Category name 2–100 karakter arası olmalıdır.");

            // Slug: boş olmamalı, regex kontrolüyle güvenli URL formatını sağlamalı
            RuleFor(x => x.Slug)
                .NotEmpty().WithMessage("Slug zorunludur.")
                .Matches("^[a-z0-9]+(-[a-z0-9]+)*$")
                .WithMessage("Slug yalnızca küçük harf, rakam ve '-' içermelidir.");
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\Category\DeleteCategoryDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Category;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Category
{
    public class DeleteCategoryListDTOValidation : AbstractValidator<IEnumerable<DeleteCategoryDTO>>
    {
        public DeleteCategoryListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new DeleteCategoryDTOValidation());
        }
    }
    public class DeleteCategoryDTOValidation : DeleteValidation<DeleteCategoryDTO>
    {
        public DeleteCategoryDTOValidation() : base()
        {
            
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\Category\UpdateCategoryDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Category;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Category
{
    public class UpdateCategoryListDTOValidation : AbstractValidator<IEnumerable<UpdateCategoryDTO>>
    {
        public UpdateCategoryListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new UpdateCategoryDTOValidation());
        }
    }
    public class UpdateCategoryDTOValidation : UpdateValidation<UpdateCategoryDTO>
    {
        public UpdateCategoryDTOValidation() : base()
        {
            // ParentCategoryId: nullable olabilir ama boş GUID olmamalı
            RuleFor(x => x.ParentCategoryId)
                .Must(id => id == null || id != Guid.Empty)
                .WithMessage("ParentCategoryId, boş GUID olamaz.");

            // Name: boş olmamalı, trim sonrası minimum/maximum sınırı
            RuleFor(x => x.Name)
                .NotEmpty().WithMessage("Category name zorunludur.")
                .Length(2, 100)
                .WithMessage("Category name 2–100 karakter arası olmalıdır.");

            // Slug: boş olmamalı, regex kontrolüyle güvenli URL formatını sağlamalı
            RuleFor(x => x.Slug)
                .NotEmpty().WithMessage("Slug zorunludur.")
                .Matches("^[a-z0-9]+(-[a-z0-9]+)*$")
                .WithMessage("Slug yalnızca küçük harf, rakam ve '-' içermelidir.");
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\Comment\AddCommentDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Category;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Category;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Comment;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Comment
{
    public class AddCommentListDTOValidation : AbstractValidator<IEnumerable<AddCommentDTO>>
    {
        public AddCommentListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new AddCommentDTOValidation());
        }
    }
    public class AddCommentDTOValidation : AddValidation<AddCommentDTO>
    {
        public AddCommentDTOValidation() : base()
        {
            RuleFor(x => x.PostId)
            .NotEmpty()
            .WithMessage("PostId boş olamaz."); // Guid.Empty kontrolü

            RuleFor(x => x.Content)
                .NotEmpty()
                .WithMessage("İçerik boş olamaz.")
                .MinimumLength(5)
                .WithMessage("İçerik en az 5 karakter olmalı.")
                .MaximumLength(2000)
                .WithMessage("İçerik en fazla 2000 karakter olabilir.");

            RuleFor(x => x.ParentCommentId)
                .Must(id => id == null || id != Guid.Empty)
                .WithMessage("ParentCommentId geçerli bir GUID olmalı veya null kalmalı.");
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\Comment\DeleteCommentDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Comment;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Comment
{
    public class DeleteCommentListDTOValidation : AbstractValidator<IEnumerable<DeleteCommentDTO>>
    {
        public DeleteCommentListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new DeleteCommentDTOValidation());
        }
    }
    public class DeleteCommentDTOValidation : DeleteValidation<DeleteCommentDTO>
    {
        public DeleteCommentDTOValidation() : base()
        {
            

        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\Comment\UpdateCommentDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Comment;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Comment
{
    public class UpdateCommentListDTOValidation : AbstractValidator<IEnumerable<UpdateCommentDTO>>
    {
        public UpdateCommentListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new UpdateCommentDTOValidation());
        }
    }
    public class UpdateCommentDTOValidation : UpdateValidation<UpdateCommentDTO>
    {
        public UpdateCommentDTOValidation() : base()
        {
            RuleFor(x => x.PostId)
            .NotEmpty()
            .WithMessage("PostId boş olamaz."); // Guid.Empty kontrolü

            RuleFor(x => x.Content)
                .NotEmpty()
                .WithMessage("İçerik boş olamaz.")
                .MinimumLength(5)
                .WithMessage("İçerik en az 5 karakter olmalı.")
                .MaximumLength(2000)
                .WithMessage("İçerik en fazla 2000 karakter olabilir.");

            RuleFor(x => x.ParentCommentId)
                .Must(id => id == null || id != Guid.Empty)
                .WithMessage("ParentCommentId geçerli bir GUID olmalı veya null kalmalı.");
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\ExperienceTechnology\AddExperienceTechnologyDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Experience;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Experience;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceTechnology;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.ExperienceTechnology
{
    public class AddExperienceTechnologyListDTOValidation : AbstractValidator<IEnumerable<AddExperienceTechnologyDTO>>
    {
        public AddExperienceTechnologyListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new AddExperienceTechnologyDTOValidation());
        }
    }
    public class AddExperienceTechnologyDTOValidation : AddValidation<AddExperienceTechnologyDTO>
    {
        public AddExperienceTechnologyDTOValidation() : base()
        {
            RuleFor(x => x.ExperienceId)
            .NotEmpty()
            .WithMessage("ExperienceId boş olamaz.");

            RuleFor(x => x.SubSkillId)
                .NotEmpty()
                .WithMessage("SubSkillId boş olamaz.");
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\ExperienceTechnology\DeleteExperienceTechnologyDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceTechnology;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.ExperienceTechnology
{
    public class DeleteExperienceTechnologyListDTOValidation : AbstractValidator<IEnumerable<DeleteExperienceTechnologyDTO>>
    {
        public DeleteExperienceTechnologyListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new DeleteExperienceTechnologyDTOValidation());
        }
    }
    public class DeleteExperienceTechnologyDTOValidation : DeleteValidation<DeleteExperienceTechnologyDTO>
    {
        public DeleteExperienceTechnologyDTOValidation() : base()
        {
            
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\ExperienceTechnology\UpdateExperienceTechnologyDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceTechnology;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.ExperienceTechnology
{
    public class UpdateExperienceTechnologyListDTOValidation : AbstractValidator<IEnumerable<UpdateExperienceTechnologyDTO>>
    {
        public UpdateExperienceTechnologyListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new UpdateExperienceTechnologyDTOValidation());
        }
    }
    public class UpdateExperienceTechnologyDTOValidation : UpdateValidation<UpdateExperienceTechnologyDTO>
    {
        public UpdateExperienceTechnologyDTOValidation() : base()
        {
            RuleFor(x => x.ExperienceId)
            .NotEmpty()
            .WithMessage("ExperienceId boş olamaz.");

            RuleFor(x => x.SubSkillId)
                .NotEmpty()
                .WithMessage("SubSkillId boş olamaz.");
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\ExperienceType\AddExperienceTypeDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Application.Validation.Concrete.Entity.ExperienceTechnology;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceTechnology;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceType;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.ExperienceType
{
    public class AddExperienceTypeListDTOValidation : AbstractValidator<IEnumerable<AddExperienceTypeDTO>>
    {
        public AddExperienceTypeListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new AddExperienceTypeDTOValidation());
        }
    }
    public class AddExperienceTypeDTOValidation : AddValidation<AddExperienceTypeDTO>
    {
        public AddExperienceTypeDTOValidation() : base()
        {
            RuleFor(x => x.Name)
            .NotEmpty()
            .WithMessage("{PropertyName} boş olamaz.")       // Required (not null or empty)
            .Length(2, 100)
            .WithMessage("{PropertyName} 2 ile 100 karakter arasında olmalı."); // Min 2, max 100 chars
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\ExperienceType\DeleteExperienceTypeDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceType;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.ExperienceType
{
    public class DeleteExperienceTypeListDTOValidation : AbstractValidator<IEnumerable<DeleteExperienceTypeDTO>>
    {
        public DeleteExperienceTypeListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new DeleteExperienceTypeDTOValidation());
        }
    }
    public class DeleteExperienceTypeDTOValidation : DeleteValidation<DeleteExperienceTypeDTO>
    {
        public DeleteExperienceTypeDTOValidation() : base()
        {
            
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\ExperienceType\UpdateExperienceTypeDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceType;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.ExperienceType
{
    public class UpdateExperienceTypeListDTOValidation : AbstractValidator<IEnumerable<UpdateExperienceTypeDTO>>
    {
        public UpdateExperienceTypeListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new UpdateExperienceTypeDTOValidation());
        }
    }
    public class UpdateExperienceTypeDTOValidation : UpdateValidation<UpdateExperienceTypeDTO>
    {
        public UpdateExperienceTypeDTOValidation() : base()
        {
            RuleFor(x => x.Name)
            .NotEmpty()
            .WithMessage("{PropertyName} boş olamaz.")       // Required (not null or empty)
            .Length(2, 100)
            .WithMessage("{PropertyName} 2 ile 100 karakter arasında olmalı."); // Min 2, max 100 chars
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\Experience\AddExperienceDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Comment;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Comment;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Experience;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Experience
{
    public class AddExperienceListDTOValidation : AbstractValidator<IEnumerable<AddExperienceDTO>>
    {
        public AddExperienceListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new AddExperienceDTOValidation());
        }
    }
    public class AddExperienceDTOValidation : AddValidation<AddExperienceDTO>
    {
        public AddExperienceDTOValidation() : base()
        {
            RuleFor(x => x.ExperienceTypeId)
            .NotEmpty()
            .WithMessage("ExperienceTypeId boş olamaz.");

            RuleFor(x => x.Title)
                .NotEmpty()
                .WithMessage("Başlık boş olamaz.")
                .MaximumLength(200);

            RuleFor(x => x.Provider)
                .NotEmpty()
                .WithMessage("Provider (kurum/şirket) boş olamaz.")
                .MaximumLength(200);

            RuleFor(x => x.StartDate)
                .LessThanOrEqualTo(DateTime.UtcNow)
                .WithMessage("Başlangıç tarihi bugünden büyük olamaz.");

            RuleFor(x => x)
                .Must(dto => dto.EndDate == null || dto.EndDate >= dto.StartDate)
                .WithMessage("Bitiş tarihi, başlangıç tarihinden önce olamaz.");

            RuleFor(x => x.Description)
                .NotEmpty()
                .WithMessage("Açıklama boş olamaz.")
                .MinimumLength(20)
                .WithMessage("Açıklama en az 20 karakter olmalı.");

            RuleFor(x => x.Reference)
                .MaximumLength(200)
                .When(x => !string.IsNullOrEmpty(x.Reference))
                .WithMessage("Referans maksimum 200 karakter olabilir.");
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\Experience\DeleteExperienceDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Experience;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Experience
{
    public class DeleteExperienceListDTOValidation : AbstractValidator<IEnumerable<DeleteExperienceDTO>>
    {
        public DeleteExperienceListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new DeleteExperienceDTOValidation());
        }
    }
    public class DeleteExperienceDTOValidation : DeleteValidation<DeleteExperienceDTO>
    {
        public DeleteExperienceDTOValidation() : base()
        {
            
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\Experience\UpdateExperienceDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Experience;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Experience
{
    public class UpdateExperienceListDTOValidation : AbstractValidator<IEnumerable<UpdateExperienceDTO>>
    {
        public UpdateExperienceListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new UpdateExperienceDTOValidation());
        }
    }
    public class UpdateExperienceDTOValidation : UpdateValidation<UpdateExperienceDTO>
    {
        public UpdateExperienceDTOValidation() : base()
        {
            RuleFor(x => x.ExperienceTypeId)
            .NotEmpty()
            .WithMessage("ExperienceTypeId boş olamaz.");

            RuleFor(x => x.Title)
                .NotEmpty()
                .WithMessage("Başlık boş olamaz.")
                .MaximumLength(200);

            RuleFor(x => x.Provider)
                .NotEmpty()
                .WithMessage("Provider (kurum/şirket) boş olamaz.")
                .MaximumLength(200);

            RuleFor(x => x.StartDate)
                .LessThanOrEqualTo(DateTime.UtcNow)
                .WithMessage("Başlangıç tarihi bugünden büyük olamaz.");

            RuleFor(x => x)
                .Must(dto => dto.EndDate == null || dto.EndDate >= dto.StartDate)
                .WithMessage("Bitiş tarihi, başlangıç tarihinden önce olamaz.");

            RuleFor(x => x.Description)
                .NotEmpty()
                .WithMessage("Açıklama boş olamaz.")
                .MinimumLength(20)
                .WithMessage("Açıklama en az 20 karakter olmalı.");

            RuleFor(x => x.Reference)
                .MaximumLength(200)
                .When(x => !string.IsNullOrEmpty(x.Reference))
                .WithMessage("Referans maksimum 200 karakter olabilir.");
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\Info\AddInfoDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Application.Validation.Concrete.Entity.ExperienceType;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceType;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Info;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Info
{
    public class AddInfoListDTOValidation : AbstractValidator<IEnumerable<AddInfoDTO>>
    {
        public AddInfoListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new AddInfoDTOValidation());
        }
    }
    public class AddInfoDTOValidation : AddValidation<AddInfoDTO>
    {
        public AddInfoDTOValidation() : base()
        {
            RuleFor(x => x.FullName)
            .NotEmpty().WithMessage("Ad soyad boş olamaz")
            .Length(2, 100).WithMessage("Ad soyad 2–100 karakter arasında olmalı");

            RuleFor(x => x.Email)
                .NotEmpty().WithMessage("Email boş olamaz")
                .EmailAddress().WithMessage("Geçerli bir email adresi girin"); // :contentReference[oaicite:1]{index=1}

            RuleFor(x => x.Phone)
                .NotEmpty().WithMessage("Telefon numarası boş olamaz")
                .Matches(@"^\+?[0-9\s\-]{7,15}$")
                .WithMessage("Geçerli bir telefon numarası girin (7–15 rakam)");

            RuleFor(x => x.Location)
                .NotEmpty().WithMessage("Konum boş olamaz")
                .MaximumLength(200).WithMessage("Konum maksimum 200 karakter olabilir");
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\Info\DeleteInfoDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Info;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Info
{
    public class DeleteInfoListDTOValidation : AbstractValidator<IEnumerable<DeleteInfoDTO>>
    {
        public DeleteInfoListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new DeleteInfoDTOValidation());
        }
    }
    public class DeleteInfoDTOValidation : DeleteValidation<DeleteInfoDTO>
    {
        public DeleteInfoDTOValidation() : base()
        {
            
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\Info\UpdateInfoDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Info;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Info
{
    public class UpdateInfoListDTOValidation : AbstractValidator<IEnumerable<UpdateInfoDTO>>
    {
        public UpdateInfoListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new UpdateInfoDTOValidation());
        }
    }
    public class UpdateInfoDTOValidation : UpdateValidation<UpdateInfoDTO>
    {
        public UpdateInfoDTOValidation() : base()
        {
            RuleFor(x => x.FullName)
            .NotEmpty().WithMessage("Ad soyad boş olamaz")
            .Length(2, 100).WithMessage("Ad soyad 2–100 karakter arasında olmalı");

            RuleFor(x => x.Email)
                .NotEmpty().WithMessage("Email boş olamaz")
                .EmailAddress().WithMessage("Geçerli bir email adresi girin"); // :contentReference[oaicite:1]{index=1}

            RuleFor(x => x.Phone)
                .NotEmpty().WithMessage("Telefon numarası boş olamaz")
                .Matches(@"^\+?[0-9\s\-]{7,15}$")
                .WithMessage("Geçerli bir telefon numarası girin (7–15 rakam)");

            RuleFor(x => x.Location)
                .NotEmpty().WithMessage("Konum boş olamaz")
                .MaximumLength(200).WithMessage("Konum maksimum 200 karakter olabilir");

        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\Skill\AddSkillDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Info;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Info;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Skill;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Skill
{
    public class AddSkillListDTOValidation : AbstractValidator<IEnumerable<AddSkillDTO>>
    {
        public AddSkillListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new AddSkillDTOValidation());
        }
    }
    public class AddSkillDTOValidation : AddValidation<AddSkillDTO>
    {
        public AddSkillDTOValidation() : base()
        {
            RuleFor(x => x.Name)
            .NotEmpty()
            .WithMessage("{PropertyName} boş olamaz.")       // Required (not null or empty)
            .Length(2, 100)
            .WithMessage("{PropertyName} 2 ile 100 karakter arasında olmalı."); // Min 2, max 100 chars
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\Skill\DeleteSkillDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Skill;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Skill
{
    public class DeleteSkillListDTOValidation : AbstractValidator<IEnumerable<DeleteSkillDTO>>
    {
        public DeleteSkillListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new DeleteSkillDTOValidation());
        }
    }
    public class DeleteSkillDTOValidation : DeleteValidation<DeleteSkillDTO>
    {
        public DeleteSkillDTOValidation() : base()
        {
            
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\Skill\UpdateSkillDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Skill;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Skill
{
    public class UpdateSkillListDTOValidation : AbstractValidator<IEnumerable<UpdateSkillDTO>>
    {
        public UpdateSkillListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new UpdateSkillDTOValidation());
        }
    }
    public class UpdateSkillDTOValidation : UpdateValidation<UpdateSkillDTO>
    {
        public UpdateSkillDTOValidation() : base()
        {
            RuleFor(x => x.Name)
            .NotEmpty()
            .WithMessage("{PropertyName} boş olamaz.")       // Required (not null or empty)
            .Length(2, 100)
            .WithMessage("{PropertyName} 2 ile 100 karakter arasında olmalı."); // Min 2, max 100 chars
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\SocialLink\AddSocialLinkDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Skill;
using TahaMucasirogluBlog.Application.Validation.Extensions;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Skill;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SocialLink;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.SocialLink
{
    public class AddSocialLinkListDTOValidation : AbstractValidator<IEnumerable<AddSocialLinkDTO>>
    {
        public AddSocialLinkListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new AddSocialLinkDTOValidation());
        }
    }
    public class AddSocialLinkDTOValidation : AddValidation<AddSocialLinkDTO>
    {
        public AddSocialLinkDTOValidation() : base()
        {
            RuleFor(x => x.Name)
           .NotEmpty().WithMessage("Name boş olamaz")
           .MaximumLength(100).WithMessage("Name en fazla 100 karakter olabilir");

            RuleFor(x => x.Url)
                .NotEmpty().WithMessage("Url boş olamaz")
                .MaximumLength(500).WithMessage("Url en fazla 500 karakter olabilir")
                .Url() // Örnek olarak bizim custom URL validator'ı kullanıyoruz
                .WithMessage("Geçerli bir URL olmalı");

            RuleFor(x => x.IconClass)
                .MaximumLength(100).WithMessage("IconClass en fazla 100 karakter olabilir")
                .When(x => x.IconClass != null);

            RuleFor(x => x.DisplayOrder)
                .GreaterThanOrEqualTo(0).WithMessage("DisplayOrder sıfırdan küçük olamaz");
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\SocialLink\DeleteSocialLinkDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SocialLink;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.SocialLink
{
    public class DeleteSocialLinkListDTOValidation : AbstractValidator<IEnumerable<DeleteSocialLinkDTO>>
    {
        public DeleteSocialLinkListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new DeleteSocialLinkDTOValidation());
        }
    }
    public class DeleteSocialLinkDTOValidation : DeleteValidation<DeleteSocialLinkDTO>
    {
        public DeleteSocialLinkDTOValidation() : base()
        {
                
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\SocialLink\UpdateSocialLinkDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Application.Validation.Extensions;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SocialLink;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.SocialLink
{
    public class UpdateSocialLinkListDTOValidation : AbstractValidator<IEnumerable<UpdateSocialLinkDTO>>
    {
        public UpdateSocialLinkListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new UpdateSocialLinkDTOValidation());
        }
    }
    public class UpdateSocialLinkDTOValidation : UpdateValidation<UpdateSocialLinkDTO>
    {
        public UpdateSocialLinkDTOValidation() : base()
        {
            RuleFor(x => x.Name)
            .NotEmpty().WithMessage("Name boş olamaz")
            .MaximumLength(100).WithMessage("Name en fazla 100 karakter olabilir");

            RuleFor(x => x.Url)
                .NotEmpty().WithMessage("Url boş olamaz")
                .MaximumLength(500).WithMessage("Url en fazla 500 karakter olabilir")
                .Url() // Örnek olarak bizim custom URL validator'ı kullanıyoruz
                .WithMessage("Geçerli bir URL olmalı");

            RuleFor(x => x.IconClass)
                .MaximumLength(100).WithMessage("IconClass en fazla 100 karakter olabilir")
                .When(x => x.IconClass != null);

            RuleFor(x => x.DisplayOrder)
                .GreaterThanOrEqualTo(0).WithMessage("DisplayOrder sıfırdan küçük olamaz");
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\SubSkill\AddSubSkillDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Application.Validation.Concrete.Entity.SocialLink;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SocialLink;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SubSkill;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.SubSkill
{
    public class AddSubSkillListDTOValidation : AbstractValidator<IEnumerable<AddSubSkillDTO>>
    {
        public AddSubSkillListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new AddSubSkillDTOValidation());
        }
    }
    public class AddSubSkillDTOValidation : AddValidation<AddSubSkillDTO>
    {
        public AddSubSkillDTOValidation() : base()
        {
            RuleFor(x => x.SkillId)
            .NotEmpty()
            .WithMessage("{PropertyName} boş olamaz."); // Guid.Empty kontrolü

            RuleFor(x => x.Name)
                .NotEmpty()
                .WithMessage("{PropertyName} boş olamaz.")
                .Length(2, 100)
                .WithMessage("{PropertyName} 2 ile 100 karakter arasında olmalı.");
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\SubSkill\DeleteSubSkillDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SubSkill;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.SubSkill
{
    public class DeleteSubSkillListDTOValidation : AbstractValidator<IEnumerable<DeleteSubSkillDTO>>
    {
        public DeleteSubSkillListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new DeleteSubSkillDTOValidation());
        }
    }
    public class DeleteSubSkillDTOValidation : DeleteValidation<DeleteSubSkillDTO>
    {
        public DeleteSubSkillDTOValidation() : base()
        {
            
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\SubSkill\UpdateSubSkillDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SubSkill;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.SubSkill
{
    public class UpdateSubSkillListDTOValidation : AbstractValidator<IEnumerable<UpdateSubSkillDTO>>
    {
        public UpdateSubSkillListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new UpdateSubSkillDTOValidation());
        }
    }
    public class UpdateSubSkillDTOValidation : UpdateValidation<UpdateSubSkillDTO>
    {
        public UpdateSubSkillDTOValidation() : base()
        {
            RuleFor(x => x.SkillId)
            .NotEmpty()
            .WithMessage("{PropertyName} boş olamaz."); // Guid.Empty kontrolü

            RuleFor(x => x.Name)
                .NotEmpty()
                .WithMessage("{PropertyName} boş olamaz.")
                .Length(2, 100)
                .WithMessage("{PropertyName} 2 ile 100 karakter arasında olmalı.");

        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\Tag\AddTagDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Application.Validation.Concrete.Entity.SubSkill;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SubSkill;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Tag;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Tag
{
    public class AddTagListDTOValidation : AbstractValidator<IEnumerable<AddTagDTO>>
    {
        public AddTagListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new AddTagDTOValidation());
        }
    }
    public class AddTagDTOValidation : AddValidation<AddTagDTO>
    {
        public AddTagDTOValidation() : base()
        {
            // Name: boş olamaz, minimum/maximum uzunluk kontrolü
            RuleFor(x => x.Name)
                .NotEmpty().WithMessage("Name alanı zorunludur ve boş olamaz.") // null veya boşluk dahil kontrol eder :contentReference[oaicite:1]{index=1}
                .Length(2, 100).WithMessage("Name 2‑100 karakter arasında olmalıdır.");

            // Slug: boş olamaz, regex ile küçük harf/rakam ve '-' formatı sağlanır
            RuleFor(x => x.Slug)
                .NotEmpty().WithMessage("Slug alanı zorunludur.") // boşluklu stringleri de engeller :contentReference[oaicite:2]{index=2}
                .Matches("^[a-z0-9]+(-[a-z0-9]+)*$")
                .WithMessage("Slug yalnızca küçük harf, rakam ve '-' içermeli (ör. örnek-erik123).");
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\Tag\DeleteTagDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Tag;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Tag
{
    public class DeleteTagListDTOValidation : AbstractValidator<IEnumerable<DeleteTagDTO>>
    {
        public DeleteTagListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new DeleteTagDTOValidation());
        }
    }
    public class DeleteTagDTOValidation : DeleteValidation<DeleteTagDTO>
    {
        public DeleteTagDTOValidation() : base()
        {
            
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\Tag\UpdateTagDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Tag;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Tag
{
    public class UpdateTagListDTOValidation : AbstractValidator<IEnumerable<UpdateTagDTO>>
    {
        public UpdateTagListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new UpdateTagDTOValidation());
        }
    }
    public class UpdateTagDTOValidation : UpdateValidation<UpdateTagDTO>
    {
        public UpdateTagDTOValidation() : base()
        {
            // Name: boş olamaz, minimum/maximum uzunluk kontrolü
            RuleFor(x => x.Name)
                .NotEmpty().WithMessage("Name alanı zorunludur ve boş olamaz.") // null veya boşluk dahil kontrol eder :contentReference[oaicite:1]{index=1}
                .Length(2, 100).WithMessage("Name 2‑100 karakter arasında olmalıdır.");

            // Slug: boş olamaz, regex ile küçük harf/rakam ve '-' formatı sağlanır
            RuleFor(x => x.Slug)
                .NotEmpty().WithMessage("Slug alanı zorunludur.") // boşluklu stringleri de engeller :contentReference[oaicite:2]{index=2}
                .Matches("^[a-z0-9]+(-[a-z0-9]+)*$")
                .WithMessage("Slug yalnızca küçük harf, rakam ve '-' içermeli (ör. örnek-erik123).");
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\User\AddUserDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Tag;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Tag;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.User;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.User
{
    public class AddUserListDTOValidation : AbstractValidator<IEnumerable<AddUserDTO>>
    {
        public AddUserListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new AddUserDTOValidation());
        }
    }
    public class AddUserDTOValidation : AddValidation<AddUserDTO>
    {
        public AddUserDTOValidation() : base()
        {
            // FirstName: boş olamaz, uzunluk sınırı
            RuleFor(u => u.FirstName)
                .NotEmpty().WithMessage("FirstName zorunludur.")
                .Length(2, 50).WithMessage("FirstName 2–50 karakter olmalı.");

            // LastName: boş olamaz, uzunluk sınırı
            RuleFor(u => u.LastName)
                .NotEmpty().WithMessage("LastName zorunludur.")
                .Length(2, 50).WithMessage("LastName 2–50 karakter olmalı.");

            // Email: boş olamaz, geçerli formatta olmalı
            RuleFor(u => u.Email)
                .NotEmpty().WithMessage("Email zorunludur.")
                .EmailAddress().WithMessage("Geçerli bir email adresi girilmelidir."); // :contentReference[oaicite:1]{index=1}

        // PasswordHash: boş olamaz, minimum uzunluk kontrolü
        RuleFor(u => u.PasswordHash)
            .NotEmpty().WithMessage("Parola geçersiz (empty hash).")
            .MinimumLength(60).WithMessage("PasswordHash en az 60 karakter olmalı.");
            // Örneğin bcrypt hash’ler ~60 karakter olur. Gerektikçe sayıyı ayarlayabilirsin.
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\User\DeleteUserDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.User;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.User
{
    public class DeleteUserListDTOValidation : AbstractValidator<IEnumerable<DeleteUserDTO>>
    {
        public DeleteUserListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new DeleteUserDTOValidation());
        }
    }
    public class DeleteUserDTOValidation : DeleteValidation<DeleteUserDTO>
    {
        public DeleteUserDTOValidation() : base()
        {
            
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Concrete\Entity\User\UpdateUserDTOValidation.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Application.Validation.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.User;

namespace TahaMucasirogluBlog.Application.Validation.Concrete.Entity.User
{
    public class UpdateUserListDTOValidation : AbstractValidator<IEnumerable<UpdateUserDTO>>
    {
        public UpdateUserListDTOValidation()
        {
            RuleForEach(x => x).SetValidator(new UpdateUserDTOValidation());
        }
    }
    public class UpdateUserDTOValidation : UpdateValidation<UpdateUserDTO>
    {
        public UpdateUserDTOValidation() : base()
        {
            // FirstName: boş olamaz, uzunluk sınırı
            RuleFor(u => u.FirstName)
                .NotEmpty().WithMessage("FirstName zorunludur.")
                .Length(2, 50).WithMessage("FirstName 2–50 karakter olmalı.");

            // LastName: boş olamaz, uzunluk sınırı
            RuleFor(u => u.LastName)
                .NotEmpty().WithMessage("LastName zorunludur.")
                .Length(2, 50).WithMessage("LastName 2–50 karakter olmalı.");

            // Email: boş olamaz, geçerli formatta olmalı
            RuleFor(u => u.Email)
                .NotEmpty().WithMessage("Email zorunludur.")
                .EmailAddress().WithMessage("Geçerli bir email adresi girilmelidir."); // :contentReference[oaicite:1]{index=1}

        // PasswordHash: boş olamaz, minimum uzunluk kontrolü
        RuleFor(u => u.PasswordHash)
            .NotEmpty().WithMessage("Parola geçersiz (empty hash).")
            .MinimumLength(60).WithMessage("PasswordHash en az 60 karakter olmalı.");
            // Örneğin bcrypt hash’ler ~60 karakter olur. Gerektikçe sayıyı ayarlayabilirsin.
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Extensions\DateTimeValidateExtension.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Extensions;

namespace TahaMucasirogluBlog.Application.Validation.Extensions
{
    static public class DateTimeValidateExtension
    {
        static public IRuleBuilderOptions<T, DateTime> IsDateTimePast<T>(this IRuleBuilder<T, DateTime> validation, string propertyName = "", string message = "", bool required = true)
            => validation.Required(propertyName: propertyName, required: required).Must(e => e.IsLessThan(DateTime.Now)).WithMessage(message == "" ? $"{propertyName} tarih değerinin geçmiş zaman olması gerekmektedir." : $"{propertyName}  {message}");

        static public IRuleBuilderOptions<T, DateTime> IsDateTimeFuture<T>(this IRuleBuilder<T, DateTime> validation, string propertyName = "", string message = "", bool required = true)
            => validation.Required(propertyName: propertyName, required: required).Must(e => e.IsBiggerThan(DateTime.Now)).WithMessage(message == "" ? $"{propertyName} tarih değerinin gelecek zaman olması gerekmektedir." : $"{propertyName}  {message}");
        static public IRuleBuilderOptions<T, DateTime?> IsDateTimePast<T>(this IRuleBuilder<T, DateTime?> validation, string propertyName = "", string message = "", bool required = true)
                    => validation.Required(propertyName: propertyName, required: required).Must(e => e.IsLessThan(DateTime.Now)).WithMessage(message == "" ? $"{propertyName} tarih değerinin geçmiş zaman olması gerekmektedir." : $"{propertyName}  {message}");

        static public IRuleBuilderOptions<T, DateTime?> IsDateTimeFuture<T>(this IRuleBuilder<T, DateTime?> validation, string propertyName = "", string message = "", bool required = true)
            => validation.Required(propertyName: propertyName, required: required).Must(e => e.IsBiggerThan(DateTime.Now)).WithMessage(message == "" ? $"{propertyName} tarih değerinin gelecek zaman olması gerekmektedir." : $"{propertyName}  {message}");

        public static IRuleBuilderOptions<T, DateTime?> BiggerThan<T>(this IRuleBuilder<T, DateTime?> validation, Func<T, DateTime?> otherDate, string propertyName = "", string propertyName2 = "", string message = "", bool required = true)
            => validation.Required(propertyName: propertyName, required: required).Must((dto, currentValue) => currentValue.HasValue && otherDate(dto).HasValue && currentValue > otherDate(dto)).WithMessage(message == "" ? $" {propertyName} Tarihi {propertyName2} tarihinden geride olamaz." : $"{propertyName} {propertyName2} {message}");

        public static IRuleBuilderOptions<T, DateTime> BiggerThan<T>(this IRuleBuilder<T, DateTime> validation, Func<T, DateTime?> otherDate, string propertyName = "", string propertyName2 = "", string message = "", bool required = true)
            => validation.Required(propertyName: propertyName, required: required).Must((dto, currentValue) => otherDate(dto).HasValue && currentValue > otherDate(dto)).WithMessage(message == "" ? $" {propertyName} Tarihi {propertyName2} tarihinden geride olamaz." : $"{propertyName} {propertyName2} {message}");

        public static IRuleBuilderOptions<T, DateTime?> LessThan<T>(this IRuleBuilder<T, DateTime?> validation, Func<T, DateTime?> otherDate, string propertyName = "", string propertyName2 = "", string message = "", bool required = true)
            => validation.Required(propertyName: propertyName, required: required).Must((dto, currentValue) => currentValue.HasValue && otherDate(dto).HasValue && currentValue < otherDate(dto)).WithMessage(message == "" ? $" {propertyName} Tarihi {propertyName2} tarihinden ileride olamaz." : $"{propertyName} {propertyName2} {message}");

        public static IRuleBuilderOptions<T, DateTime> LessThan<T>(this IRuleBuilder<T, DateTime> validation, Func<T, DateTime?> otherDate, string propertyName = "", string propertyName2 = "", string message = "", bool required = true)
            => validation.Required(propertyName: propertyName, required: required).Must((dto, currentValue) => otherDate(dto).HasValue && currentValue < otherDate(dto)).WithMessage(message == "" ? $" {propertyName} Tarihi {propertyName2} tarihinden ileride olamaz." : $"{propertyName} {propertyName2} {message}");



        public static IRuleBuilderOptions<T, DateTime?> BiggerThan<T>(this IRuleBuilder<T, DateTime?> validation, DateTime otherDate, string propertyName = "", string propertyName2 = "", string message = "", bool required = true)
            => validation.Required(propertyName: propertyName, required: required).Must((dto, currentValue) => currentValue.HasValue && currentValue > otherDate).WithMessage(message == "" ? $" {propertyName} Tarihi {propertyName2} tarihinden geride olamaz." : $"{propertyName} {propertyName2} {message}");

        public static IRuleBuilderOptions<T, DateTime> BiggerThan<T>(this IRuleBuilder<T, DateTime> validation, DateTime otherDate, string propertyName = "", string propertyName2 = "", string message = "", bool required = true)
            => validation.Required(propertyName: propertyName, required: required).Must((dto, currentValue) => currentValue > otherDate).WithMessage(message == "" ? $" {propertyName} Tarihi {propertyName2} tarihinden geride olamaz." : $"{propertyName} {propertyName2} {message}");

        public static IRuleBuilderOptions<T, DateTime?> LessThan<T>(this IRuleBuilder<T, DateTime?> validation, DateTime otherDate, string propertyName = "", string propertyName2 = "", string message = "", bool required = true)
            => validation.Required(propertyName: propertyName, required: required).Must((dto, currentValue) => currentValue.HasValue && currentValue < otherDate).WithMessage(message == "" ? $" {propertyName} Tarihi {propertyName2} tarihinden ileride olamaz." : $"{propertyName} {propertyName2} {message}");

        public static IRuleBuilderOptions<T, DateTime> LessThan<T>(this IRuleBuilder<T, DateTime> validation, DateTime otherDate, string propertyName = "", string propertyName2 = "", string message = "", bool required = true)
            => validation.Required(propertyName: propertyName, required: required).Must((dto, currentValue) => currentValue < otherDate).WithMessage(message == "" ? $" {propertyName} Tarihi {propertyName2} tarihinden ileride olamaz." : $"{propertyName} {propertyName2} {message}");

    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Extensions\DecimalValidateExtension.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TahaMucasirogluBlog.Application.Validation.Extensions
{
    static public class DecimalValidateExtension
    {
        static public IRuleBuilderOptions<T, decimal> IsInRange<T>(this IRuleBuilder<T, decimal> validation, string propertyName = "", int minLength = 0, int maxLength = 0, string message = "", bool required = true)
           => validation.Required(propertyName: propertyName, required: required).Must(e => e >= minLength && e <= maxLength).WithMessage(message == "" ? $"{propertyName} değeri [{minLength} - {maxLength}] aralığında değil" : $"{propertyName}  {message}");
        static public IRuleBuilderOptions<T, decimal> BiggerThan<T>(this IRuleBuilder<T, decimal> validation, string propertyName = "", int minLength = 0, string message = "", bool required = true)
            => validation.Required(propertyName: propertyName, required: required).GreaterThanOrEqualTo(minLength).WithMessage(message == "" ? $"{propertyName} değerinin {minLength} değerinden büyük veya eşit olmalı." : $"{propertyName}  {message}");

        static public IRuleBuilderOptions<T, decimal> LessThan<T>(this IRuleBuilder<T, decimal> validation, string propertyName = "", int maxLength = 0, string message = "", bool required = true)
            => validation.Required(propertyName: propertyName, required: required).LessThanOrEqualTo(maxLength).WithMessage(message == "" ? $"{propertyName} değerinin {maxLength} değerinden küçük veya eşit olmalı." : $"{propertyName}  {message}");


        static public IRuleBuilderOptions<T, decimal?> BiggerThan<T>(this IRuleBuilder<T, decimal?> validation, string propertyName = "", int minLength = 0, string message = "", bool required = true)
            => validation.Required(propertyName: propertyName, required: required).GreaterThanOrEqualTo(minLength).WithMessage(message == "" ? $"{propertyName} değerinin {minLength} değerinden büyük veya eşit olmalı." : $"{propertyName}  {message}");

        static public IRuleBuilderOptions<T, decimal?> LessThan<T>(this IRuleBuilder<T, decimal?> validation, string propertyName = "", int maxLength = 0, string message = "", bool required = true)
            => validation.Required(propertyName: propertyName, required: required).LessThanOrEqualTo(maxLength).WithMessage(message == "" ? $"{propertyName} değerinin {maxLength} değerinden küçük veya eşit olmalı." : $"{propertyName}  {message}");
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Extensions\GuidValidateExtension.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TahaMucasirogluBlog.Application.Validation.Extensions
{
    static public class GuidValidateExtension
    {

        static public IRuleBuilderOptions<T, Guid?> IsGuid<T>(this IRuleBuilder<T, Guid?> validation, string propertyName = "", string message = "")
            => validation.Must(e => e != null && e.ToString()?.Length == 32).WithMessage(message == "" ? $"{propertyName} değeri Guid tipinde değil" : $"{propertyName}  {message}");


        static public IRuleBuilderOptions<T, Guid> IsGuid<T>(this IRuleBuilder<T, Guid> validation, string propertyName = "", string message = "")
            => validation.Must(e => e.ToString().Length == 32).WithMessage(message == "" ? $"{propertyName} değeri Guid tipinde değil" : $"{propertyName}  {message}");
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Extensions\IntValidateExtension.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TahaMucasirogluBlog.Application.Validation.Extensions
{
    static public class IntValidateExtension
    {
        static public IRuleBuilderOptions<T, int> IsInRange<T>(this IRuleBuilder<T, int> validation, string propertyName = "", int minLength = 0, int maxLength = 0, string message = "", bool required = true)
           => validation.Required(propertyName: propertyName, required: required).Must(e => e >= minLength && e <= maxLength).WithMessage(message == "" ? $"{propertyName} değeri [{minLength} - {maxLength}] aralığında değil" : $"{propertyName}  {message}");
        static public IRuleBuilderOptions<T, int> BiggerThan<T>(this IRuleBuilder<T, int> validation, string propertyName = "", int minLength = 0, string message = "", bool required = true)
            => validation.Required(propertyName: propertyName, required: required).GreaterThanOrEqualTo(minLength).WithMessage(message == "" ? $"{propertyName} değerinin {minLength} değerinden büyük veya eşit olmalı." : $"{propertyName}  {message}");

        static public IRuleBuilderOptions<T, int> LessThan<T>(this IRuleBuilder<T, int> validation, string propertyName = "", int maxLength = 0, string message = "", bool required = true)
            => validation.Required(propertyName: propertyName, required: required).LessThanOrEqualTo(maxLength).WithMessage(message == "" ? $"{propertyName} değerinin {maxLength} değerinden küçük veya eşit olmalı." : $"{propertyName}  {message}");



        // id validation

        static public IRuleBuilderOptions<T, int?> IdValidation<T>(this IRuleBuilder<T, int?> validation, string propertyName = "", string nonIdMessage = "", bool required = true)
            => validation.Required(propertyName, required: required).GreaterThanOrEqualTo(1).WithMessage($"{propertyName} Id Değeri İstenilen Formatta Değil");

        static public IRuleBuilderOptions<T, int> IdValidation<T>(this IRuleBuilder<T, int> validation, string propertyName = "", string nonIdMessage = "", bool required = true)
            => validation.Required(propertyName, required: required).GreaterThanOrEqualTo(1).WithMessage($"{propertyName} Id Değeri İstenilen Formatta Değil");


    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Extensions\StringValidateExtension.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Extensions;

namespace TahaMucasirogluBlog.Application.Validation.Extensions
{
    static public class StringValidateExtension
    {

        public static IRuleBuilderOptions<T, string> Url<T>(this IRuleBuilder<T, string> ruleBuilder)
        {
            bool UrlIsValidUri(string url) =>
                Uri.TryCreate(url, UriKind.Absolute, out var uri) &&
                (uri.Scheme == Uri.UriSchemeHttp || uri.Scheme == Uri.UriSchemeHttps);

            return ruleBuilder.Must(UrlIsValidUri)
                              .WithMessage("'{PropertyName}' geçerli bir HTTP veya HTTPS URL olmalı");
        }

        static public IRuleBuilderOptions<T, string?> IsInRange<T>(this IRuleBuilder<T, string?> validation, string propertyName = "", int minLength = 0, int maxLength = 0, string message = "", bool required = true)
            => validation.Required(propertyName: propertyName, required: required).Must(e => e != null && e.Length >= minLength && e.Length <= maxLength).WithMessage(message == "" ? $"{propertyName} uzunluğu [{minLength} - {maxLength}] aralığında değil" : $"{propertyName}  {message}");

        static public IRuleBuilderOptions<T, string?> OnlyLetter<T>(this IRuleBuilder<T, string?> validation, string propertyName = "", string message = "", bool required = true)
            => validation.Required(propertyName: propertyName, required: required).Must(e => e.IsOnlyLetter(!required)).WithMessage(message == "" ? $"{propertyName} değerinin içinde sadece harf olabilir." : $"{propertyName}  {message}");

        static public IRuleBuilderOptions<T, string?> OnlyDigit<T>(this IRuleBuilder<T, string?> validation, string propertyName = "", string message = "", bool required = true)
            => validation.Required(propertyName: propertyName, required: required).Must(e => e.IsOnlyDigits(!required)).WithMessage(message == "" ? $"{propertyName} değerinin içinde sadece rakam olabilir." : $"{propertyName}  {message}");

        static public IRuleBuilderOptions<T, string?> OnlyPunctuation<T>(this IRuleBuilder<T, string?> validation, string propertyName = "", string message = "", bool required = true)
            => validation.Required(propertyName: propertyName, required: required).Must(e => e.IsOnlyPunctuation(!required)).WithMessage(message == "" ? $"{propertyName} değerinin içinde sadece noktalama işareti olabilir." : $"{propertyName}  {message}");

        static public IRuleBuilderOptions<T, string?> OnlyLetterOrDigit<T>(this IRuleBuilder<T, string?> validation, string propertyName = "", string message = "", bool required = true)
            => validation.Required(propertyName: propertyName, required: required).Must(e => e.IsLetterOrDigit(!required)).WithMessage(message == "" ? $"{propertyName} değerinin içinde sadece harf ve rakam olabilir." : $"{propertyName}  {message}");
        static public IRuleBuilderOptions<T, string?> OnlyLetterOrPunctuation<T>(this IRuleBuilder<T, string?> validation, string propertyName = "", string message = "", bool required = true)
            => validation.Required(propertyName: propertyName, required: required).Must(e => e.IsLetterOrPunctuation(!required)).WithMessage(message == "" ? $"{propertyName} değerinin içinde sadece harf ve noktalama işareti olabilir." : $"{propertyName}  {message}");

        static public IRuleBuilderOptions<T, string?> OnlyLetterOrDigitOrPunctuation<T>(this IRuleBuilder<T, string?> validation, string propertyName = "", string message = "", bool required = true)
            => validation.Required(propertyName: propertyName, required: required).Must(e => e.IsLetterOrDigitOrPunctuation(!required)).WithMessage(message == "" ? $"{propertyName} değerinin içinde sadece harf, rakam ve noktalama işareti olabilir." : $"{propertyName}  {message}");

        static public IRuleBuilderOptions<T, string?> IsValidUtf8<T>(this IRuleBuilder<T, string?> validation, string propertyName = "", string message = "", bool required = true)
            => validation.Required(propertyName: propertyName, required: required).Must(e => e.IsValidUtf8(!required)).WithMessage(message == "" ? $"{propertyName} değerinin içinde utf-8 standartlarında olmayan karakterler var." : $"{propertyName}  {message}");

        static public IRuleBuilderOptions<T, string?> IsValidSha512<T>(this IRuleBuilder<T, string?> validation, string propertyName = "", string message = "", bool required = true)
            => validation.Required(propertyName: propertyName, required: required).Must(e => e.IsSha512Hash(!required)).WithMessage(message == "" ? $"{propertyName} değerinin şifreli olarak gelmeli fakat gelmedi. İstenilen şifreleme sha512" : $"{propertyName}  {message}");
        static public IRuleBuilderOptions<T, string?> IsPhoneNumber<T>(this IRuleBuilder<T, string?> validation, string propertyName = "", string message = "", bool required = true)
            => validation.Required(propertyName: propertyName, required: required).Must(e => e.IsPhoneNumber()).WithMessage(message == "" ? $"{propertyName} değeri telefon numarası olmalı." : $"{propertyName}  {message}");

        static public IRuleBuilderOptions<T, string?> IsEmail<T>(this IRuleBuilder<T, string?> validation, string propertyName = "", string message = "", bool required = true)
           => validation.Required(propertyName: propertyName, required: required).EmailAddress().WithMessage(message == "" ? $"{propertyName} değeri email adresi olmalı." : $"{propertyName}  {message}");

        static public IRuleBuilderOptions<T, string?> IsTaxNumber<T>(this IRuleBuilder<T, string?> validation, string propertyName = "", string message = "", bool required = true)
           => validation.Required(propertyName: propertyName, required: required).Must(e => e.IsValidTaxNumber()).WithMessage(message == "" ? $"{propertyName} değeri vargi no olmalı." : $"{propertyName}  {message}");

        static public IRuleBuilderOptions<T, string?> IsIdentityNumber<T>(this IRuleBuilder<T, string?> validation, string propertyName = "", string message = "", bool required = true)
           => validation.Required(propertyName: propertyName, required: required).Must(e => e.IsIdentityNumber()).WithMessage(message == "" ? $"{propertyName} değeri tc no olmalı." : $"{propertyName}  {message}");





    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\Extensions\ValidateExtension.cs ===

[İÇERİK]
﻿using FluentValidation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TahaMucasirogluBlog.Application.Validation.Extensions
{
    static public class ValidateExtension
    {
        static public IRuleBuilder<T, TProperty> Required<T, TProperty>(this IRuleBuilder<T, TProperty> validation, string propertyName = "", string emptyMessage = "", string nullMessage = "", bool required = true)
            => required ? validation.NotEmpty().WithMessage(emptyMessage == "" ? $"{propertyName} değeri boş olamaz" : $"{propertyName}  {emptyMessage}").NotNull().WithMessage(nullMessage == "" ? $"{propertyName} değeri null olamaz" : $"{propertyName}  {nullMessage}") : validation;
    }
}



=== DOSYA: TahaMucasirogluBlog\Application\TahaMucasirogluBlog.Application.Validation\TahaMucasirogluBlog.Application.Validation.csproj ===

[İÇERİK]
﻿<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
	  <!--uyarıları hata göstererek düzgün ilerleme sağlar-->
	  <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="FluentValidation" Version="12.0.0" />
    <PackageReference Include="FluentValidation.DependencyInjectionExtensions" Version="12.0.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\Domain\TahaMucasirogluBlog.Domain.Constant\TahaMucasirogluBlog.Domain.Constant.csproj" />
    <ProjectReference Include="..\..\Domain\TahaMucasirogluBlog.Domain.DTOs\TahaMucasirogluBlog.Domain.DTOs.csproj" />
    <ProjectReference Include="..\..\Domain\TahaMucasirogluBlog.Domain.Entities\TahaMucasirogluBlog.Domain.Entities.csproj" />
    <ProjectReference Include="..\..\Domain\TahaMucasirogluBlog.Domain.Extensions\TahaMucasirogluBlog.Domain.Extensions.csproj" />
    <ProjectReference Include="..\..\Domain\TahaMucasirogluBlog.Domain.Models\TahaMucasirogluBlog.Domain.Models.csproj" />
    <ProjectReference Include="..\..\Domain\TahaMucasirogluBlog.Domain.Return\TahaMucasirogluBlog.Domain.Return.csproj" />
  </ItemGroup>

</Project>



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC\Controllers\HomeController.cs ===

[İÇERİK]
using Microsoft.AspNetCore.Mvc;
using System.Diagnostics;

namespace TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;

        public HomeController(ILogger<HomeController> logger)
        {
            _logger = logger;
        }

        public IActionResult Index()
        {
            return View();
        }

        public IActionResult Privacy()
        {
            return View();
        }

 
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC\Controllers\MaintenanceController.cs ===

[İÇERİK]
﻿using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC.Options;

namespace TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC.Controllers
{
    public class MaintenanceController : Controller
    {
        private readonly MaintenanceOption model;
        public MaintenanceController(IOptions<MaintenanceOption> model)
        {
            this.model = model.Value;
        }


        public IActionResult Index()
        {
            return View(model);
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC\Extensions\LoggerExtension.cs ===

[İÇERİK]
﻿using Serilog;
using Serilog.Events;
using Serilog.Sinks.SystemConsole.Themes;
using System.Text;
using TahaMucasirogluBlog.Domain.Extensions;

namespace TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC.Extensions
{
    public static class LoggerExtension
    {
        static public Serilog.ILogger AddLogger(this WebApplicationBuilder builder)
        {
            bool logStatus = builder.Configuration.GetAppSettingsValue<bool>("LoggerSettings:LogStatus");
            int logLevel = builder.Configuration.GetAppSettingsValue<int>("LoggerSettings:LogLevel");
            builder.Services.AddLogging();
            return builder.AddSeriLoggerToService(logLevel, logStatus);
        }

        static private Serilog.ILogger AddSeriLoggerToService(this WebApplicationBuilder builder, int logLevel, bool LOG_CONNECTION_STATUS)
        {
            if (LOG_CONNECTION_STATUS)
            {
                // Serilog yapılandırması
                Log.Logger = new LoggerConfiguration()
                    .MinimumLevel.Is((LogEventLevel)logLevel)
                    .WriteTo.Async(e => e.Console(theme: SystemConsoleTheme.Colored, outputTemplate: "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level}] {Message:lj}{NewLine}{Exception}")) // Konsola loglama
                    .WriteTo.Async(e => e.File(
                        path: "../../Logs/AdminTahaMucasirogluMvcLog-.txt", // Log dosyalarının bulunduğu klasör
                        rollingInterval: RollingInterval.Day, // Günlük loglama
                        rollOnFileSizeLimit: true,
                        fileSizeLimitBytes: 1L * 1024 * 1024 * 1024,//1GB
                        retainedFileCountLimit: 100, //100 adet 1 gb sonrası ne yapıyor bakmadım
                        outputTemplate: "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level}] {Message:lj}{NewLine}{Exception}", // Log formatı
                        encoding: Encoding.UTF8
                    )) // Performans için asenkron dosya loglama
                    .CreateLogger();
                builder.Logging.ClearProviders();
                builder.Logging.AddSerilog(Log.Logger);
                // Serilog'u kullanması için Host yapılandırması
                builder.Host.UseSerilog();
                return Log.Logger;
            }
            else
            {
                return new LoggerConfiguration().MinimumLevel.Is(LogEventLevel.Fatal).CreateLogger(); //kapatılırsa en yüksek levele setleyip olabildiğince boş gönderiyorum tam kapatma nasıl bakmadım ama bunu ileride serilog kullanan kendi servisime çevirerek tam kontrol sağlamak istiyorum.
            }
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC\Extensions\MiddlewaresExtension.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC.Middlewares;

namespace TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC.Extensions
{
    static public class MiddlewaresExtension
    {
        static public void AddMiddlewares(this WebApplication app)
        {
            //app.UseMiddleware<>();
            app.UseMiddleware<MaintenanceMiddleware>();

        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC\Middlewares\MaintenanceMiddleware.cs ===

[İÇERİK]
﻿using Microsoft.Extensions.Options;
using TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC.Options;

namespace TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC.Middlewares
{
    public class MaintenanceMiddleware
    {
        private readonly RequestDelegate next;
        private readonly MaintenanceOption options;
        private readonly ILogger<MaintenanceMiddleware> logger;

        public MaintenanceMiddleware(
            RequestDelegate next,
            IOptions<MaintenanceOption> options,
            ILogger<MaintenanceMiddleware> logger)
        {
            this.next = next;
            this.options = options.Value;
            this.logger = logger;
        }

        public async Task InvokeAsync(HttpContext context)
        {
            // Sadece bakım modu aktifse ve istek kendisi bakım sayfasına değilse
            if (this.options.Enabled
                && DateTime.Now < this.options.EndDateTime
                && !context.Request.Path.StartsWithSegments("/Maintenance"))
            {
                this.logger.LogInformation(
                    "Bakım modu {EndDateTime} tarihine kadar aktif. {Method} isteği {Path}{QueryString} yolundan, {RemoteIpAddress} IP adresinden bakım sayfasına yönlendiriliyor.",
                    this.options.EndDateTime,
                    context.Request.Method,
                    context.Request.Path,
                    context.Request.QueryString,
                    context.Connection.RemoteIpAddress);

                context.Response.Redirect("/Maintenance");
                return;
            }

            await this.next(context);
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC\Options\MaintenanceOption.cs ===

[İÇERİK]
﻿namespace TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC.Options
{
    public record MaintenanceOption
    {
        public bool Enabled { get; init; }
        public DateTime EndDateTime { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC\Properties\launchSettings.json ===

[İÇERİK]
﻿{
  "$schema": "http://json.schemastore.org/launchsettings.json",
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:50503",
      "sslPort": 44351
    }
  },
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "applicationUrl": "http://localhost:5010",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "https": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "applicationUrl": "https://localhost:7197;http://localhost:5088",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC\TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC.csproj ===

[İÇERİK]
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
	  <!--uyarıları hata göstererek düzgün ilerleme sağlar-->
	  <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Mvc.NewtonsoftJson" Version="8.0.11" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\Application\TahaMucasirogluBlog.Application.Managers\TahaMucasirogluBlog.Application.Managers.csproj" />
    <ProjectReference Include="..\..\Application\TahaMucasirogluBlog.Application.Mapper\TahaMucasirogluBlog.Application.Mapper.csproj" />
    <ProjectReference Include="..\..\Application\TahaMucasirogluBlog.Application.Validation\TahaMucasirogluBlog.Application.Validation.csproj" />
  </ItemGroup>

</Project>



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC\Views\Home\Index.cshtml ===

[İÇERİK]
﻿@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://learn.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC\Views\Home\Privacy.cshtml ===

[İÇERİK]
﻿@{
    ViewData["Title"] = "Privacy Policy";
}
<h1>@ViewData["Title"]</h1>

<p>Use this page to detail your site's privacy policy.</p>



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC\Views\Maintenance\Index.cshtml ===

[İÇERİK]
﻿@using TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC.Options
@model MaintenanceOption;
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Taha Mücasiroğlu - Bakım Modu</title>
    <meta name="description" content="Site bakım modunda. En kısa sürede geri döneceğiz." />
    <meta name="keywords" content="Taha Mücasiroğlu, bakım, maintenance" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
    <link rel="stylesheet" href="~/Pages/MaintenancePageAsset/main.css" asp-append-version="true" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
</head>
<body>
    <div class="container-fluid maintenance-container d-flex align-items-center justify-content-center min-vh-100">
        <div class="content-box animate__animated animate__fadeIn">
            <div class="gears-animation animate__animated animate__fadeInDown">
                <div class="gear gear-large"></div>
                <div class="gear gear-medium"></div>
                <div class="gear gear-small"></div>
            </div>

            <h1 class="maintenance-title animate__animated animate__fadeInUp animate__delay-1s">Bakım Çalışması</h1>
            <p class="maintenance-text animate__animated animate__fadeInUp animate__delay-1s">Sitemizde şu anda bakım çalışması yapılmaktadır.</p>
            <p class="maintenance-end-time animate__animated animate__fadeInUp animate__delay-1s">Tahmini Bitiş: <span class="badge bg-primary">@Model.EndDateTime.ToString("f")</span></p>

            <div class="countdown-timer row g-3 justify-content-center animate__animated animate__fadeInUp animate__delay-2s" id="countdown" data-endtime="@Model.EndDateTime.ToString("o")">
                <div class="col-6 col-md-3">
                    <div class="time-unit card shadow-sm">
                        <div class="card-body text-center">
                            <span class="time-value d-block" id="days">00</span>
                            <span class="time-label">Gün</span>
                        </div>
                    </div>
                </div>
                <div class="col-6 col-md-3">
                    <div class="time-unit card shadow-sm">
                        <div class="card-body text-center">
                            <span class="time-value d-block" id="hours">00</span>
                            <span class="time-label">Saat</span>
                        </div>
                    </div>
                </div>
                <div class="col-6 col-md-3">
                    <div class="time-unit card shadow-sm">
                        <div class="card-body text-center">
                            <span class="time-value d-block" id="minutes">00</span>
                            <span class="time-label">Dakika</span>
                        </div>
                    </div>
                </div>
                <div class="col-6 col-md-3">
                    <div class="time-unit card shadow-sm">
                        <div class="card-body text-center">
                            <span class="time-value d-block" id="seconds">00</span>
                            <span class="time-label">Saniye</span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="contact-info animate__animated animate__fadeInUp animate__delay-3s">
                <div class="social-links d-flex justify-content-center gap-4">
                    <a href="mailto:tahamucasiroglu@gmail.com" class="social-link" title="E-posta">
                        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path>
                            <polyline points="22,6 12,13 2,6"></polyline>
                        </svg>
                    </a>
                    <a href="tel:+905537356289" class="social-link" title="Telefon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>
                        </svg>
                    </a>
                    <a href="https://github.com/tahamucasiroglu" class="social-link" target="_blank" title="GitHub">
                        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
                        </svg>
                    </a>
                    <a href="https://www.linkedin.com/in/tahamucasiroglu/" class="social-link" target="_blank" title="LinkedIn">
                        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z" />
                        </svg>
                    </a>
                </div>
            </div>
        </div>
    </div>

    <script src="~/Pages/MaintenancePageAsset/main.js" asp-append-version="true"></script>
</body>
</html>


=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC\Views\Shared\_Layout.cshtml ===

[İÇERİK]
﻿<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC.styles.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2025 - TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC\Views\Shared\_ValidationScriptsPartial.cshtml ===

[İÇERİK]
﻿<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC\Views\_ViewImports.cshtml ===

[İÇERİK]
﻿@using TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC\Views\_ViewStart.cshtml ===

[İÇERİK]
﻿@{
    Layout = "_Layout";
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC\appsettings.Development.json ===

[İÇERİK]
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC\appsettings.json ===

[İÇERİK]
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",


  "ApiSettings": {
    "ApiUrl": "http://localhost:5000/api/"
  },

  "LoggerSettings": {
    "LogStatus": true,
    "LogLevel": 0
  },

  "Maintenance": {
    "Enabled": true,
    "EndDateTime": "2025-08-01T15:30:00" // bakım bitiş zamanı (yerel saatinize göre)
  }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC\.config\dotnet-tools.json ===

[İÇERİK]
{
  "version": 1,
  "isRoot": true,
  "tools": {
    "dotnet-ef": {
      "version": "9.0.7",
      "commands": [
        "dotnet-ef"
      ],
      "rollForward": false
    }
  }
}


=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC\Controllers\MaintenanceController.cs ===

[İÇERİK]
﻿using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC.Options;

namespace TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC.Controllers
{
    public class MaintenanceController : Controller
    {
        private readonly MaintenanceOption model;
        public MaintenanceController(IOptions<MaintenanceOption> model)
        {
            this.model = model.Value;
        }


        public IActionResult Index()
        {
            return View(model);
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC\Extensions\LoggerExtension.cs ===

[İÇERİK]
﻿using Serilog;
using Serilog.Events;
using Serilog.Sinks.SystemConsole.Themes;
using System.Text;
using TahaMucasirogluBlog.Domain.Extensions;

namespace TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC.Extensions
{
    public static class LoggerExtension
    {
        static public Serilog.ILogger AddLogger(this WebApplicationBuilder builder)
        {
            bool logStatus = builder.Configuration.GetAppSettingsValue<bool>("LoggerSettings:LogStatus");
            int logLevel = builder.Configuration.GetAppSettingsValue<int>("LoggerSettings:LogLevel");
            builder.Services.AddLogging();
            return builder.AddSeriLoggerToService(logLevel, logStatus);
        }

        static private Serilog.ILogger AddSeriLoggerToService(this WebApplicationBuilder builder, int logLevel, bool LOG_CONNECTION_STATUS)
        {
            if (LOG_CONNECTION_STATUS)
            {
                // Serilog yapılandırması
                Log.Logger = new LoggerConfiguration()
                    .MinimumLevel.Is((LogEventLevel)logLevel)
                    .WriteTo.Async(e => e.Console(theme: SystemConsoleTheme.Colored, outputTemplate: "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level}] {Message:lj}{NewLine}{Exception}")) // Konsola loglama
                    .WriteTo.Async(e => e.File(
                        path: "../../Logs/CVTahaMucasirogluMvcLog-.txt", // Log dosyalarının bulunduğu klasör
                        rollingInterval: RollingInterval.Day, // Günlük loglama
                        rollOnFileSizeLimit: true,
                        fileSizeLimitBytes: 1L * 1024 * 1024 * 1024,//1GB
                        retainedFileCountLimit: 100, //100 adet 1 gb sonrası ne yapıyor bakmadım
                        outputTemplate: "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level}] {Message:lj}{NewLine}{Exception}", // Log formatı
                        encoding: Encoding.UTF8
                    )) // Performans için asenkron dosya loglama
                    .CreateLogger();
                builder.Logging.ClearProviders();
                builder.Logging.AddSerilog(Log.Logger);
                // Serilog'u kullanması için Host yapılandırması
                builder.Host.UseSerilog();
                return Log.Logger;
            }
            else
            {
                return new LoggerConfiguration().MinimumLevel.Is(LogEventLevel.Fatal).CreateLogger(); //kapatılırsa en yüksek levele setleyip olabildiğince boş gönderiyorum tam kapatma nasıl bakmadım ama bunu ileride serilog kullanan kendi servisime çevirerek tam kontrol sağlamak istiyorum.
            }
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC\Extensions\MiddlewaresExtension.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC.Middlewares;

namespace TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC.Extensions
{
    static public class MiddlewaresExtension
    {
        static public void AddMiddlewares(this WebApplication app)
        {
            //app.UseMiddleware<>();
            app.UseMiddleware<MaintenanceMiddleware>();

        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC\Extensions\SingletonExtension.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC.Managers.UrlManager;

namespace TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC.Extensions
{
    static public class SingletonExtension
    {
        public static void AddSingleton(this WebApplicationBuilder builder)
        {
            builder.Services.AddSingleton<IUrlManager, UrlManager>();
            builder.Services.AddHttpContextAccessor();
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC\Managers\UrlManager\IUrlManager.cs ===

[İÇERİK]
﻿namespace TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC.Managers.UrlManager
{
    public interface IUrlManager
    {
        public string BaseUrl { get; }

        public string CheckLastSlash(string url);

        public string Build(string controller, string action, string route);
        public string Build(string controller, string action);
        public string Build(string endpoint);




    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC\Managers\UrlManager\UrlManager.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Domain.Extensions;

namespace TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC.Managers.UrlManager
{
    public class UrlManager : IUrlManager
    {
        public string BaseUrl { get; }
        public UrlManager(IConfiguration configuration)
        {
            string appsettingsUrl = configuration.GetAppSettingsValue("ApiSettings:ApiUrl");
            BaseUrl = appsettingsUrl.EndsWith("/") ? appsettingsUrl : appsettingsUrl + "/";
        }

        public string CheckLastSlash(string url) => url.EndsWith("/") ? url : url + "/";


        public string Build(string controller, string action, string route)
        {
            return BaseUrl + CheckLastSlash(controller) + CheckLastSlash(action) + (route.StartsWith("?") ? route : "?" + route);
        }

        public string Build(string controller, string action)
        {
            return BaseUrl + CheckLastSlash(controller) + CheckLastSlash(action);
        }

        public string Build(string endpoint)
        {
            return BaseUrl + CheckLastSlash(endpoint);
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC\Middlewares\MaintenanceMiddleware.cs ===

[İÇERİK]
﻿using Microsoft.Extensions.Options;
using TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC.Options;

namespace TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC.Middlewares
{
    public class MaintenanceMiddleware
    {
        private readonly RequestDelegate next;
        private readonly MaintenanceOption options;
        private readonly ILogger<MaintenanceMiddleware> logger;

        public MaintenanceMiddleware(
            RequestDelegate next,
            IOptions<MaintenanceOption> options,
            ILogger<MaintenanceMiddleware> logger)
        {
            this.next = next;
            this.options = options.Value;
            this.logger = logger;
        }

        public async Task InvokeAsync(HttpContext context)
        {
            // Sadece bakım modu aktifse ve istek kendisi bakım sayfasına değilse
            if (this.options.Enabled
                && DateTime.Now < this.options.EndDateTime
                && !context.Request.Path.StartsWithSegments("/Maintenance"))
            {
                this.logger.LogInformation(
                    "Bakım modu {EndDateTime} tarihine kadar aktif. {Method} isteği {Path}{QueryString} yolundan, {RemoteIpAddress} IP adresinden bakım sayfasına yönlendiriliyor.",
                    this.options.EndDateTime,
                    context.Request.Method,
                    context.Request.Path,
                    context.Request.QueryString,
                    context.Connection.RemoteIpAddress);

                context.Response.Redirect("/Maintenance");
                return;
            }

            await this.next(context);
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC\Options\MaintenanceOption.cs ===

[İÇERİK]
﻿namespace TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC.Options
{
    public record MaintenanceOption
    {
        public bool Enabled { get; init; }
        public DateTime EndDateTime { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC\Properties\launchSettings.json ===

[İÇERİK]
﻿{
  "$schema": "http://json.schemastore.org/launchsettings.json",
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:4493",
      "sslPort": 44304
    }
  },
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "applicationUrl": "http://localhost:5011",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "https": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "applicationUrl": "https://localhost:7185;http://localhost:5203",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC\TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC.csproj ===

[İÇERİK]
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
	  <!--uyarıları hata göstererek düzgün ilerleme sağlar-->
	  <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\Application\TahaMucasirogluBlog.Application.Managers\TahaMucasirogluBlog.Application.Managers.csproj" />
    <ProjectReference Include="..\..\Application\TahaMucasirogluBlog.Application.Mapper\TahaMucasirogluBlog.Application.Mapper.csproj" />
    <ProjectReference Include="..\..\Application\TahaMucasirogluBlog.Application.Validation\TahaMucasirogluBlog.Application.Validation.csproj" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="bootstrap" Version="5.3.7" />
  </ItemGroup>

</Project>



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC\Views\Home\Index.cshtml ===

[İÇERİK]
﻿@using TahaMucasirogluBlog.Domain.Models.Response
@using TahaMucasirogluBlog.Domain.Return.Base
@model Return<CvResponseModel>
@{
    if (!Model.Status || Model.Data == null)
    {
        Layout = "_ApiErrorLayout";
    }
    else
    {
        Layout = null;
    }
}

@if (Model.Status && Model.Data != null)
{
    <!DOCTYPE html>
    <html lang="tr">
    <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>@Model.Data.Info.FullName - CV</title>
        <meta name="description" content="@Model.Data.Info.FullName - .NET Full Stack Developer CV" />
        <meta name="keywords" content="@Model.Data.Info.FullName, developer, yazılımcı, cv, portfolio" />
        <meta name="image" content=""/>
        <!-- Bootstrap 5 -->
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
        <!-- Font Awesome -->
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
        <!-- Animate.css -->
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
        <!-- AOS (Animate On Scroll) -->
        <link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet">
        <!-- Google Fonts -->
        <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
        <!-- Custom CSS -->
        <link rel="stylesheet" href="~/Pages/HomePageAsset/main.css" asp-append-version="true" />
    </head>
    <body>
        <!-- Preloader -->
        <div id="preloader">
            <div class="loader-container">
                <div class="loader"></div>
                <p class="loader-text">Yükleniyor...</p>
            </div>
        </div>

        <!-- Navigation -->
        <nav class="navbar navbar-expand-lg navbar-dark fixed-top" id="mainNav">
            <div class="container">
                <a class="navbar-brand" href="#home">@Model.Data.Info.FullName</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav ms-auto">
                        <li class="nav-item"><a class="nav-link" href="#home">Ana Sayfa</a></li>
                        <li class="nav-item"><a class="nav-link" href="#skills">Yetenekler</a></li>
                        <li class="nav-item"><a class="nav-link" href="#experience">Deneyimler</a></li>
                        <li class="nav-item"><a class="nav-link" href="#contact">İletişim</a></li>
                    </ul>
                </div>
            </div>
        </nav>

        <!-- Hero Section -->
        <section id="home" class="hero-section">
            <div class="hero-particles"></div>
            <div class="container">
                <div class="row align-items-center min-vh-100">
                    <div class="col-12 text-center">
                        <div class="profile-container" data-aos="zoom-in">
                            <div class="profile-image-wrapper">
                                <img src="~/Images/tahapp.png" alt="@Model.Data.Info.FullName" class="profile-image">
                                <div class="profile-ring"></div>
                                <div class="profile-dots"></div>
                            </div>
                        </div>

                        <h1 class="hero-title" data-aos="fade-up" data-aos-delay="200">
                            @Model.Data.Info.FullName
                        </h1>

                        <p class="hero-subtitle" data-aos="fade-up" data-aos-delay="300">
                            .NET Full Stack Developer
                        </p>

                        <!-- Social Links -->
                        <div class="social-links-hero" data-aos="fade-up" data-aos-delay="400">
                            @foreach (var link in Model.Data.SocialLinks.OrderBy(x => x.DisplayOrder))
                            {
                                if (link.IsVisible)
                                {
                                    <a href="@link.Url" class="social-link-hero" title="@link.Name"
                                       target="@(link.Url.StartsWith("mailto:") || link.Url.StartsWith("tel:") ? "_self" : "_blank")">
                                        <i class="@link.IconClass"></i>
                                    </a>
                                }
                            }
                        </div>

                        <!-- Contact Info -->
                        <div class="contact-info-hero" data-aos="fade-up" data-aos-delay="500">
                            <div class="row justify-content-center g-3">
                                <div class="col-auto">
                                    <div class="contact-item">
                                        <i class="fas fa-map-marker-alt"></i>
                                        <span>@Model.Data.Info.Location</span>
                                    </div>
                                </div>
                                <div class="col-auto">
                                    <div class="contact-item">
                                        <i class="fas fa-envelope"></i>
                                        <span>@Model.Data.Info.Email</span>
                                    </div>
                                </div>
                                <div class="col-auto">
                                    <div class="contact-item">
                                        <i class="fas fa-phone"></i>
                                        <span>@Model.Data.Info.Phone</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="scroll-indicator" data-aos="fade-up" data-aos-delay="600">
                            <a href="#skills" class="scroll-down">
                                <i class="fas fa-chevron-down"></i>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- Skills Section -->
        <section id="skills" class="skills-section py-5">
            <div class="container">
                <h2 class="section-title text-center mb-5" data-aos="fade-up">
                    <span class="title-decoration">Yeteneklerim</span>
                </h2>

                <div class="row g-4">
                    @foreach (var skill in Model.Data.Skills)
                    {
                        <div class="col-lg-6" data-aos="fade-up" data-aos-delay="100">
                            <div class="skill-card">
                                <h3 class="skill-category">
                                    <i class="fas fa-code skill-icon"></i>
                                    @skill.Name
                                </h3>
                                <div class="skill-tags">
                                    @foreach (var subSkill in skill.SubSkills)
                                    {
                                        <span class="skill-tag" data-skill="@subSkill.Name">
                                            @subSkill.Name
                                        </span>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </section>

        <!-- Experience Section -->
        <section id="experience" class="experience-section py-5">
            <div class="container">
                <h2 class="section-title text-center mb-5" data-aos="fade-up">
                    <span class="title-decoration">Deneyimlerim</span>
                </h2>


                <!-- Timeline Progress -->
                <div class="timeline-progress-container" data-aos="fade-up">
                    <div class="timeline-progress">
                        <div class="timeline-progress-bar" id="timelineProgress"></div>
                        <div class="timeline-car" id="timelineCar">
                            <img src="~/Images/car-icon.svg" alt="Progress" />
                        </div>
                    </div>
                </div>

                <!-- Timeline Content -->
                <div class="timeline-container">
                    @{
                        var experiences = Model.Data.Experiences.OrderBy(e => e.StartDate).ToList();
                        var index = 0;
                    }
                    @foreach (var exp in experiences)
                    {
                        <div class="timeline-item @(index % 2 == 0 ? "left" : "right")"
                             data-index="@index"
                             data-aos="fade-@(index % 2 == 0 ? "right" : "left")">
                            <div class="timeline-content">
                                <div class="timeline-badge">
                                    <i class="@GetExperienceIcon(exp.ExperienceType.Name)"></i>
                                </div>
                                <div class="timeline-panel">
                                    <div class="timeline-heading">
                                        <h4 class="timeline-title">@exp.Title</h4>
                                        <p class="timeline-meta">
                                            <small class="text-muted">
                                                <i class="far fa-calendar-alt"></i>
                                                @exp.StartDate.ToString("MMM yyyy") -
                                                @(exp.EndDate?.ToString("MMM yyyy") ?? "Devam Ediyor")
                                            </small>
                                        </p>
                                        <span class="experience-type-badge @GetExperienceClass(exp.ExperienceType.Name)">
                                            @exp.ExperienceType.Name
                                        </span>
                                    </div>
                                    <div class="timeline-body">
                                        <p>@exp.Description</p>
                                        @if (!string.IsNullOrEmpty(exp.Provider))
                                        {
                                            <p class="text-muted"><strong>Kurum:</strong> @exp.Provider</p>
                                        }
                                        @if (!string.IsNullOrEmpty(exp.Reference))
                                        {
                                            <p class="text-muted"><strong>Referans:</strong> @exp.Reference</p>
                                        }
                                        <div class="experience-skills">
                                            @foreach (var tech in exp.SubSkills)
                                            {
                                                <span class="skill-badge">@tech.Name</span>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        index++;
                    }
                </div>
            </div>
        </section>

        <!-- Contact Section -->
        <section id="contact" class="contact-section py-5">
            <div class="container">
                <h2 class="section-title text-center mb-5" data-aos="fade-up">
                    <span class="title-decoration">İletişim</span>
                </h2>

                <div class="row justify-content-center">
                    <div class="col-lg-8">
                        <div class="contact-card" data-aos="zoom-in">
                            <div class="row g-4">
                                <div class="col-md-6">
                                    <div class="contact-info-item">
                                        <i class="fas fa-envelope"></i>
                                        <h5>E-posta</h5>
                                        <p><a href="mailto:@Model.Data.Info.Email">@Model.Data.Info.Email</a></p>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="contact-info-item">
                                        <i class="fas fa-phone"></i>
                                        <h5>Telefon</h5>
                                        <p><a href="tel:+90@Model.Data.Info.Phone.Replace(" ", " ")">@Model.Data.Info.Phone</a></p>
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="contact-info-item">
                                        <i class="fas fa-map-marker-alt"></i>
                                        <h5>Konum</h5>
                                        <p>@Model.Data.Info.Location</p>
                                    </div>
                                </div>
                            </div>

                            <div class="social-links-contact mt-4">
                                @foreach (var link in Model.Data.SocialLinks.OrderBy(x => x.DisplayOrder))
                                {
                                    if (link.IsVisible)
                                    {
                                        <a href="@link.Url" class="social-link-contact" title="@link.Name"
                                           target="@(link.Url.StartsWith("mailto:") || link.Url.StartsWith("tel:") ? "_self" : "_blank")">
                                            <i class="@link.IconClass"></i>
                                        </a>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- Footer -->
        <footer class="footer py-4">
            <div class="container text-center">
                <p class="mb-0">&copy; @DateTime.Now.Year @Model.Data.Info.FullName. Tüm hakları saklıdır.</p>
            </div>
        </footer>

        <!-- Back to Top -->
        <a href="#" class="back-to-top" id="backToTop">
            <i class="fas fa-chevron-up"></i>
        </a>

        <!-- Scripts -->
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
        <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
        <script src="~/Pages/HomePageAsset/main.js" asp-append-version="true"></script>
    </body>
    </html>
}

@functions {
    private string GetExperienceIcon(string type)
    {
        return type switch
        {
            "İş" => "fas fa-briefcase",
            "Staj" => "fas fa-user-graduate",
            "Proje" => "fas fa-project-diagram",
            "Eğitim" => "fas fa-graduation-cap",
            "Gönüllü" => "fas fa-hands-helping",
            _ => "fas fa-star"
        };
    }

    private string GetExperienceClass(string type)
    {
        return type switch
        {
            "İş" => "badge-work",
            "Staj" => "badge-intern",
            "Proje" => "badge-project",
            "Eğitim" => "badge-education",
            "Gönüllü" => "badge-volunteer",
            _ => "badge-default"
        };
    }
}


=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC\Views\Maintenance\Index.cshtml ===

[İÇERİK]
﻿@using TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC.Options
@model MaintenanceOption;
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Taha Mücasiroğlu - Bakım Modu</title>
    <meta name="description" content="Site bakım modunda. En kısa sürede geri döneceğiz." />
    <meta name="keywords" content="Taha Mücasiroğlu, bakım, maintenance" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
    <link rel="stylesheet" href="~/Pages/MaintenancePageAsset/main.css" asp-append-version="true" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
</head>
<body>
    <div class="container-fluid maintenance-container d-flex align-items-center justify-content-center min-vh-100">
        <div class="content-box animate__animated animate__fadeIn">
            <div class="gears-animation animate__animated animate__fadeInDown">
                <div class="gear gear-large"></div>
                <div class="gear gear-medium"></div>
                <div class="gear gear-small"></div>
            </div>

            <h1 class="maintenance-title animate__animated animate__fadeInUp animate__delay-1s">Bakım Çalışması</h1>
            <p class="maintenance-text animate__animated animate__fadeInUp animate__delay-1s">Sitemizde şu anda bakım çalışması yapılmaktadır.</p>
            <p class="maintenance-end-time animate__animated animate__fadeInUp animate__delay-1s">Tahmini Bitiş: <span class="badge bg-primary">@Model.EndDateTime.ToString("f")</span></p>

            <div class="countdown-timer row g-3 justify-content-center animate__animated animate__fadeInUp animate__delay-2s" id="countdown" data-endtime="@Model.EndDateTime.ToString("o")">
                <div class="col-6 col-md-3">
                    <div class="time-unit card shadow-sm">
                        <div class="card-body text-center">
                            <span class="time-value d-block" id="days">00</span>
                            <span class="time-label">Gün</span>
                        </div>
                    </div>
                </div>
                <div class="col-6 col-md-3">
                    <div class="time-unit card shadow-sm">
                        <div class="card-body text-center">
                            <span class="time-value d-block" id="hours">00</span>
                            <span class="time-label">Saat</span>
                        </div>
                    </div>
                </div>
                <div class="col-6 col-md-3">
                    <div class="time-unit card shadow-sm">
                        <div class="card-body text-center">
                            <span class="time-value d-block" id="minutes">00</span>
                            <span class="time-label">Dakika</span>
                        </div>
                    </div>
                </div>
                <div class="col-6 col-md-3">
                    <div class="time-unit card shadow-sm">
                        <div class="card-body text-center">
                            <span class="time-value d-block" id="seconds">00</span>
                            <span class="time-label">Saniye</span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="contact-info animate__animated animate__fadeInUp animate__delay-3s">
                <div class="social-links d-flex justify-content-center gap-4">
                    <a href="mailto:tahamucasiroglu@gmail.com" class="social-link" title="E-posta">
                        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path>
                            <polyline points="22,6 12,13 2,6"></polyline>
                        </svg>
                    </a>
                    <a href="tel:+905537356289" class="social-link" title="Telefon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>
                        </svg>
                    </a>
                    <a href="https://github.com/tahamucasiroglu" class="social-link" target="_blank" title="GitHub">
                        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
                        </svg>
                    </a>
                    <a href="https://www.linkedin.com/in/tahamucasiroglu/" class="social-link" target="_blank" title="LinkedIn">
                        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z" />
                        </svg>
                    </a>
                </div>
            </div>
        </div>
    </div>

    <script src="~/Pages/MaintenancePageAsset/main.js" asp-append-version="true"></script>
</body>
</html>


=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC\Views\Shared\_ApiErrorLayout.cshtml ===

[İÇERİK]
﻿@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Taha Mücasiroğlu - Sunucu Hatası</title>
    <meta name="description" content="Beklenmeyen bir hata oluştu. Lütfen daha sonra tekrar deneyin." />
    <meta name="robots" content="noindex, nofollow" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="~/Pages/ApiErrorLayoutPageAsset/main.css" />
</head>
<body>
    <div class="container">
        <main style="display:none;">
            @RenderBody()
        </main>
    </div>
    <div class="container-fluid error-container d-flex align-items-center justify-content-center min-vh-100">
        <div class="content-box animate__animated animate__fadeIn">
            <div class="error-animation animate__animated animate__fadeInDown">
                <div class="error-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 200">
                        <circle cx="100" cy="100" r="90" fill="none" stroke="#dc3545" stroke-width="8" stroke-dasharray="10 5" opacity="0.3">
                            <animateTransform attributeName="transform" attributeType="XML" type="rotate" from="0 100 100" to="360 100 100" dur="20s" repeatCount="indefinite" />
                        </circle>
                        <circle cx="100" cy="100" r="70" fill="#ffebee" />
                        <path d="M100 130 L100 70" stroke="#dc3545" stroke-width="8" stroke-linecap="round" />
                        <circle cx="100" cy="150" r="5" fill="#dc3545" />
                    </svg>
                    <div class="error-code">500</div>
                </div>
            </div>

            <h1 class="error-title animate__animated animate__fadeInUp animate__delay-1s">Sunucu Hatası</h1>
            <p class="error-message animate__animated animate__fadeInUp animate__delay-1s">
                Üzgünüz, isteğinizi işlerken beklenmeyen bir hata oluştu.
                Teknik ekibimiz bu durumdan haberdar edildi ve sorunu en kısa sürede çözmeye çalışıyoruz.
            </p>

            <div class="error-details animate__animated animate__fadeInUp animate__delay-1s">
                <h2 class="error-details-title">Ne Yapabilirsiniz?</h2>
                <ul class="error-details-list">
                    <li>Birkaç dakika bekleyip sayfayı yenileyin</li>
                    <li>Tarayıcı önbelleğinizi temizleyin</li>
                    <li>Farklı bir tarayıcı veya cihaz deneyin</li>
                    <li>Sorun devam ederse bizimle iletişime geçin</li>
                </ul>
            </div>

            <div class="action-buttons animate__animated animate__fadeInUp animate__delay-2s">
                <a href="/" class="btn btn-custom btn-primary-custom">
                    Ana Sayfaya Git
                </a>
                <button onclick="location.reload()" class="btn btn-custom btn-secondary-custom">
                    Sayfayı Yenile
                </button>
            </div>

            <div class="contact-info animate__animated animate__fadeInUp animate__delay-3s">
                <p class="contact-text">Yardıma mı ihtiyacınız var?</p>
                <div class="social-links">
                    <a href="mailto:tahamucasiroglu@gmail.com" class="social-link" title="E-posta">
                        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path>
                            <polyline points="22,6 12,13 2,6"></polyline>
                        </svg>
                    </a>
                    <a href="https://github.com/tahamucasiroglu" class="social-link" target="_blank" title="GitHub">
                        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
                        </svg>
                    </a>
                    <a href="https://www.linkedin.com/in/tahamucasiroglu/" class="social-link" target="_blank" title="LinkedIn">
                        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z" />
                        </svg>
                    </a>
                </div>
            </div>
        </div>
    </div>
    <script src="~/Pages/ApiErrorLayoutPageAsset/main.js" asp-append-version="true"></script>
</body>
</html>


=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC\Views\Shared\_Layout.cshtml ===

[İÇERİK]
﻿<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC.styles.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2025 - TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC\Views\Shared\_ValidationScriptsPartial.cshtml ===

[İÇERİK]
﻿<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC\Views\_ViewImports.cshtml ===

[İÇERİK]
﻿@using TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC\Views\_ViewStart.cshtml ===

[İÇERİK]
﻿@{
    Layout = "_Layout";
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC\appsettings.Development.json ===

[İÇERİK]
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC\appsettings.json ===

[İÇERİK]
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",


  "ApiSettings": {
    "ApiUrl": "http://localhost:5000/api/"
  },

  "LoggerSettings": {
    "LogStatus": true,
    "LogLevel": 0
  },

  "Maintenance": {
    "Enabled": false,
    "EndDateTime": "2025-08-01T15:30:00" // bakım bitiş zamanı (yerel saatinize göre)
  }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\.config\dotnet-tools.json ===

[İÇERİK]
{
  "version": 1,
  "isRoot": true,
  "tools": {
    "dotnet-ef": {
      "version": "9.0.7",
      "commands": [
        "dotnet-ef"
      ],
      "rollForward": false
    }
  }
}


=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Controllers\HomeController.cs ===

[İÇERİK]
using Microsoft.AspNetCore.Mvc;
using System.Diagnostics;
using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Models;

namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;

        public HomeController(ILogger<HomeController> logger)
        {
            _logger = logger;
        }

        public IActionResult Index()
        {
            return View();
        }

        public IActionResult Privacy()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Controllers\MaintenanceController.cs ===

[İÇERİK]
﻿using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Options;

namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Controllers
{
    public class MaintenanceController : Controller
    {
        private readonly MaintenanceOption model;
        public MaintenanceController(IOptions<MaintenanceOption> model)
        {
            this.model = model.Value;
        }


        public IActionResult Index()
        {
            return View(model);
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Extensions\JsonExtension.cs ===

[İÇERİK]
﻿using Newtonsoft.Json;

namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Extensions
{
    static public class JsonExtension
    {
        static public IMvcBuilder AddNewtonsoftJson(this WebApplicationBuilder builder)
        {
            return builder.Services
            .AddControllers()
            .AddNewtonsoftJson(opts =>
            {
                // Döngüsel referansları yoksay
                opts.SerializerSettings.ReferenceLoopHandling = ReferenceLoopHandling.Ignore;
                // Null değerleri at
                opts.SerializerSettings.NullValueHandling = NullValueHandling.Ignore;
            });
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Extensions\LoggerExtension.cs ===

[İÇERİK]
﻿using Serilog;
using Serilog.Events;
using Serilog.Sinks.SystemConsole.Themes;
using System.Text;
using TahaMucasirogluBlog.Domain.Extensions;

namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Extensions
{
    public static class LoggerExtension
    {
        static public Serilog.ILogger AddLogger(this WebApplicationBuilder builder)
        {
            bool logStatus = builder.Configuration.GetAppSettingsValue<bool>("LoggerSettings:LogStatus");
            int logLevel = builder.Configuration.GetAppSettingsValue<int>("LoggerSettings:LogLevel");
            builder.Services.AddLogging();
            return builder.AddSeriLoggerToService(logLevel, logStatus);
        }

        static private Serilog.ILogger AddSeriLoggerToService(this WebApplicationBuilder builder, int logLevel, bool LOG_CONNECTION_STATUS)
        {
            if (LOG_CONNECTION_STATUS)
            {
                // Serilog yapılandırması
                Log.Logger = new LoggerConfiguration()
                    .MinimumLevel.Is((LogEventLevel)logLevel)
                    .WriteTo.Async(e => e.Console(theme: SystemConsoleTheme.Colored, outputTemplate: "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level}] {Message:lj}{NewLine}{Exception}")) // Konsola loglama
                    .WriteTo.Async(e => e.File(
                        path: "../../Logs/TahaMucasirogluMvcLog-.txt", // Log dosyalarının bulunduğu klasör
                        rollingInterval: RollingInterval.Day, // Günlük loglama
                        rollOnFileSizeLimit: true,
                        fileSizeLimitBytes: 1L * 1024 * 1024 * 1024,//1GB
                        retainedFileCountLimit: 100, //100 adet 1 gb sonrası ne yapıyor bakmadım
                        outputTemplate: "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level}] {Message:lj}{NewLine}{Exception}", // Log formatı
                        encoding: Encoding.UTF8
                    )) // Performans için asenkron dosya loglama
                    .CreateLogger();
                builder.Logging.ClearProviders();
                builder.Logging.AddSerilog(Log.Logger);
                // Serilog'u kullanması için Host yapılandırması
                builder.Host.UseSerilog();
                return Log.Logger;
            }
            else
            {
                return new LoggerConfiguration().MinimumLevel.Is(LogEventLevel.Fatal).CreateLogger(); //kapatılırsa en yüksek levele setleyip olabildiğince boş gönderiyorum tam kapatma nasıl bakmadım ama bunu ileride serilog kullanan kendi servisime çevirerek tam kontrol sağlamak istiyorum.
            }
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Extensions\MapperExtension.cs ===

[İÇERİK]
﻿namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Extensions
{
    static public class MapperExtension
    {
        public static void AddMapperMapProfile(this IServiceCollection services)
        {
           
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Extensions\MiddlewaresExtension.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Middlewares;

namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Extensions
{
    static public class MiddlewaresExtension
    {
        static public void AddMiddlewares(this WebApplication app)
        {
            //app.UseMiddleware<>();
            app.UseMiddleware<ArgumentNullExceptionMiddleware>();
            app.UseMiddleware<MaintenanceMiddleware>();

        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Extensions\ScopedExtension.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Abstract;
using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Concrete;

namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Extensions
{
    static public class ScopedExtension
    {
        public static void AddScoped(this WebApplicationBuilder builder)
        {

            

            builder.Services.AddScoped<IBlogPostApiConnectionService, BlogPostApiConnectionService>();
            builder.Services.AddScoped<IBlogPostTagApiConnectionService, BlogPostTagApiConnectionService>();
            builder.Services.AddScoped<IBlogPostCategoryApiConnectionService, BlogPostCategoryApiConnectionService>();
            builder.Services.AddScoped<ICategoryApiConnectionService, CategoryApiConnectionService>();
            builder.Services.AddScoped<ICommentApiConnectionService, CommentApiConnectionService>();
            builder.Services.AddScoped<ITagApiConnectionService, TagApiConnectionService>();
            builder.Services.AddScoped<IUserApiConnectionService, UserApiConnectionService>();


        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Extensions\SingletonExtension.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Managers.UrlManager;

namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Extensions
{
    static public class SingletonExtension
    {
        public static void AddSingleton(this WebApplicationBuilder builder)
        {
            builder.Services.AddSingleton<IUrlManager, UrlManager>();
            builder.Services.AddHttpContextAccessor();
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Extensions\ValidationExtension.cs ===

[İÇERİK]
﻿using FluentValidation;

namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Extensions
{
    static public class ValidationExtension
    {

        static public void AddFluentValidation(this WebApplicationBuilder builder)
        {
    

        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Managers\UrlManager\IUrlManager.cs ===

[İÇERİK]
﻿namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Managers.UrlManager
{
    public interface IUrlManager
    {
        public string BaseUrl { get; }

        public string CheckLastSlash(string url);

        public string Build(string controller, string action, string route);
        public string Build(string controller, string action);
        public string Build(string endpoint);




    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Managers\UrlManager\UrlManager.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Domain.Extensions;

namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Managers.UrlManager
{
    public class UrlManager : IUrlManager
    {
        public string BaseUrl { get; }
        public UrlManager(IConfiguration configuration)
        {
            string appsettingsUrl = configuration.GetAppSettingsValue("ApiSettings:ApiUrl");
            BaseUrl = appsettingsUrl.EndsWith("/") ? appsettingsUrl : appsettingsUrl + "/";
        }

        public string CheckLastSlash(string url) => url.EndsWith("/") ? url : url + "/";


        public string Build(string controller, string action, string route)
        {
            return BaseUrl + CheckLastSlash(controller) + CheckLastSlash(action) + (route.StartsWith("?") ? route : "?" + route);
        }

        public string Build(string controller, string action)
        {
            return BaseUrl + CheckLastSlash(controller) + CheckLastSlash(action);
        }

        public string Build(string endpoint)
        {
            return BaseUrl + CheckLastSlash(endpoint);
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Middlewares\ArgumentNullExceptionMiddleware.cs ===

[İÇERİK]
﻿namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Middlewares
{
    public class ArgumentNullExceptionMiddleware
    {
        private readonly RequestDelegate next;
        private readonly ILogger<ArgumentNullExceptionMiddleware> logger;

        public ArgumentNullExceptionMiddleware(
            RequestDelegate next,
            ILogger<ArgumentNullExceptionMiddleware> logger)
        {
            this.next = next;
            this.logger = logger;
        }

        public async Task InvokeAsync(HttpContext context)
        {
            try
            {
                await next(context);
            }
            catch (ArgumentNullException ex)
            {
                logger.LogError(ex,
                    "ErrorCode: 8b4a7ae7-efb3-4dd3-a2a7-cc80b1e20ce2 \nArgumentNullException: {Message} \nPath: {Path}",
                    ex.Message,
                    context.Request.Path);

                context.Response.Redirect("/Error/ArgumentNull");
            }
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Middlewares\MaintenanceMiddleware.cs ===

[İÇERİK]
﻿using Microsoft.Extensions.Options;
using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Options;

namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Middlewares
{
    public class MaintenanceMiddleware
    {
        private readonly RequestDelegate next;
        private readonly MaintenanceOption options;
        private readonly ILogger<MaintenanceMiddleware> logger;

        public MaintenanceMiddleware(
            RequestDelegate next,
            IOptions<MaintenanceOption> options,
            ILogger<MaintenanceMiddleware> logger)
        {
            this.next = next;
            this.options = options.Value;
            this.logger = logger;
        }

        public async Task InvokeAsync(HttpContext context)
        {
            // Sadece bakım modu aktifse ve istek kendisi bakım sayfasına değilse
            if (this.options.Enabled
                && DateTime.Now < this.options.EndDateTime
                && !context.Request.Path.StartsWithSegments("/Maintenance"))
            {
                this.logger.LogInformation(
                    "Bakım modu {EndDateTime} tarihine kadar aktif. {Method} isteği {Path}{QueryString} yolundan, {RemoteIpAddress} IP adresinden bakım sayfasına yönlendiriliyor.",
                    this.options.EndDateTime,
                    context.Request.Method,
                    context.Request.Path,
                    context.Request.QueryString,
                    context.Connection.RemoteIpAddress);

                context.Response.Redirect("/Maintenance");
                return;
            }

            await this.next(context);
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Models\ErrorViewModel.cs ===

[İÇERİK]
namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Models
{
    public class ErrorViewModel
    {
        public string? RequestId { get; set; }

        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Options\MaintenanceOption.cs ===

[İÇERİK]
﻿namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Options
{
    public record MaintenanceOption
    {
        public bool Enabled { get; init; }
        public DateTime EndDateTime { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Properties\launchSettings.json ===

[İÇERİK]
﻿{
  "$schema": "http://json.schemastore.org/launchsettings.json",
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:55007",
      "sslPort": 44379
    }
  },
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "applicationUrl": "http://localhost:5012",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "https": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "applicationUrl": "https://localhost:7051;http://localhost:5282",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Services\ApiConnectionService\Abstract\Base\IApiConnectionService.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Domain.Return.Abstract;

namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Abstract.Base
{
    public interface IApiConnectionService
    {
        public string controllerName { get; }
        public string Build(string action);
        public Task<IReturn<T>> GetAsync<T>(string action);
        public Task<IReturn<List<T>>> GetListAsync<T>(string action);
        public Task<IReturn<TResponse>> PostAsync<TResponse, TRequest>(string action, TRequest request);
        public Task<IReturn<TResponse>> PostAsync<TResponse, TRequest>(string action, IReturn<TRequest> request);

    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Services\ApiConnectionService\Abstract\IBlogPostApiConnectionService.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Abstract.Base;

namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Abstract
{
    public interface IBlogPostApiConnectionService : IApiConnectionService
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Services\ApiConnectionService\Abstract\IBlogPostCategoryApiConnectionService.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Abstract.Base;

namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Abstract
{
    public interface IBlogPostCategoryApiConnectionService : IApiConnectionService
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Services\ApiConnectionService\Abstract\IBlogPostTagApiConnectionService.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Abstract.Base;

namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Abstract
{
    public interface IBlogPostTagApiConnectionService : IApiConnectionService
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Services\ApiConnectionService\Abstract\ICategoryApiConnectionService.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Abstract.Base;

namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Abstract
{
    public interface ICategoryApiConnectionService : IApiConnectionService
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Services\ApiConnectionService\Abstract\ICommentApiConnectionService.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Abstract.Base;

namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Abstract
{
    public interface ICommentApiConnectionService : IApiConnectionService
    {

    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Services\ApiConnectionService\Abstract\ITagApiConnectionService.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Abstract.Base;

namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Abstract
{
    public interface ITagApiConnectionService : IApiConnectionService
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Services\ApiConnectionService\Abstract\IUserApiConnectionService.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Abstract.Base;

namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Abstract
{
    public interface IUserApiConnectionService : IApiConnectionService
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Services\ApiConnectionService\Base\ApiConnectionService.cs ===

[İÇERİK]
﻿using Newtonsoft.Json;
using System.Net;
using System.Net.Http.Headers;
using System.Text;
using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Managers.UrlManager;
using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Abstract.Base;
using TahaMucasirogluBlog.Domain.Return.Abstract;
using TahaMucasirogluBlog.Domain.Return.Base;
using TahaMucasirogluBlog.Domain.Return.Concrete;

namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Base
{
    public abstract class ApiConnectionService : IApiConnectionService
    {
        public string controllerName { get; }
        protected readonly IUrlManager urlManager;
        protected readonly HttpClient httpClient;
        protected readonly ILogger<ApiConnectionService> logger;

        public ApiConnectionService(
            string controllerName,
            IUrlManager urlManager,
            HttpClient httpClient,
            ILogger<ApiConnectionService> logger)
        {
            this.controllerName = controllerName;
            this.urlManager = urlManager;
            this.httpClient = httpClient;
            this.logger = logger;
        }

        public string Build(string action) => urlManager.Build(controllerName, action);

        /// <summary>
        /// GET isteği atar ve <see cref="IReturn{T}"/> paketini deserialize eder.
        /// </summary>
        public async Task<IReturn<T>> GetAsync<T>(string action)
        {
            string requestUri = Build(action);
            using HttpResponseMessage response = await httpClient.GetAsync(requestUri);
            if (response.StatusCode == HttpStatusCode.Unauthorized)
            {
                logger.LogWarning("GET isteği yetkisiz: {RequestUri}", requestUri);
                throw new UnauthorizedAccessException("API returned 401 Unauthorized");
            }
            string json = await response.Content.ReadAsStringAsync();
            var result = JsonConvert.DeserializeObject<Return<T>>(json);
            if (result == null)
            {
                logger.LogError("GET isteği sonucu deserialize edilemedi: {RequestUri}", requestUri);
                return new ErrorReturn<T>(message: "Gelen veri parçalanamadı.");
            }
            return result;
        }

        public async Task<IReturn<List<T>>> GetListAsync<T>(string action)
        {
            string requestUri = Build(action);

            using HttpResponseMessage response = await httpClient.GetAsync(requestUri);
            if (response.StatusCode == HttpStatusCode.Unauthorized)
            {
                logger.LogWarning("GET list isteği yetkisiz: {RequestUri}", requestUri);
                throw new UnauthorizedAccessException("API returned 401 Unauthorized");
            }

            string json = await response.Content.ReadAsStringAsync();

            // Deserialize to IReturn<List<T>>
            var result = JsonConvert.DeserializeObject<Return<List<T>>>(json);
            if (result == null)
            {
                logger.LogError("GET list isteği sonucu deserialize edilemedi: {RequestUri}", requestUri);
                return new ErrorReturn<List<T>>(message: "Gelen veri parçalanamadı.");
            }

            return result;
        }

        public async Task<IReturn<TResponse>> PostAsync<TResponse, TRequest>(string action, TRequest request)
        {
            string requestUri = Build(action);
            try
            {
                using HttpClient client = new HttpClient();

                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));



                // JSON içeriği oluşturuluyor
                string json = JsonConvert.SerializeObject(request);
                using StringContent content = new StringContent(json, Encoding.UTF8, "application/json");

                // POST isteği gönderiliyor
                HttpResponseMessage response = await client.PostAsync(requestUri, content);

                // Yetkisiz ise özel durum fırlat
                if (response.StatusCode == HttpStatusCode.Unauthorized)
                {
                    logger.LogWarning("POST isteği yetkisiz: {RequestUri}", requestUri);
                    throw new UnauthorizedAccessException("API returned 401 Unauthorized");
                }

                // Başarılı ise JSON cevabı parse et
                if (response.IsSuccessStatusCode)
                {
                    string jsonString = await response.Content.ReadAsStringAsync();
                    IReturn<TResponse>? responseData = JsonConvert.DeserializeObject<Return<TResponse>>(jsonString);
                    if (responseData == null)
                    {
                        logger.LogError("POST isteği sonucu deserialize edilemedi: {RequestUri}", requestUri);
                        return new ErrorReturn<TResponse>(message: "Gelen veri parçalanamadı.");
                    }
                    return responseData;
                }

                // Başarısız durum için loglama yap
                string errorContent = await response.Content.ReadAsStringAsync();
                logger.LogError("POST isteği başarısız: {RequestUri} - StatusCode: {StatusCode} - İçerik: {Content}", requestUri, response.StatusCode, errorContent);
                return new ErrorReturn<TResponse>(message: $"API isteği başarısız oldu. StatusCode: {response.StatusCode}");
            }
            catch (UnauthorizedAccessException ex)
            {
                throw new UnauthorizedAccessException("Api isteği 401 döndü", ex);
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "POST isteği sırasında bir hata oluştu: {RequestUri}", requestUri);
                return new ErrorReturn<TResponse>(message: "API isteği sırasında bir hata oluştu.");
            }
        }

        public async Task<IReturn<TResponse>> PostAsync<TResponse, TRequest>(string action, IReturn<TRequest> request)

        {
            if (request.Status && request.Data != null)
            {
                TRequest req = request.Data;
                return await PostAsync<TResponse, TRequest>(action, req);
            }
            else
            {
                return new ErrorReturn<TResponse>(message: $"Post isteği veri başarısız olduğu için iptal edildi. {request.Message}");
            }
        }

    






    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Services\ApiConnectionService\Concrete\BlogPostApiConnectionService.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Managers.UrlManager;
using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Abstract;

namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Concrete
{
    public class BlogPostApiConnectionService : Base.ApiConnectionService, IBlogPostApiConnectionService
    {
        public BlogPostApiConnectionService(IUrlManager urlManager, HttpClient httpClient, ILogger<BlogPostApiConnectionService> logger) : base("BlogPost", urlManager, httpClient, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Services\ApiConnectionService\Concrete\BlogPostCategoryApiConnectionService.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Managers.UrlManager;
using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Abstract;
using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Base;

namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Concrete
{
    public class BlogPostCategoryApiConnectionService : Base.ApiConnectionService, IBlogPostCategoryApiConnectionService
    {
        public BlogPostCategoryApiConnectionService(IUrlManager urlManager, HttpClient httpClient, ILogger<BlogPostCategoryApiConnectionService> logger) : base("BlogPostCategory", urlManager, httpClient, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Services\ApiConnectionService\Concrete\BlogPostTagApiConnectionService.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Managers.UrlManager;
using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Abstract;
using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Abstract.Base;
using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Base;

namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Concrete
{
    public class BlogPostTagApiConnectionService : Base.ApiConnectionService, IBlogPostTagApiConnectionService
    {
        public BlogPostTagApiConnectionService(IUrlManager urlManager, HttpClient httpClient, ILogger<BlogPostTagApiConnectionService> logger) : base("BlogPostTag", urlManager, httpClient, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Services\ApiConnectionService\Concrete\CategoryApiConnectionService.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Managers.UrlManager;
using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Abstract;
using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Base;

namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Concrete
{
    public class CategoryApiConnectionService : Base.ApiConnectionService, ICategoryApiConnectionService
    {
        public CategoryApiConnectionService(IUrlManager urlManager, HttpClient httpClient, ILogger<CategoryApiConnectionService> logger) : base("Category", urlManager, httpClient, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Services\ApiConnectionService\Concrete\CommentApiConnectionService.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Managers.UrlManager;
using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Abstract;
using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Base;

namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Concrete
{
    public class CommentApiConnectionService : Base.ApiConnectionService, ICommentApiConnectionService
    {
        public CommentApiConnectionService(IUrlManager urlManager, HttpClient httpClient, ILogger<CommentApiConnectionService> logger) : base("Comment", urlManager, httpClient, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Services\ApiConnectionService\Concrete\TagApiConnectionService.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Managers.UrlManager;
using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Abstract;
using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Base;

namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Concrete
{
    public class TagApiConnectionService : Base.ApiConnectionService, ITagApiConnectionService
    {
        public TagApiConnectionService(IUrlManager urlManager, HttpClient httpClient, ILogger<TagApiConnectionService> logger) : base("Tag", urlManager, httpClient, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Services\ApiConnectionService\Concrete\UserApiConnectionService.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Managers.UrlManager;
using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Abstract;
using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Base;

namespace TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Services.ApiConnectionService.Concrete
{
    public class UserApiConnectionService : Base.ApiConnectionService, IUserApiConnectionService
    {
        public UserApiConnectionService(IUrlManager urlManager, HttpClient httpClient, ILogger<UserApiConnectionService> logger) : base("User", urlManager, httpClient, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\TahaMucasirogluBlog.Client.TahaMucasirogluMVC.csproj ===

[İÇERİK]
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings><!--uyarıları hata göstererek düzgün ilerleme sağlar-->
	  <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
	  
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Mvc.NewtonsoftJson" Version="8.0.11" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\Application\TahaMucasirogluBlog.Application.Managers\TahaMucasirogluBlog.Application.Managers.csproj" />
    <ProjectReference Include="..\..\Application\TahaMucasirogluBlog.Application.Mapper\TahaMucasirogluBlog.Application.Mapper.csproj" />
    <ProjectReference Include="..\..\Application\TahaMucasirogluBlog.Application.Validation\TahaMucasirogluBlog.Application.Validation.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="ViewComponents\" />
  </ItemGroup>

</Project>



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Views\Home\Index.cshtml ===

[İÇERİK]
﻿@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://learn.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Views\Home\Privacy.cshtml ===

[İÇERİK]
﻿@{
    ViewData["Title"] = "Privacy Policy";
}
<h1>@ViewData["Title"]</h1>

<p>Use this page to detail your site's privacy policy.</p>



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Views\Maintenance\Index.cshtml ===

[İÇERİK]
﻿@using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Options
@model MaintenanceOption;
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Taha Mücasiroğlu - Bakım Modu</title>
    <meta name="description" content="Site bakım modunda. En kısa sürede geri döneceğiz." />
    <meta name="keywords" content="Taha Mücasiroğlu, bakım, maintenance" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
    <link rel="stylesheet" href="~/Pages/MaintenancePageAsset/main.css" asp-append-version="true" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
</head>
<body>
    <div class="container-fluid maintenance-container d-flex align-items-center justify-content-center min-vh-100">
        <div class="content-box animate__animated animate__fadeIn">
            <div class="gears-animation animate__animated animate__fadeInDown">
                <div class="gear gear-large"></div>
                <div class="gear gear-medium"></div>
                <div class="gear gear-small"></div>
            </div>

            <h1 class="maintenance-title animate__animated animate__fadeInUp animate__delay-1s">Bakım Çalışması</h1>
            <p class="maintenance-text animate__animated animate__fadeInUp animate__delay-1s">Sitemizde şu anda bakım çalışması yapılmaktadır.</p>
            <p class="maintenance-end-time animate__animated animate__fadeInUp animate__delay-1s">Tahmini Bitiş: <span class="badge bg-primary">@Model.EndDateTime.ToString("f")</span></p>

            <div class="countdown-timer row g-3 justify-content-center animate__animated animate__fadeInUp animate__delay-2s" id="countdown" data-endtime="@Model.EndDateTime.ToString("o")">
                <div class="col-6 col-md-3">
                    <div class="time-unit card shadow-sm">
                        <div class="card-body text-center">
                            <span class="time-value d-block" id="days">00</span>
                            <span class="time-label">Gün</span>
                        </div>
                    </div>
                </div>
                <div class="col-6 col-md-3">
                    <div class="time-unit card shadow-sm">
                        <div class="card-body text-center">
                            <span class="time-value d-block" id="hours">00</span>
                            <span class="time-label">Saat</span>
                        </div>
                    </div>
                </div>
                <div class="col-6 col-md-3">
                    <div class="time-unit card shadow-sm">
                        <div class="card-body text-center">
                            <span class="time-value d-block" id="minutes">00</span>
                            <span class="time-label">Dakika</span>
                        </div>
                    </div>
                </div>
                <div class="col-6 col-md-3">
                    <div class="time-unit card shadow-sm">
                        <div class="card-body text-center">
                            <span class="time-value d-block" id="seconds">00</span>
                            <span class="time-label">Saniye</span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="contact-info animate__animated animate__fadeInUp animate__delay-3s">
                <div class="social-links d-flex justify-content-center gap-4">
                    <a href="mailto:tahamucasiroglu@gmail.com" class="social-link" title="E-posta">
                        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path>
                            <polyline points="22,6 12,13 2,6"></polyline>
                        </svg>
                    </a>
                    <a href="tel:+905537356289" class="social-link" title="Telefon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>
                        </svg>
                    </a>
                    <a href="https://github.com/tahamucasiroglu" class="social-link" target="_blank" title="GitHub">
                        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
                        </svg>
                    </a>
                    <a href="https://www.linkedin.com/in/tahamucasiroglu/" class="social-link" target="_blank" title="LinkedIn">
                        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z" />
                        </svg>
                    </a>
                </div>
            </div>
        </div>
    </div>

    <script src="~/Pages/MaintenancePageAsset/main.js" asp-append-version="true"></script>
</body>
</html>


=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Views\Shared\Error.cshtml ===

[İÇERİK]
﻿@model ErrorViewModel
@{
    ViewData["Title"] = "Error";
}

<h1 class="text-danger">Error.</h1>
<h2 class="text-danger">An error occurred while processing your request.</h2>

@if (Model.ShowRequestId)
{
    <p>
        <strong>Request ID:</strong> <code>@Model.RequestId</code>
    </p>
}

<h3>Development Mode</h3>
<p>
    Swapping to <strong>Development</strong> environment will display more detailed information about the error that occurred.
</p>
<p>
    <strong>The Development environment shouldn't be enabled for deployed applications.</strong>
    It can result in displaying sensitive information from exceptions to end users.
    For local debugging, enable the <strong>Development</strong> environment by setting the <strong>ASPNETCORE_ENVIRONMENT</strong> environment variable to <strong>Development</strong>
    and restarting the app.
</p>



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Views\Shared\_Layout.cshtml ===

[İÇERİK]
﻿<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - TahaMucasirogluBlog.Client.TahaMucasirogluMVC</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/TahaMucasirogluBlog.Client.TahaMucasirogluMVC.styles.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">TahaMucasirogluBlog.Client.TahaMucasirogluMVC</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2025 - TahaMucasirogluBlog.Client.TahaMucasirogluMVC - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Views\Shared\_ValidationScriptsPartial.cshtml ===

[İÇERİK]
﻿<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Views\_ViewImports.cshtml ===

[İÇERİK]
﻿@using TahaMucasirogluBlog.Client.TahaMucasirogluMVC
@using TahaMucasirogluBlog.Client.TahaMucasirogluMVC.Models
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\Views\_ViewStart.cshtml ===

[İÇERİK]
﻿@{
    Layout = "_Layout";
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\appsettings.Development.json ===

[İÇERİK]
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}



=== DOSYA: TahaMucasirogluBlog\Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\appsettings.json ===

[İÇERİK]
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",


  "ApiSettings": {
    "ApiUrl": "http://localhost:5000/api/"
  },

  "LoggerSettings": {
    "LogStatus": true,
    "LogLevel": 0
  },

  "Maintenance": {
    "Enabled": true,
    "EndDateTime": "2025-08-01T15:30:00" // bakım bitiş zamanı (yerel saatinize göre)
  }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Constant\PasswordHashType.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TahaMucasirogluBlog.Domain.Constant
{
    public enum PasswordHashType
    {
        MD5_BASE64,
        MD5_HEX,
        SHA1_BASE64,
        SHA1_HEX,
        SHA256_BASE64,
        SHA256_HEX,
        SHA384_BASE64,
        SHA384_HEX,
        SHA512_BASE64,
        SHA512_HEX
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Constant\TahaMucasirogluBlog.Domain.Constant.csproj ===

[İÇERİK]
﻿<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
	  <!--uyarıları hata göstererek düzgün ilerleme sağlar-->
	  <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
  </PropertyGroup>

</Project>



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Abstract\IAddDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TahaMucasirogluBlog.Domain.DTOs.Abstract
{
    public interface IAddDTO : IDTO
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Abstract\IDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TahaMucasirogluBlog.Domain.DTOs.Abstract
{
    public interface IDTO //marker
    {
        public Guid IslemYapanKullaniciId { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Abstract\IDeleteDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TahaMucasirogluBlog.Domain.DTOs.Abstract
{
    public interface IDeleteDTO : IDTO, IIdDTO
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Abstract\IGetDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TahaMucasirogluBlog.Domain.DTOs.Abstract
{
    public interface IGetDTO : IDTO, IIdDTO
    {
        public bool IsDeleted { get; init; }
        public DateTime InsertedAt { get; init; }
        public DateTime? UpdatedAt { get; init; }
        public DateTime? DeletedAt { get; init; }
        public Guid InsertedBy { get; init; }
        public Guid? UpdatedBy { get; init; }
        public Guid? DeletedBy { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Abstract\IIdDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TahaMucasirogluBlog.Domain.DTOs.Abstract
{
    public interface IIdDTO : IDTO
    {
        public Guid Id { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Abstract\IRequestDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TahaMucasirogluBlog.Domain.DTOs.Abstract
{
    public interface IRequestDTO : IDTO
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Abstract\IResponseDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TahaMucasirogluBlog.Domain.DTOs.Abstract
{
    public interface IResponseDTO : IDTO
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Abstract\IUpdateDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TahaMucasirogluBlog.Domain.DTOs.Abstract
{
    public interface IUpdateDTO : IDTO, IIdDTO
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Base\AddDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Abstract;

namespace TahaMucasirogluBlog.Domain.DTOs.Base
{
    abstract public record AddDTO : IAddDTO
    {
        public Guid IslemYapanKullaniciId { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Base\DTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Abstract;

namespace TahaMucasirogluBlog.Domain.DTOs.Base
{
    abstract public record DTO : IDTO
    {
        public Guid IslemYapanKullaniciId { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Base\DeleteDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Abstract;

namespace TahaMucasirogluBlog.Domain.DTOs.Base
{
    abstract public record DeleteDTO : IDeleteDTO
    {
        public Guid Id { get; init; }
        public Guid IslemYapanKullaniciId { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Base\GetDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Abstract;

namespace TahaMucasirogluBlog.Domain.DTOs.Base
{
    abstract public record GetDTO : IGetDTO
    {
        public Guid Id { get; init; }
        public Guid IslemYapanKullaniciId { get; init; }
        public bool IsDeleted { get; init; }
        public DateTime InsertedAt { get; init; }
        public DateTime? UpdatedAt { get; init; }
        public DateTime? DeletedAt { get; init; }
        public Guid InsertedBy { get; init; }
        public Guid? UpdatedBy { get; init; }
        public Guid? DeletedBy { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Base\IdDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Abstract;

namespace TahaMucasirogluBlog.Domain.DTOs.Base
{
    abstract public record IdDTO : IIdDTO
    {
        public Guid Id { get; init; }
        public Guid IslemYapanKullaniciId { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Base\RequestDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Abstract;

namespace TahaMucasirogluBlog.Domain.DTOs.Base
{
    abstract public record RequestDTO : IRequestDTO
    {

        public Guid IslemYapanKullaniciId { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Base\ResponseDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Abstract;

namespace TahaMucasirogluBlog.Domain.DTOs.Base
{
    public abstract record ResponseDTO : IResponseDTO
    {
        public Guid IslemYapanKullaniciId { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Base\UpdateDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Abstract;

namespace TahaMucasirogluBlog.Domain.DTOs.Base
{
    abstract public record UpdateDTO : IUpdateDTO
    {
        public Guid Id { get; init; }
        public Guid IslemYapanKullaniciId { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\BlogPostCategory\AddBlogPostCategoryDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPostCategory
{
    public record AddBlogPostCategoryDTO : AddDTO
    {
        public Guid PostId { get; init; }
        public Guid CategoryId { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\BlogPostCategory\DeleteBlogPostCategoryDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPostCategory
{
    public record DeleteBlogPostCategoryDTO : DeleteDTO
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\BlogPostCategory\GetBlogPostCategoryDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPostCategory
{
    public record GetBlogPostCategoryDTO : GetDTO
    {
        public Guid PostId { get; init; }
        public Guid CategoryId { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\BlogPostCategory\UpdateBlogPostCategoryDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPostCategory
{
    public record UpdateBlogPostCategoryDTO : UpdateDTO
    {
        public Guid PostId { get; init; }
        public Guid CategoryId { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\BlogPostTag\AddBlogPostTagDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPostTag
{
    public record AddBlogPostTagDTO : AddDTO
    {
        public Guid PostId { get; init; }
        public Guid TagId { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\BlogPostTag\DeleteBlogPostTagDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPostTag
{
    public record DeleteBlogPostTagDTO : DeleteDTO
    {

    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\BlogPostTag\GetBlogPostTagDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPostTag
{
    public record GetBlogPostTagDTO : GetDTO
    {
        public Guid PostId { get; init; }
        public Guid TagId { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\BlogPostTag\UpdateBlogPostTagDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPostTag
{
    public record UpdateBlogPostTagDTO : UpdateDTO
    {
        public Guid PostId { get; init; }
        public Guid TagId { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\BlogPost\AddBlogPostDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPost
{
    public record AddBlogPostDTO : AddDTO
    {
        public Guid AuthorId { get; init; }
        public string Title { get; init; } = string.Empty;
        public string Slug { get; init; } = string.Empty;
        public string Content { get; init; } = string.Empty;
        public long ViewCount { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\BlogPost\DeleteBlogPostDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPost
{
    public record DeleteBlogPostDTO : DeleteDTO
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\BlogPost\GetBlogPostDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPost
{
    public record GetBlogPostDTO : GetDTO
    {
        public Guid AuthorId { get; init; }
        public string Title { get; init; } = string.Empty;
        public string Slug { get; init; } = string.Empty;
        public string Content { get; init; } = string.Empty;
        public long ViewCount { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\BlogPost\UpdateBlogPostDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPost
{
    public record UpdateBlogPostDTO : UpdateDTO
    {
        public Guid AuthorId { get; init; }
        public string Title { get; init; } = string.Empty;
        public string Slug { get; init; } = string.Empty;
        public string Content { get; init; } = string.Empty;
        public long ViewCount { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\Category\AddCategoryDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Category
{
    public record AddCategoryDTO : AddDTO
    {
        public Guid? ParentCategoryId { get; init; }
        public string Name { get; init; } = null!;
        public string Slug { get; init; } = null!;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\Category\DeleteCategoryDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Category
{
    public record DeleteCategoryDTO : DeleteDTO
    {

    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\Category\GetCategoryDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Category
{
    public record GetCategoryDTO : GetDTO
    {
        public Guid? ParentCategoryId { get; init; }
        public string Name { get; init; } = null!;
        public string Slug { get; init; } = null!;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\Category\UpdateCategoryDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Category
{
    public record UpdateCategoryDTO : UpdateDTO
    {
        public Guid? ParentCategoryId { get; init; }
        public string Name { get; init; } = null!;
        public string Slug { get; init; } = null!;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\Comment\AddCommentDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Comment
{
    public record AddCommentDTO : AddDTO
    {
        public Guid PostId { get; init; }
        public Guid? ParentCommentId { get; init; }
        public string Content { get; init; } = null!;
        public bool IsApproved { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\Comment\DeleteCommentDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Comment
{
    public record DeleteCommentDTO : DeleteDTO
    {

    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\Comment\GetCommentDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Comment
{
    public record GetCommentDTO : GetDTO
    {
        public Guid PostId { get; init; }
        public Guid? ParentCommentId { get; init; }
        public string Content { get; init; } = null!;
        public bool IsApproved { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\Comment\UpdateCommentDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Comment
{
    public record UpdateCommentDTO : UpdateDTO
    {
        public Guid PostId { get; init; }
        public Guid? ParentCommentId { get; init; }
        public string Content { get; init; } = null!;
        public bool IsApproved { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\ExperienceTechnology\AddExperienceTechnologyDTO.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceTechnology
{
    public record AddExperienceTechnologyDTO : AddDTO
    {
        public Guid ExperienceId { get; set; }
        public Guid SubSkillId { get; set; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\ExperienceTechnology\DeleteExperienceTechnologyDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceTechnology
{
    public record DeleteExperienceTechnologyDTO : DeleteDTO
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\ExperienceTechnology\GetExperienceTechnologyDTO.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceTechnology
{
    public record GetExperienceTechnologyDTO : GetDTO
    {
        public Guid ExperienceId { get; set; }
        public Guid SubSkillId { get; set; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\ExperienceTechnology\UpdateExperienceTechnologyDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceTechnology
{
    public record UpdateExperienceTechnologyDTO : UpdateDTO
    {
        public Guid ExperienceId { get; set; }
        public Guid SubSkillId { get; set; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\ExperienceType\AddExperienceTypeDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceType
{
    public record AddExperienceTypeDTO : AddDTO
    {
        public string Name { get; init; } = string.Empty;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\ExperienceType\DeleteExperienceTypeDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceType
{
    public record DeleteExperienceTypeDTO : DeleteDTO
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\ExperienceType\GetExperienceTypeDTO.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceType
{
    public record GetExperienceTypeDTO : GetDTO
    {
        public string Name { get; init; } = string.Empty;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\ExperienceType\UpdateExperienceTypeDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceType
{
    public record UpdateExperienceTypeDTO : UpdateDTO
    {
        public string Name { get; init; } = string.Empty;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\Experience\AddExperienceDTO.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Experience
{
    public record AddExperienceDTO : AddDTO
    {
        public Guid ExperienceTypeId { get; init; }
        public string Title { get; init; } = string.Empty;
        public string Provider { get; init; } = string.Empty;
        public DateTime StartDate { get; init; }
        public DateTime? EndDate { get; init; }
        public string Description { get; init; } = string.Empty;
        public string? Reference { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\Experience\DeleteExperienceDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Experience
{
    public record DeleteExperienceDTO : DeleteDTO
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\Experience\GetExperienceDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Experience
{
    public record GetExperienceDTO : GetDTO
    {
        public Guid ExperienceTypeId { get; init; }
        public string Title { get; init; } = string.Empty;
        public string Provider { get; init; } = string.Empty;
        public DateTime StartDate { get; init; }
        public DateTime? EndDate { get; init; }
        public string Description { get; init; } = string.Empty;
        public string? Reference { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\Experience\GetExperienceWithTechnologyAndTypeDTO.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Domain.DTOs.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceTechnology;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceType;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SubSkill;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Experience
{
    public record GetExperienceWithTechnologyAndTypeDTO : GetDTO
    {
        public string Title { get; init; } = string.Empty;
        public string Provider { get; init; } = string.Empty;
        public DateTime StartDate { get; init; }
        public DateTime? EndDate { get; init; }
        public string Description { get; init; } = string.Empty;
        public string? Reference { get; init; }

        public GetExperienceTypeDTO ExperienceType { get; init; } = default!;
        public List<GetSubSkillDTO> SubSkills { get; init; } = new();
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\Experience\UpdateExperienceDTO.cs ===

[İÇERİK]
﻿
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Experience
{
    public record UpdateExperienceDTO : UpdateDTO
    {
        public Guid ExperienceTypeId { get; init; }
        public string Title { get; init; } = string.Empty;
        public string Provider { get; init; } = string.Empty;
        public DateTime StartDate { get; init; }
        public DateTime? EndDate { get; init; }
        public string Description { get; init; } = string.Empty;
        public string? Reference { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\Info\AddInfoDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Info
{
    public record AddInfoDTO : AddDTO
    {
        public string FullName { get; init; } = string.Empty;
        public string Email { get; init; } = string.Empty;
        public string Phone { get; init; } = string.Empty;
        public string Location { get; init; } = string.Empty; // Konum
        public string CoverLetter { get; set; } = string.Empty;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\Info\DeleteInfoDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Info
{
    public record DeleteInfoDTO : DeleteDTO
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\Info\GetInfoDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Info
{
    public record GetInfoDTO : GetDTO
    {
        public string FullName { get; init; } = string.Empty;
        public string Email { get; init; } = string.Empty;
        public string Phone { get; init; } = string.Empty;
        public string Location { get; init; } = string.Empty; // Konum
        public string CoverLetter { get; set; } = string.Empty;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\Info\UpdateInfoDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Info
{
    public record UpdateInfoDTO : UpdateDTO
    {
        public string FullName { get; init; } = string.Empty;
        public string Email { get; init; } = string.Empty;
        public string Phone { get; init; } = string.Empty;
        public string Location { get; init; } = string.Empty; // Konum
        public string CoverLetter { get; set; } = string.Empty;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\Skill\AddSkillDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Skill
{
    public record AddSkillDTO : AddDTO
    {
        public string Name { get; init; } = default!;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\Skill\DeleteSkillDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Skill
{
    public record DeleteSkillDTO : DeleteDTO
    {
        public string Name { get; init; } = default!;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\Skill\GetSkillDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Skill
{
    public record GetSkillDTO : GetDTO
    {
        public string Name { get; init; } = default!;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\Skill\GetSkillWithSubSkillsDTO.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Domain.DTOs.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SubSkill;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Skill
{
    public record GetSkillWithSubSkillsDTO : GetDTO
    {
        public string Name { get; set; } = default!;
        public List<GetSubSkillDTO> SubSkills { get; set; } = new();
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\Skill\UpdateSkillDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Skill
{ 
    public record UpdateSkillDTO : UpdateDTO
    {
        public string Name { get; init; } = default!;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\SocialLink\AddSocialLinkDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SocialLink
{
    public record AddSocialLinkDTO : AddDTO
    {
        public string Name { get; init; } = string.Empty;
        public string Url { get; init; } = string.Empty;
        public string IconClass { get; init; } = string.Empty;
        public int DisplayOrder { get; init; } = 0;
        public bool IsVisible { get; init; } = true;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\SocialLink\DeleteSocialLinkDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SocialLink
{
    public record DeleteSocialLinkDTO : DeleteDTO
    {

    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\SocialLink\GetSocialLinkDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SocialLink
{
    public record GetSocialLinkDTO : GetDTO
    {
        public string Name { get; init; } = string.Empty;
        public string Url { get; init; } = string.Empty;
        public string IconClass { get; init; } = string.Empty;
        public int DisplayOrder { get; init; } = 0;
        public bool IsVisible { get; init; } = true;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\SocialLink\UpdateSocialLinkDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SocialLink
{
    public record UpdateSocialLinkDTO : UpdateDTO
    {
        public string Name { get; init; } = string.Empty;
        public string Url { get; init; } = string.Empty;
        public string IconClass { get; init; } = string.Empty;
        public int DisplayOrder { get; init; } = 0;
        public bool IsVisible { get; init; } = true;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\SubSkill\AddSubSkillDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SubSkill
{
    public record AddSubSkillDTO : AddDTO
    {
        public Guid SkillId { get; init; }
        public string Name { get; init; } = default!; // ".NET", "Teamwork" vb.
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\SubSkill\DeleteSubSkillDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SubSkill
{
    public record DeleteSubSkillDTO : DeleteDTO
    {
        public Guid SkillId { get; init; }
        public string Name { get; init; } = default!; // ".NET", "Teamwork" vb.
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\SubSkill\GetSubSkillDTO.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SubSkill
{
    public record GetSubSkillDTO : GetDTO
    {
        public Guid SkillId { get; init; }
        public string Name { get; init; } = default!; // ".NET", "Teamwork" vb.
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\SubSkill\UpdateSubSkillDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SubSkill
{
    public record UpdateSubSkillDTO : UpdateDTO
    {
        public Guid SkillId { get; init; }
        public string Name { get; init; } = default!; // ".NET", "Teamwork" vb.
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\Tag\AddTagDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Tag
{
    public record AddTagDTO : AddDTO
    {
        public string Name { get; init; } = null!;
        public string Slug { get; init; } = null!;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\Tag\DeleteTagDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Tag
{
    public record DeleteTagDTO : DeleteDTO
    {

    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\Tag\GetTagDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Tag
{
    public record GetTagDTO : GetDTO
    {
        public string Name { get; init; } = null!;
        public string Slug { get; init; } = null!;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\Tag\UpdateTagDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Tag
{
    public record UpdateTagDTO : UpdateDTO
    {
        public string Name { get; init; } = null!;
        public string Slug { get; init; } = null!;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\User\AddUserDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.User
{
    public record AddUserDTO : AddDTO
    {
        public string FirstName { get; init; } = string.Empty;
        public string LastName { get; init; } = string.Empty;
        public string Email { get; init; } = string.Empty;
        public string PasswordHash { get; init; } = string.Empty;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\User\DeleteUserDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.User
{
    public record DeleteUserDTO : DeleteDTO
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\User\GetUserDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.User
{
    public record GetUserDTO : GetDTO
    {
        public string FirstName { get; init; } = string.Empty;
        public string LastName { get; init; } = string.Empty;
        public string Email { get; init; } = string.Empty;
        public string PasswordHash { get; init; } = string.Empty;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Entity\User\UpdateUserDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.User
{
    public record UpdateUserDTO : UpdateDTO
    {
        public string FirstName { get; init; } = string.Empty;
        public string LastName { get; init; } = string.Empty;
        public string Email { get; init; } = string.Empty;
        public string PasswordHash { get; init; } = string.Empty;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Request\HealthCheckRequestDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Request
{
    public record HealthCheckRequestDTO : RequestDTO
    {
        public int Num1 { get; init; }
        public int Num2 { get; init; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Request\IdRequestDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Request
{
    public record IdRequestDTO : IdDTO
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\Concrete\Response\CvResponseDTO.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Base;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Experience;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceTechnology;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceType;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Info;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Skill;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SocialLink;

namespace TahaMucasirogluBlog.Domain.DTOs.Concrete.Response
{
    public record CvResponseDTO : ResponseDTO
    {
        public GetInfoDTO Info { get; set; } = default!;
        public List<GetSocialLinkDTO> SocialLinks { get; set; } = default!;
        public List<GetSkillWithSubSkillsDTO> Skills { get; set; } = new();
        public List<GetExperienceWithTechnologyAndTypeDTO> Experiences { get; set; } = new();
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.DTOs\TahaMucasirogluBlog.Domain.DTOs.csproj ===

[İÇERİK]
﻿<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
	  <!--uyarıları hata göstererek düzgün ilerleme sağlar-->
	  <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
  </PropertyGroup>

</Project>



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Entities\Abstract\IEntity.cs ===

[İÇERİK]
﻿namespace TahaMucasirogluBlog.Domain.Entities.Abstract
{
    public interface IEntity
    {
        public Guid Id { get; set; }
        public bool IsDeleted { get; set; }
        public DateTime InsertedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? DeletedAt { get; set; }
        public Guid InsertedBy { get; set; }
        public Guid? UpdatedBy { get; set; }
        public Guid? DeletedBy { get; set; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Entities\Base\Entity.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Domain.Entities.Abstract;

namespace TahaMucasirogluBlog.Domain.Entities.Base
{
    abstract public class Entity : IEntity
    {
        public Guid Id { get; set; }
        public bool IsDeleted { get; set; }
        public DateTime InsertedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? DeletedAt { get; set; }
        public Guid InsertedBy { get; set; }
        public Guid? UpdatedBy { get; set; }
        public Guid? DeletedBy { get; set; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Entities\Concrete\BlogPost.cs ===

[İÇERİK]
﻿using System.Xml.Linq;
using TahaMucasirogluBlog.Domain.Entities.Base;

namespace TahaMucasirogluBlog.Domain.Entities.Concrete
{
    public class BlogPost : Entity
    {
        public Guid AuthorId { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Slug { get; set; } = string.Empty;
        public string Content { get; set; } = string.Empty;
        public long ViewCount { get; set; }

        public User User { get; set; } = default!;


        public ICollection<BlogPostCategory> PostCategories { get; set; } = new HashSet<BlogPostCategory>();
        public ICollection<BlogPostTag> PostTags { get; set; } = new HashSet<BlogPostTag>();
        public ICollection<Comment> Comments { get; set; } = new HashSet<Comment>();
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Entities\Concrete\BlogPostCategory.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Domain.Entities.Base;

namespace TahaMucasirogluBlog.Domain.Entities.Concrete
{
    public class BlogPostCategory : Entity
    {
        public Guid PostId { get; set; }
        public Guid CategoryId { get; set; }

        public BlogPost BlogPost { get; set; } = default!;
        public Category Category { get; set; } = default!;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Entities\Concrete\BlogPostTag.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Domain.Entities.Base;

namespace TahaMucasirogluBlog.Domain.Entities.Concrete
{
    public class BlogPostTag : Entity
    {
        public Guid PostId { get; set; }
        public Guid TagId { get; set; }

        public BlogPost BlogPost { get; set; } = default!;
        public Tag Tag { get; set; } = default!;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Entities\Concrete\Category.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Base;

namespace TahaMucasirogluBlog.Domain.Entities.Concrete
{
    public class Category : Entity
    {
        public Guid? ParentCategoryId {  get; set; }
        public string Name { get; set; } = null!;
        public string Slug { get; set; } = null!;

        public Category? ParrentCategory { get; set; } = default!;
        
        public ICollection<BlogPostCategory> PostCategories { get; set; } = new HashSet<BlogPostCategory>();
        public ICollection<Category>? SubCategories { get; set; } = new HashSet<Category>();
        
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Entities\Concrete\Comment.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Domain.Entities.Base;

namespace TahaMucasirogluBlog.Domain.Entities.Concrete
{
    public class Comment : Entity
    {
        public Guid PostId { get; set; }
        public Guid? ParentCommentId { get; set; }
        public string Content { get; set; } = null!;
        public bool IsApproved { get; set; }

        public BlogPost BlogPost { get; set; } = default!;
        public Comment? ParentComment { get; set; } = default!;

        public ICollection<Comment>? Replies { get; set; } = new HashSet<Comment>();

    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Entities\Concrete\Experience.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Domain.Entities.Base;

namespace TahaMucasirogluBlog.Domain.Entities.Concrete
{
    public class Experience : Entity
    {
        public Guid ExperienceTypeId { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Provider { get; set; } = string.Empty;
        public DateTime StartDate { get; set; }
        public DateTime? EndDate { get; set; }
        public string Description { get; set; } = string.Empty;
        public string? Reference { get; set; }

        public ExperienceType ExperienceType { get; set; } = default!;
        public ICollection<ExperienceTechnology> ExperienceTechnologies { get; set; } = new HashSet<ExperienceTechnology>();
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Entities\Concrete\ExperienceTechnology.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Domain.Entities.Base;

namespace TahaMucasirogluBlog.Domain.Entities.Concrete
{
    public class ExperienceTechnology : Entity
    {
        public Guid ExperienceId { get; set; }
        public Guid SubSkillId { get; set; }
        public Experience Experience { get; set; } = default!;
        public SubSkill SubSkill { get; set; } = default!;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Entities\Concrete\ExperienceType.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Domain.Entities.Base;

namespace TahaMucasirogluBlog.Domain.Entities.Concrete
{
    public class ExperienceType : Entity
    {
        public string Name { get; set; } = string.Empty;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Entities\Concrete\Info.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Domain.Entities.Base;

namespace TahaMucasirogluBlog.Domain.Entities.Concrete
{
    public class Info : Entity
    {
        public string FullName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Phone { get; set; } = string.Empty;
        public string Location { get; set; } = string.Empty; // Konum
        public string CoverLetter {  get; set; } = string.Empty;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Entities\Concrete\Skill.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Domain.Entities.Base;

namespace TahaMucasirogluBlog.Domain.Entities.Concrete
{
    public class Skill : Entity
    {
        public string Name { get; set; } = default!; // "Backend", "Soft Skill" gibi
        public ICollection<SubSkill> SubSkills { get; set; } = new List<SubSkill>();
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Entities\Concrete\SocialLink.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Base;

namespace TahaMucasirogluBlog.Domain.Entities.Concrete
{
    public class SocialLink : Entity
    {
        public string Name { get; set; } = string.Empty;
        public string Url { get; set; } = string.Empty;
        public string IconClass { get; set; } = string.Empty;
        public int DisplayOrder { get; set; } = 0;
        public bool IsVisible { get; set; } = true;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Entities\Concrete\SubSkill.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Domain.Entities.Base;

namespace TahaMucasirogluBlog.Domain.Entities.Concrete
{
    public class SubSkill : Entity
    {
        public Guid SkillId { get; set; }
        public string Name { get; set; } = default!; // ".NET", "Teamwork" vb.
        public Skill Skill { get; set; } = default!;
        public ICollection<ExperienceTechnology> ExperienceTechnologies { get; set; } = new HashSet<ExperienceTechnology>();

    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Entities\Concrete\Tag.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Domain.Entities.Base;

namespace TahaMucasirogluBlog.Domain.Entities.Concrete
{
    public class Tag : Entity
    {
        public string Name { get; set; } = null!;
        public string Slug { get; set; } = null!;

        public ICollection<BlogPostTag> PostTags { get; set; } = new HashSet<BlogPostTag>();

    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Entities\Concrete\User.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Domain.Entities.Base;

namespace TahaMucasirogluBlog.Domain.Entities.Concrete
{
    public class User : Entity
    {
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string PasswordHash { get; set; } = string.Empty;

        public ICollection<BlogPost> Posts { get; set; } = new HashSet<BlogPost>();
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Entities\TahaMucasirogluBlog.Domain.Entities.csproj ===

[İÇERİK]
﻿<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
	<!--uyarıları hata göstererek düzgün ilerleme sağlar-->
	<TreatWarningsAsErrors>true</TreatWarningsAsErrors>
  </PropertyGroup>

</Project>



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Extensions\DateTimeExtension.cs ===

[İÇERİK]
﻿namespace TahaMucasirogluBlog.Domain.Extensions
{
    static public class DateTimeExtension
    {
        static public bool IsSameCalenderDate(this DateTime date1, DateTime date2) => date1.Date == date2.Date;
        static public bool IsSameCalenderDate(this DateTime? date1, DateTime date2) => date1?.Date == date2.Date;
        static public bool IsInRange(this DateTime date, DateTime startDate, DateTime endDate) => date > startDate && date < endDate;
        static public bool IsInRange(this DateTime? date, DateTime startDate, DateTime endDate) => date > startDate && date < endDate;
        static public bool IsBiggerThan(this DateTime date, DateTime date2) => date.CompareTo(date2) == -1;
        static public bool IsBiggerThan(this DateTime? date, DateTime date2) => date == null ? false : date?.CompareTo(date2) == -1;
        static public bool IsLessThan(this DateTime date, DateTime date2) => date.CompareTo(date2) == 1;
        static public bool IsLessThan(this DateTime? date, DateTime date2) => date == null ? false : date?.CompareTo(date2) == 1;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Extensions\GuidExtension.cs ===

[İÇERİK]
﻿namespace TahaMucasirogluBlog.Domain.Extensions
{
    static public class GuidExtension
    {
        static public Guid ZeroGuid(this Guid value) => Guid.Parse("00000000-0000-0000-0000-000000000000");
        static public Guid OneGuid(this Guid value) => Guid.Parse("11111111-1111-1111-1111-111111111111");
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Extensions\HashingExtensions.cs ===

[İÇERİK]
﻿using System.Security.Cryptography;
using System.Text;

namespace TahaMucasirogluBlog.Domain.Extensions
{
    public static class HashingExtensions
    {
        public static string ToMd5Hex(this string input) => input.ToHashHex(MD5.Create());
        public static string ToMd5Base64(this string input) => input.ToHashBase64(MD5.Create());

        public static string ToSha1Hex(this string input) => input.ToHashHex(SHA1.Create());
        public static string ToSha1Base64(this string input) => input.ToHashBase64(SHA1.Create());

        public static string ToSha256Hex(this string input) => input.ToHashHex(SHA256.Create());
        public static string ToSha256Base64(this string input) => input.ToHashBase64(SHA256.Create());

        public static string ToSha384Hex(this string input) => input.ToHashHex(SHA384.Create());
        public static string ToSha384Base64(this string input) => input.ToHashBase64(SHA384.Create());

        public static string ToSha512Hex(this string input) => input.ToHashHex(SHA512.Create());
        public static string ToSha512Base64(this string input) => input.ToHashBase64(SHA512.Create());

        private static string ToHashHex(this string input, HashAlgorithm algorithm)
        {
            if (string.IsNullOrWhiteSpace(input))
            {
                return "";
            }
            using (algorithm)
            {
                byte[] hashBytes = algorithm.ComputeHash(Encoding.UTF8.GetBytes(input));
                return BitConverter.ToString(hashBytes).Replace("-", "").ToLowerInvariant();
            }
        }

        private static string ToHashBase64(this string input, HashAlgorithm algorithm)
        {
            if (string.IsNullOrWhiteSpace(input))
            {
                return "";
            }
            using (algorithm)
            {
                byte[] hashBytes = algorithm.ComputeHash(Encoding.UTF8.GetBytes(input));
                return Convert.ToBase64String(hashBytes);
            }
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Extensions\IConfigurationExtension.cs ===

[İÇERİK]
﻿using Microsoft.Extensions.Configuration;

namespace TahaMucasirogluBlog.Domain.Extensions
{
    public static class IConfigurationExtension
    {
        /// <summary>
        /// <see cref="bool"/> <see cref="int"/>  <see cref="decimal"/>  <see cref="double" /> gibi <seealso cref="struct"/> değerlerini desteklemesi gerekir.
        /// </summary>
        public static T GetAppSettingsValue<T>(this IConfiguration configuration, string name, IFormatProvider? provider = null)
            where T : struct, IParsable<T>
        {
            string confValue = configuration[name] ?? throw new Exception($"{name}  değeri AppSettings.json içinde bulunamadı");
            try
            {
                return T.Parse(confValue, provider);
            }
            catch (Exception e)
            {

                throw new Exception($"{nameof(IConfigurationExtension)} içindeki {nameof(GetAppSettingsValue)} methodda hata var. Hata = {e.Message}");
            }
        }

        /// <summary>
        /// <see cref="string"/> için özel olan method. String için <seealso cref="ArgumentNullException"/> değerine bakar
        /// </summary>
        public static string GetAppSettingsValue(this IConfiguration configuration, string name, IFormatProvider? provider = null)
        {
            string confValue = configuration[name] ?? throw new Exception($"{name}  değeri AppSettings.json içinde bulunamadı");
            try
            {
                ArgumentNullException.ThrowIfNullOrWhiteSpace(confValue);
                return confValue;
            }
            catch (Exception e)
            {

                throw new Exception($"{nameof(IConfigurationExtension)} içindeki {nameof(GetAppSettingsValue)} methodda hata var. Hata = {e.Message}");
            }
        }

        /// <summary>
        /// Liste için
        /// </summary>
        public static IEnumerable<T> GetAppSettingsList<T>(this IConfiguration configuration, string name, IFormatProvider? provider = null)
            where T : struct, IParsable<T>
        {
            try
            {
                return configuration
                    .GetSection(name)
                    .GetChildren()
                    .Select(x => x.Value == null ? default : T.Parse(x.Value, provider));

            }
            catch (Exception e)
            {

                throw new Exception($"{nameof(IConfigurationExtension)} içindeki {nameof(GetAppSettingsList)} methodda hata var. Hata = {e.Message}");
            }
        }

        /// <summary>
        /// Liste için
        /// </summary>
        public static IEnumerable<string> GetAppSettingsList(this IConfiguration configuration, string name, IFormatProvider? provider = null)
        {
            try
            {
                return configuration
                    .GetSection(name)
                    .GetChildren()
                    .Select(x => x.Value ?? "");

            }
            catch (Exception e)
            {

                throw new Exception($"{nameof(IConfigurationExtension)} içindeki {nameof(GetAppSettingsList)} methodda hata var. Hata = {e.Message}");
            }
        }


        /// <summary>
        /// Dictionary için
        /// </summary>
        public static Dictionary<string, T> GetAppSettingsDict<T>(this IConfiguration configuration, string name, IFormatProvider? provider = null)
            where T : struct, IParsable<T>
        {
            try
            {
                Dictionary<string, T> res = new Dictionary<string, T>();
                configuration
                    .GetSection(name)
                    .GetChildren()
                    .ToList()
                    .ForEach(x => res.Add(x.Key, x.Value == null ? default : T.Parse(x.Value, provider)));

                return res;

            }
            catch (Exception e)
            {

                throw new Exception($"{nameof(IConfigurationExtension)} içindeki {nameof(GetAppSettingsDict)} methodda hata var. Hata = {e.Message}");
            }
        }

        /// <summary>
        /// Dictionary için
        /// </summary>
        public static Dictionary<string, string> GetAppSettingsDict(this IConfiguration configuration, string name, IFormatProvider? provider = null)
        {
            try
            {
                Dictionary<string, string> res = new Dictionary<string, string>();
                configuration
                    .GetSection(name)
                    .GetChildren()
                    .ToList()
                    .ForEach(x => res.Add(x.Key, x.Value ?? ""));
                return res;
            }
            catch (Exception e)
            {

                throw new Exception($"{nameof(IConfigurationExtension)} içindeki {nameof(GetAppSettingsDict)} methodda hata var. Hata = {e.Message}");
            }
        }

        public static string GetCORSNameAppSettings(this IConfiguration configuration) => configuration.GetAppSettingsValue("CORS:CorsName");
        public static string GetCorsURLsAppSettings(this IConfiguration configuration) => configuration.GetAppSettingsValue("CORS:CorsURLs");
        public static bool GetAnyCorsAppSettings(this IConfiguration configuration) => configuration.GetAppSettingsValue<bool>("CORS:AnyCors");
        public static string GetJwtSettingsIssuerAppSettings(this IConfiguration configuration) => configuration.GetAppSettingsValue("JwtSettings:Issuer");
        public static string GetJwtSettingsAudienceAppSettings(this IConfiguration configuration) => configuration.GetAppSettingsValue("JwtSettings:Audience");
        public static string GetJwtSettingsSecurityKeyAppSettings(this IConfiguration configuration) => configuration.GetAppSettingsValue("JwtSettings:SecurityKey");
        public static double GetJwtSettingsClockSkewAppSettings(this IConfiguration configuration) => configuration.GetAppSettingsValue<double>("JwtSettings:ClockSkew");
        public static bool GetJwtSettingsRefreshRefreshTokenAppSettings(this IConfiguration configuration) => configuration.GetAppSettingsValue<bool>("JwtSettings:RefreshRefreshToken");
        public static double GetJwtSettingsAccessTokenExpirationAppSettings(this IConfiguration configuration) => configuration.GetAppSettingsValue<double>("JwtSettings:AccessTokenExpiration");
        public static double GetJwtSettingsRefreshTokenExpirationAppSettings(this IConfiguration configuration) => configuration.GetAppSettingsValue<double>("JwtSettings:RefreshTokenExpiration");
        public static string GetDatabaseSettingsDatabaseLogLevelAppSettings(this IConfiguration configuration) => configuration.GetAppSettingsValue("DatabaseSettings:DatabaseLogLevel");
        public static bool GetDatabaseSettingsTrackQueryAppSettings(this IConfiguration configuration) => configuration.GetAppSettingsValue<bool>("DatabaseSettings:TrackQuery");
        public static bool GetDatabaseSettingsEnableSensitiveDataLoggingAppSettings(this IConfiguration configuration) => configuration.GetAppSettingsValue<bool>("DatabaseSettings:EnableSensitiveDataLogging");
        public static bool GetDatabaseSettingsEnableDetailedErrorsAppSettings(this IConfiguration configuration) => configuration.GetAppSettingsValue<bool>("DatabaseSettings:EnableDetailedErrors");
        public static string GetPasswordSettingsSaltAppSettings(this IConfiguration configuration) => configuration.GetAppSettingsValue("PasswordSettings:Salt");
        public static int GetLogLevelAppSettings(this IConfiguration configuration) => configuration.GetAppSettingsValue<int>("LogLevel");
        public static int GetIpRateLimitFromSecondAppSettings(this IConfiguration configuration) => configuration.GetAppSettingsValue<int>("IpRateLimit");


    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Extensions\IEnumerableExtension.cs ===

[İÇERİK]
﻿namespace TahaMucasirogluBlog.Domain.Extensions
{
    static public class IEnumerableExtension
    {
        static public IEnumerable<T> ChangeAll<T>(this IEnumerable<T> values, Func<T, T> func)
        {
            foreach (T item in values)
            {
                yield return func(item);
            }
        }
        static public IEnumerable<T> ChangeAll<T>(this IEnumerable<T> values, Action<T> action)
        {
            foreach (var item in values)
            {
                action(item);
                yield return item;
            }
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Extensions\IQueryableExtension.cs ===

[İÇERİK]
﻿using Microsoft.EntityFrameworkCore;
using System.Linq.Expressions;

namespace TahaMucasirogluBlog.Domain.Extensions
{
    static public class IQueryableExtension
    {
        static public IQueryable<T> ReverseCondition<T>(this IQueryable<T> query, bool reverse = false)
        {
            if (reverse)
            {
                return query.Reverse();
            }
            else
            {
                return query;
            }
        }


        static public IQueryable<T> WhereCondition<T>(this IQueryable<T> query, Expression<Func<T, bool>>? filter = null)
        {
            if (filter == null)
            {
                return query;
            }
            else
            {
                return query.Where(filter);
            }
        }

        static public int CountCondition<T>(this IQueryable<T> query, Expression<Func<T, bool>>? filter = null)
        {
            if (filter == null)
            {
                return query.Count();
            }
            else
            {
                return query.Count(filter);
            }
        }

        static public Task<int> CountAsyncCondition<T>(this IQueryable<T> query, Expression<Func<T, bool>>? filter = null)
        {
            if (filter == null)
            {
                return query.CountAsync();
            }
            else
            {
                return query.CountAsync(filter);
            }
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Extensions\IntegerExtension.cs ===

[İÇERİK]
﻿namespace TahaMucasirogluBlog.Domain.Extensions
{
    static public class IntegerExtension
    {
        static public string ToSha256Base64(this int num) => num.ToString().ToSha256Base64();
        static public string ToSha256Hex(this int num) => num.ToString().ToSha256Hex();
        static public string ToSha512Base64(this int num) => num.ToString().ToSha512Base64();
        static public string ToSha512Hex(this int num) => num.ToString().ToSha512Hex();
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Extensions\JsonExtension.cs ===

[İÇERİK]
﻿using Newtonsoft.Json;

namespace TahaMucasirogluBlog.Domain.Extensions
{
    static public class JsonExtension
    {
        static public string ToJson<T>(this T obj) => JsonConvert.SerializeObject(obj);
        static public T FromString<T>(this string str) where T : class, new() => JsonConvert.DeserializeObject<T>(str) ?? new T();
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Extensions\ObjectExtension.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace TahaMucasirogluBlog.Domain.Extensions
{
    static public class ObjectExtension
    {
        static public Dictionary<string, string> GetPropertyDict(this Type type)
        {
            Dictionary<string, string> dict = new Dictionary<string, string>();
            foreach (PropertyInfo item in type.GetProperties())
            {
                dict.Add(item.Name, item.PropertyType.ToString());
            }
            return dict;
        }

        static public bool IsNull(this object? obj)
        {
            return obj == null || obj == default;
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Extensions\PropertyBuilderExtension.cs ===

[İÇERİK]
﻿using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace TahaMucasirogluBlog.Domain.Extensions
{
    static public class PropertyBuilderExtension
    {
        #region String

        private static PropertyBuilder<T> StringConfigs<T>(
        this PropertyBuilder<T> propertyBuilder,
        bool isRequired = true,
        int maxLength = 100,
        string columnType = "nvarchar",
        bool unicode = true,
        bool fixedLength = false,
        string? defaultVal = null,
        string? collation = null,
        bool useMax = false)
        {
            if (isRequired)
                propertyBuilder.IsRequired();

            // Uzunluk & sütun tipi tanımı
            string columnTypeDefinition;
            if (useMax)
            {
                columnTypeDefinition = $"{columnType}(max)";
            }
            else
            {
                columnTypeDefinition = $"{columnType}({maxLength})";
                propertyBuilder.HasMaxLength(maxLength);
            }

            propertyBuilder.HasColumnType(columnTypeDefinition)
                           .IsUnicode(unicode);

            if (fixedLength)
                propertyBuilder.IsFixedLength();

            if (!string.IsNullOrWhiteSpace(defaultVal))
                propertyBuilder.HasDefaultValue(defaultVal);

            if (!string.IsNullOrWhiteSpace(collation))
                propertyBuilder.UseCollation(collation);

            return propertyBuilder;
        }

        static public PropertyBuilder<string?> NullableStringConfigs(
            this PropertyBuilder<string?> propertyBuilder,
            int maxLength = 100,
            string columnType = "nvarchar",
            bool unicode = true,
            bool fixedLength = false,
            string? defaultVal = null,
            string? collation = null,
            bool useMax = false)
            => propertyBuilder.StringConfigs(false, maxLength, columnType, unicode, fixedLength, defaultVal, collation, useMax);

        static public PropertyBuilder<string> RequiredStringConfigs(
            this PropertyBuilder<string> propertyBuilder,
            int maxLength = 100,
            string columnType = "nvarchar",
            bool unicode = true,
            bool fixedLength = false,
            string? defaultVal = null,
            string? collation = null,
            bool useMax = false)
            => propertyBuilder.StringConfigs(true, maxLength, columnType, unicode, fixedLength, defaultVal, collation, useMax);

        #endregion

        #region Int
        // Zorunlu tam‑sayı alanlarını tek satırda ayarlar
        private static PropertyBuilder<T> IntConfigs<T>(
            this PropertyBuilder<T> propertyBuilder,
            bool isRequired = true,
            string columnType = "int",      // tinyint, smallint, bigint vb.
            bool isIdentity = false,       // true → Identity (VALUE_GENERATED_ON_ADD)
            int? defaultVal = null)
        {
            if (isIdentity)
                propertyBuilder.ValueGeneratedOnAdd();
            if (isRequired)
                propertyBuilder.IsRequired();

            propertyBuilder.HasColumnType(columnType);

            if (defaultVal is not null)
                propertyBuilder.HasDefaultValue(defaultVal);


            return propertyBuilder;
        }
        public static PropertyBuilder<int> RequiredIntConfigs(
            this PropertyBuilder<int> propertyBuilder,
            string columnType = "int",      // tinyint, smallint, bigint vb.
            bool isIdentity = false,       // true → Identity (VALUE_GENERATED_ON_ADD)
            int? defaultVal = null)
        => propertyBuilder.IntConfigs(true, columnType, isIdentity, defaultVal);


        public static PropertyBuilder<int?> NullableIntConfigs(
            this PropertyBuilder<int?> propertyBuilder,
            string columnType = "int",      // tinyint, smallint, bigint vb.
            bool isIdentity = false,       // true → Identity (VALUE_GENERATED_ON_ADD)
            int? defaultVal = null)
        => propertyBuilder.IntConfigs(false, columnType, isIdentity, defaultVal);
        #endregion

        #region Decimal
        /// <summary>
        /// Zorunlu <c>decimal/numeric</c> sütunu hızlıca yapılandırır.
        /// </summary>
        /// <param name="precision">Toplam basamak (1‑38)</param>
        /// <param name="scale">Ondalık basamak (0‑precision)</param>
        /// <param name="columnType">"decimal" veya "numeric" / "money" / "smallmoney"</param>
        private static PropertyBuilder<T> DecimalConfigs<T>(
            this PropertyBuilder<T> propertyBuilder,
            bool isRequired = true,
            byte precision = 18,
            byte scale = 2,
            string columnType = "decimal",
            decimal? defaultVal = null)
        {
            if (scale > precision)
                throw new ArgumentException("Scale değeri precision değerinden büyük olamaz.", nameof(scale));

            if (columnType.Equals("decimal", StringComparison.OrdinalIgnoreCase) ||
                columnType.Equals("numeric", StringComparison.OrdinalIgnoreCase))
            {
                propertyBuilder.HasColumnType($"{columnType}({precision},{scale})")
                              .HasPrecision(precision, scale);
            }
            else // money, smallmoney ‑ sabit ölçek
            {
                propertyBuilder.HasColumnType(columnType);
            }
            if (isRequired)
                propertyBuilder.IsRequired();

            if (defaultVal is not null)
                propertyBuilder.HasDefaultValue(defaultVal);

            return propertyBuilder;
        }

        static public PropertyBuilder<decimal> RequiredDecimalConfigs(
            this PropertyBuilder<decimal> propertyBuilder,
            byte precision = 18,
            byte scale = 2,
            string columnType = "decimal",
            decimal? defaultVal = null)
            => propertyBuilder.DecimalConfigs(true, precision, scale, columnType, defaultVal);
        static public PropertyBuilder<decimal?> NullableDecimalConfigs(
            this PropertyBuilder<decimal?> propertyBuilder,
            byte precision = 18,
            byte scale = 2,
            string columnType = "decimal",
            decimal? defaultVal = null)
            => propertyBuilder.DecimalConfigs(false, precision, scale, columnType, defaultVal);

        #endregion


        #region Datetime

        /// <summary>
        /// Zorunlu <c>datetime/datetime2</c> sütunu hızlıca yapılandırır.
        /// </summary>
        private static PropertyBuilder<T> DateTimeConfigs<T>(
            this PropertyBuilder<T> propertyBuilder,
            bool isRequired = true,
            string columnType = "smalldatetime", // "datetime", "smalldatetime", "date", "time", "datetimeoffset"
            byte precision = 3,            // 0‑7 (yalnızca datetime2/datetimeoffset)
            bool valueGeneratedOnAdd = false,      // CREATE DATE için
            bool defaultNow = false,        // TRUE → GETDATE() / SYSDATETIME() varsayılanı
            DateTime? defaultVal = null)
        {
            // Column type tanımı
            if (columnType.Equals("datetime2", StringComparison.OrdinalIgnoreCase) ||
                columnType.Equals("datetimeoffset", StringComparison.OrdinalIgnoreCase) ||
                columnType.Equals("time", StringComparison.OrdinalIgnoreCase))
            {
                propertyBuilder.HasColumnType($"{columnType}({precision})");
            }
            else
            {
                propertyBuilder.HasColumnType(columnType); // datetime, date, smalldatetime
            }
            if (isRequired)
                propertyBuilder.IsRequired();

            if (valueGeneratedOnAdd)
                propertyBuilder.ValueGeneratedOnAdd();

            if (defaultNow)
                propertyBuilder.HasDefaultValueSql(columnType.StartsWith("datetimeoffset", StringComparison.OrdinalIgnoreCase)
                                                    ? "SYSDATETIMEOFFSET()"
                                                    : "SYSDATETIME()");
            else if (defaultVal is not null)
                propertyBuilder.HasDefaultValue(defaultVal);

            return propertyBuilder;
        }

        public static PropertyBuilder<DateTime> RequiredDateTimeConfigs(
            this PropertyBuilder<DateTime> propertyBuilder,
            string columnType = "smalldatetime", // "datetime", "smalldatetime", "date", "time", "datetimeoffset"
            byte precision = 3,            // 0‑7 (yalnızca datetime2/datetimeoffset)
            bool valueGeneratedOnAdd = false,      // CREATE DATE için
            bool defaultNow = false,        // TRUE → GETDATE() / SYSDATETIME() varsayılanı
            DateTime? defaultVal = null)
            => propertyBuilder.DateTimeConfigs(true, columnType, precision, valueGeneratedOnAdd, defaultNow, defaultVal);

        public static PropertyBuilder<DateTime?> NullableDateTimeConfigs(
           this PropertyBuilder<DateTime?> propertyBuilder,
           string columnType = "smalldatetime", // "datetime", "smalldatetime", "date", "time", "datetimeoffset"
           byte precision = 3,            // 0‑7 (yalnızca datetime2/datetimeoffset)
           bool valueGeneratedOnAdd = false,      // CREATE DATE için
           bool defaultNow = false,        // TRUE → GETDATE() / SYSDATETIME() varsayılanı
           DateTime? defaultVal = null)
           => propertyBuilder.DateTimeConfigs(false, columnType, precision, valueGeneratedOnAdd, defaultNow, defaultVal);

        #endregion

        #region GUID -----------------------------------------------------------------------------
        /// <summary>
        /// Zorunlu <c>uniqueidentifier</c> (GUID) sütununu yapılandırır.
        /// </summary>
        private static PropertyBuilder<T> GuidConfigs<T>(
            this PropertyBuilder<T> propertyBuilder,
            bool isRequired = true,
            string columnType = "uniqueidentifier",
            bool defaultNewId = false,   // NEWID()
            bool defaultSequential = false,   // NEWSEQUENTIALID()
            bool valueGeneratedOnAdd = false, // EF tarafında ValueGeneratedOnAdd
            Guid? defaultVal = null)
        {
            if (defaultNewId && defaultSequential)
                throw new ArgumentException("defaultNewId ve defaultSequential aynı anda true olamaz.");
            if (isRequired)
                propertyBuilder.IsRequired();

            propertyBuilder.HasColumnType(columnType);

            if (valueGeneratedOnAdd)
                propertyBuilder.ValueGeneratedOnAdd();

            if (defaultNewId)
                propertyBuilder.HasDefaultValueSql("NEWID()");
            else if (defaultSequential)
                propertyBuilder.HasDefaultValueSql("NEWSEQUENTIALID()");
            else if (defaultVal is not null)
                propertyBuilder.HasDefaultValue(defaultVal);

            return propertyBuilder;
        }

        public static PropertyBuilder<Guid> RequiredGuidConfigs(
            this PropertyBuilder<Guid> propertyBuilder,
            string columnType = "uniqueidentifier",
            bool defaultNewId = false,   // NEWID()
            bool defaultSequential = false,   // NEWSEQUENTIALID()
            bool valueGeneratedOnAdd = false, // EF tarafında ValueGeneratedOnAdd
            Guid? defaultVal = null)
            => propertyBuilder.GuidConfigs(true, columnType, defaultNewId, defaultSequential, valueGeneratedOnAdd, defaultVal);

        public static PropertyBuilder<Guid?> NullableGuidConfigs(
            this PropertyBuilder<Guid?> propertyBuilder,
            string columnType = "uniqueidentifier",
            bool defaultNewId = false,   // NEWID()
            bool defaultSequential = false,   // NEWSEQUENTIALID()
            bool valueGeneratedOnAdd = false, // EF tarafında ValueGeneratedOnAdd
            Guid? defaultVal = null)
            => propertyBuilder.GuidConfigs(false, columnType, defaultNewId, defaultSequential, valueGeneratedOnAdd, defaultVal);

        #endregion

        #region BOOL / BIT -----------------------------------------------------------------------
        /// <summary>
        /// Zorunlu <c>bit</c> (bool) sütununu yapılandırır.
        /// </summary>
        private static PropertyBuilder<T> BoolConfigs<T>(
            this PropertyBuilder<T> propertyBuilder,
            bool isRequired = true,
            string columnType = "bit",
            bool? defaultVal = null,
            bool valueGeneratedOnAdd = false)
        {
            if (isRequired)
                propertyBuilder.IsRequired();

            propertyBuilder.HasColumnType(columnType);

            if (valueGeneratedOnAdd)
                propertyBuilder.ValueGeneratedOnAdd();

            if (defaultVal.HasValue)
                propertyBuilder.HasDefaultValue(defaultVal.Value);

            return propertyBuilder;
        }


        static public PropertyBuilder<bool> RequiredBoolConfigs(
            this PropertyBuilder<bool> propertyBuilder,
             bool isRequired = true,
            string columnType = "bit",
            bool? defaultVal = null,
            bool valueGeneratedOnAdd = false)
            => propertyBuilder.BoolConfigs(true, columnType, defaultVal, valueGeneratedOnAdd);
        static public PropertyBuilder<bool?> RequiredBoolConfigs(
           this PropertyBuilder<bool?> propertyBuilder,
            bool isRequired = true,
           string columnType = "bit",
           bool? defaultVal = null,
           bool valueGeneratedOnAdd = false)
           => propertyBuilder.BoolConfigs(false, columnType, defaultVal, valueGeneratedOnAdd);
        #endregion




        public static PropertyBuilder<T> NVarcharMax<T>(
        this PropertyBuilder<T> propertyBuilder,
        bool isRequired = true)
            => propertyBuilder.IsRequired(isRequired).HasColumnType("nvarchar(max)");

        /// <summary>varchar(max) – varsayılan olarak NOT NULL.</summary>
        public static PropertyBuilder<T> VarcharMax<T>(
            this PropertyBuilder<T> propertyBuilder,
            bool isRequired = true)
            => propertyBuilder.IsRequired(isRequired).HasColumnType("varchar(max)");


        /// <summary>ntext – eski tip; geriye dönük gereksinimlerde.</summary>
        public static PropertyBuilder<T> NText<T>(
            this PropertyBuilder<T> propertyBuilder,
            bool isRequired = true)
            => propertyBuilder.IsRequired(isRequired).HasColumnType("ntext");

        /// <summary>text – eski tip ASCII metin.</summary>
        public static PropertyBuilder<T> Text<T>(
            this PropertyBuilder<T> propertyBuilder,
            bool isRequired = true)
            => propertyBuilder.IsRequired(isRequired).HasColumnType("text");

        /// <summary>char(length) veya nchar(length) – sabit uzunluk.</summary>
        public static PropertyBuilder<T> CharFixed<T>(
            this PropertyBuilder<T> propertyBuilder,
            int length,
            bool unicode = false,
            bool isRequired = true)
            => propertyBuilder.IsRequired(isRequired).HasColumnType($"{(unicode ? "nchar" : "char")}({length})");

        /// <summary>varchar(length) veya nvarchar(length) – değişken uzunluk.</summary>
        public static PropertyBuilder<T> VarChar<T>(
            this PropertyBuilder<T> propertyBuilder,
            int length,
            bool unicode = false,
            bool isRequired = true)
            => propertyBuilder.IsRequired(isRequired).HasColumnType($"{(unicode ? "nvarchar" : "varchar")}({length})");
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Extensions\StringExtension.cs ===

[İÇERİK]
﻿using System.Text.RegularExpressions;

namespace TahaMucasirogluBlog.Domain.Extensions
{
    static public class StringExtension
    {
        static public bool IsPhoneNumber(this string? str)
            => !string.IsNullOrEmpty(str) && Regex.IsMatch(str, @"^(\+90|0)?5\d{9}$");

        static public bool IsIdentityNumber(this string? str)
        {
            if (string.IsNullOrWhiteSpace(str) || str.Length != 11)
            {
                return false;
            }

            int[] digits = str.Select(c => (int)char.GetNumericValue(c)).ToArray();

            int sumOddDigits = digits[0] + digits[2] + digits[4] + digits[6] + digits[8];
            int sumEvenDigits = digits[1] + digits[3] + digits[5] + digits[7];

            int tenthDigit = (sumOddDigits * 7 - sumEvenDigits) % 10;
            if (tenthDigit < 0) tenthDigit += 10;

            int eleventhDigit = (sumOddDigits + sumEvenDigits + digits[9]) % 10;

            return digits[9] == tenthDigit && digits[10] == eleventhDigit;
        }

        static public bool IsValidTaxNumber(this string? taxNumber)
        {
            if (string.IsNullOrWhiteSpace(taxNumber) || taxNumber.Length != 10)
            {
                return false;
            }
            int[] digits = taxNumber.Select(c => (int)char.GetNumericValue(c)).ToArray();
            int sum = 0;
            for (int i = 0; i < 9; i++)
            {
                int digit = digits[i];
                int subtracted = digit + 10 - ((i + 1) % 10);
                sum += subtracted % 10;
            }
            int checkDigit = (sum % 10 == 0) ? 0 : (10 - (sum % 10));
            return checkDigit == digits[9];
        }


        static public bool IsOnlyLetter(this string? str, bool nullReturn = false) => string.IsNullOrWhiteSpace(str) ? nullReturn : str.All(char.IsLetter);

        static public bool IsOnlyPunctuation(this string? str, bool nullReturn = false) => string.IsNullOrWhiteSpace(str) ? nullReturn : str.All(char.IsPunctuation);

        static public bool IsOnlyDigits(this string? str, bool nullReturn = false) => string.IsNullOrWhiteSpace(str) ? nullReturn : Regex.IsMatch(str, @"^\d+$");

        static public bool IsLetterOrDigit(this string? str, bool nullReturn = false) => string.IsNullOrWhiteSpace(str) ? nullReturn : str.All(char.IsLetterOrDigit);

        static public bool IsLetterOrPunctuation(this string? str, bool nullReturn = false) => string.IsNullOrWhiteSpace(str) ? nullReturn : str.All(e => char.IsPunctuation(e) && char.IsLetter(e));

        static public bool IsLetterOrDigitOrPunctuation(this string? str, bool nullReturn = false) => string.IsNullOrWhiteSpace(str) ? nullReturn : str.All(e => char.IsPunctuation(e) && char.IsLetterOrDigit(e));

        static public bool IsValidUtf8(this string? str, bool nullReturn = false) => string.IsNullOrWhiteSpace(str) ? nullReturn : Regex.IsMatch(str, @"^[\p{L}\p{N}]+$");

        static public bool IsSha512Hash(this string? str, bool nullReturn = false) => string.IsNullOrWhiteSpace(str) ? nullReturn : !string.IsNullOrEmpty(str) && str.Length == 128 && Regex.IsMatch(str, @"^[a-fA-F0-9]+$");

        public static string TurkishToEnglish(this string src)
        {
            if (string.IsNullOrWhiteSpace(src)) return "";

            // string.Create: yalnızca hedef string’i oluşturur, ara buffer yok
            return string.Create(src.Length, src, (span, s) =>
            {
                for (int i = 0; i < s.Length; i++)
                {
                    // C# 8 switch ifadesiyle tek satırda eşleme
                    span[i] = s[i] switch
                    {
                        'ç' => 'c',
                        'Ç' => 'C',
                        'ğ' => 'g',
                        'Ğ' => 'G',
                        'ı' => 'i',
                        'İ' => 'I',
                        'ş' => 's',
                        'Ş' => 'S',
                        'ö' => 'o',
                        'Ö' => 'O',
                        'ü' => 'u',
                        'Ü' => 'U',
                        char x => x
                    };
                }
            });
        }




        /// <summary>
        /// HomeController gelen string değerini Home olarak verir. <see cref="nameof"/> ile kullanım için nameof(HomeController).SetControllerName() gibi
        /// </summary>
        public static string SetControllerName(this string controllerName)
        {
            return controllerName.Replace("Controller", "");
        }

        /// <summary>
        /// HomeController gelen string değerini Home olarak verir. <see cref="nameof"/> ile kullanım için nameof(HomeController).SetControllerNameToUrlName() gibi
        /// </summary>
        public static string SetControllerNameToUrlName(this string controllerName)
        {
            return controllerName.Replace("Controller", "");
        }


        /// <summary>
        /// HomeController gelen string değerini HomeFilterButton olarak verir. <see cref="nameof"/> ile kullanım için nameof(HomeController).SetControllerNameToFilterButtonName() gibi
        /// </summary>
        public static string SetControllerNameToFilterButtonName(this string controllerName)
        {
            return controllerName.Replace("Controller", "FilterButton");
        }

        /// <summary>
        /// HomeController gelen string değerini HomeTable olarak verir. <see cref="nameof"/> ile kullanım için nameof(HomeController).SetControllerNameToTableName() gibi
        /// </summary>
        public static string SetControllerNameToTableName(this string controllerName)
        {
            return controllerName.Replace("Controller", "Table");
        }


        /// <summary>
        /// HomeController gelen string değerini HomePageSizeSelect olarak verir. <see cref="nameof"/> ile kullanım için nameof(HomeController).SetControllerNameToPageSizeSelectName() gibi
        /// </summary>
        public static string SetControllerNameToPageSizeSelectName(this string controllerName)
        {
            return controllerName.Replace("Controller", "PageSizeSelect");
        }



        /// <summary>
        /// UrunSearchModalView gelen yazıyı vw_UrunSearchModal yapar.
        /// </summary>
        public static string SetViewName(this string viewName)
        {
            return $"vw_{viewName.Replace("View", "")}";
        }
        /// <summary>
        /// UrunSearchModalView gelen yazıyı vw_UrunSearchModal yapar.
        /// </summary>
        public static string SetViewName(this object viewObj)
        {
            if (viewObj == null) return "";
            return SetViewName(viewObj.GetType().Name);
        }


        public static string SetContextName(this string viewName)
        {
            return viewName.Replace("Context", "");
        }


        public static string SetContextName(this object viewObj)
        {
            if (viewObj == null) return "";
            return SetContextName(viewObj.GetType().Name);
        }




        private static readonly char[] TurkishVowels = new[]
        {
            'a','e','ı','i','o','ö','u','ü',
            'A','E','I','İ','O','Ö','U','Ü'
        };

        private static readonly char[] FrontVowels = new[] { 'e', 'i', 'ö', 'ü', 'E', 'İ', 'Ö', 'Ü' };
        private static readonly char[] BackVowels = new[] { 'a', 'ı', 'o', 'u', 'A', 'I', 'O', 'U' };

        /// <summary>
        /// Türkçe sözcükler için çoğul ekini otomatik ekleyen yardımcı metotlar.
        /// Türkçe bir kelimeyi uygun "-ler" veya "-lar" ekini ekleyerek çoğullaştırır.
        /// Kelime zaten "ler" veya "lar" ile bitiyorsa değiştirmez.
        /// </summary>
        /// <param name="word">Tekil veya zaten çoğul formdaki kelime.</param>
        /// <returns>Çoğul formdaki kelime.</returns>
        public static string ToPluralTurkish(this string word)
        {
            if (string.IsNullOrWhiteSpace(word))
                return word;

            // Zaten "lar" veya "ler" ile bitiyorsa dokunma
            var lower = word.ToLowerInvariant();
            if (lower.EndsWith("lar") || lower.EndsWith("ler"))
                return word;

            // Kelimenin son ünlüsünü bul
            char lastVowel = '\0';
            for (int i = word.Length - 1; i >= 0; i--)
            {
                var c = word[i];
                if (TurkishVowels.Contains(c))
                {
                    lastVowel = c;
                    break;
                }
            }

            // Önce ünlü uyumuna göre ek seç: front vs back
            string suffix = FrontVowels.Contains(lastVowel)
                ? "ler"
                : "lar";

            return word + suffix;
        }



        public static string? ToLowerFirstChar(this string? input)
        {
            if (string.IsNullOrEmpty(input) || char.IsLower(input[0]))
                return input;
            string res = char.ToLower(input[0]).ToString();
            res = res.TurkishToEnglish();
            return res + input.Substring(1);
        }




    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Extensions\TahaMucasirogluBlog.Domain.Extensions.csproj ===

[İÇERİK]
﻿<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
	  <!--uyarıları hata göstererek düzgün ilerleme sağlar-->
	  <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="8.0.11" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Abstractions" Version="8.0.11" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Analyzers" Version="8.0.11" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="8.0.11">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="8.0.11" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="8.0.11">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.Extensions.Configuration" Version="9.0.7" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
  </ItemGroup>

</Project>



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Models\Entity\GetExperienceTypeModel.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TahaMucasirogluBlog.Domain.Models.Entity
{
    public class GetExperienceTypeModel : Model
    {
        public string Name { get; set; } = string.Empty;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Models\Entity\GetExperienceWithTechnologyAndTypeModel.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TahaMucasirogluBlog.Domain.Models.Entity
{
    public class GetExperienceWithTechnologyAndTypeModel : Model
    {
        public string Title { get; set; } = string.Empty;
        public string Provider { get; set; } = string.Empty;
        public DateTime StartDate { get; set; }
        public DateTime? EndDate { get; set; }
        public string Description { get; set; } = string.Empty;
        public string? Reference { get; set; }

        public GetExperienceTypeModel ExperienceType { get; set; } = default!;
        public List<GetSubSkillModel> SubSkills { get; set; } = new();
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Models\Entity\GetInfoModel.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TahaMucasirogluBlog.Domain.Models.Entity
{
    public class GetInfoModel : Model
    {
        public string FullName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Phone { get; set; } = string.Empty;
        public string Location { get; set; } = string.Empty; // Konum
        public string CoverLetter { get; set; } = string.Empty;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Models\Entity\GetSkillWithSubSkillsModel.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TahaMucasirogluBlog.Domain.Models.Entity
{
    public class GetSkillWithSubSkillsModel : Model
    {
        public string Name { get; set; } = default!;
        public List<GetSubSkillModel> SubSkills { get; set; } = new();
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Models\Entity\GetSocialLinkModel.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TahaMucasirogluBlog.Domain.Models.Entity
{
    public class GetSocialLinkModel : Model
    {
        public string Name { get; init; } = string.Empty;
        public string Url { get; init; } = string.Empty;
        public string IconClass { get; init; } = string.Empty;
        public int DisplayOrder { get; init; } = 0;
        public bool IsVisible { get; init; } = true;
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Models\Entity\GetSubSkillModel.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TahaMucasirogluBlog.Domain.Models.Entity
{
    public class GetSubSkillModel : Model
    {
        public Guid SkillId { get; set; }
        public string Name { get; set; } = default!; // ".NET", "Teamwork" vb.
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Models\IModel.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TahaMucasirogluBlog.Domain.Models
{
    public interface IModel
    {
        public Guid Id { get; set; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Models\Model.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TahaMucasirogluBlog.Domain.Models
{
    public abstract class Model : IModel
    {
        public Guid Id { get; set; }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Models\Response\CvResponseModel.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Domain.Models.Entity;

namespace TahaMucasirogluBlog.Domain.Models.Response
{
    public class CvResponseModel : Model
    {
        public GetInfoModel Info { get; set; } = default!;
        public List<GetSocialLinkModel> SocialLinks { get; set; } = new();
        public List<GetSkillWithSubSkillsModel> Skills { get; set; } = new();
        public List<GetExperienceWithTechnologyAndTypeModel> Experiences { get; set; } = new();
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Models\TahaMucasirogluBlog.Domain.Models.csproj ===

[İÇERİK]
﻿<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
	  <!--uyarıları hata göstererek düzgün ilerleme sağlar-->
	  <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
  </PropertyGroup>

</Project>



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Return\Abstract\IReturn.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TahaMucasirogluBlog.Domain.Return.Abstract
{
    public interface IReturn
    {
        public bool Status { get; init; }
        public string? Message { get; init; }
        public Exception? Exception { get; init; }
    }


    public interface IReturn<T> : IReturn
    {
        public T? Data { get; init; }

        public bool IsDataNull();
        public bool IsDataNotNull();
        public bool CheckStatusAndData();

    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Return\Base\Return.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Return.Abstract;

namespace TahaMucasirogluBlog.Domain.Return.Base
{
    public record Return : IReturn
    {
        public Return(bool status, string? message, Exception? exception)
        {
            Status = status;
            Message = message;
            Exception = exception;
        }
        public bool Status { get; init; }
        public string? Message { get; init; }
        public Exception? Exception { get; init; }

    }
    public record Return<T> : Return, IReturn<T>
    {
        public Return(bool status, T? data, string? message, Exception? exception) : base(status, message, exception)
        {
            Data = data;
        }
        public T? Data { get; init; }

        public bool CheckStatusAndData() => Status && IsDataNotNull();

        public bool IsDataNotNull() => Data != null;
        public bool IsDataNull() => Data == null;

    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Return\Concrete\ErrorReturn.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Return.Base;

namespace TahaMucasirogluBlog.Domain.Return.Concrete
{
    public record ErrorReturn : Base.Return
    {
        public ErrorReturn(string? message, Exception? exception) : base(false, message, exception) { }
        public ErrorReturn(Exception? exception) : base(false, null, exception) { }
        public ErrorReturn(string? message) : base(false, message, null) { }
        public ErrorReturn() : base(false, null, null) { }
    }

    public record ErrorReturn<T> : Return<T>
    {
        public ErrorReturn(T? data, string? message, Exception? exception) : base(false, data, message, exception) { }
        public ErrorReturn(string? message, Exception? exception) : base(false, default, message, exception) { }
        public ErrorReturn(T? data, Exception? exception) : base(false, data, null, exception) { }
        public ErrorReturn(T? data, string? message) : base(false, data, message, null) { }
        public ErrorReturn(T? data) : base(false, data, null, null) { }
        public ErrorReturn(Exception? exception) : base(false, default, null, exception) { }
        public ErrorReturn(string? message) : base(false, default, message, null) { }
        public ErrorReturn() : base(false, default, null, null) { }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Return\Concrete\SuccessReturn.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Return.Base;

namespace TahaMucasirogluBlog.Domain.Return.Concrete
{
    public record SuccessReturn : Base.Return
    {
        public SuccessReturn(string? message, Exception? exception) : base(true, message, exception) { }
        public SuccessReturn(Exception? exception) : base(true, null, exception) { }
        public SuccessReturn(string? message) : base(true, message, null) { }
        public SuccessReturn() : base(true, null, null) { }

    }

    public record SuccessReturn<T> : Return<T>
    {
        public SuccessReturn(T? data, string? message, Exception? exception) : base(true, data, message, exception) { }
        public SuccessReturn(string? message, Exception? exception) : base(true, default, message, exception) { }
        public SuccessReturn(T? data, Exception? exception) : base(true, data, null, exception) { }
        public SuccessReturn(T? data, string? message) : base(true, data, message, null) { }
        public SuccessReturn(T? data) : base(true, data, null, null) { }
        public SuccessReturn(Exception? exception) : base(true, default, null, exception) { }
        public SuccessReturn(string? message) : base(true, default, message, null) { }
        public SuccessReturn() : base(true, default, null, null) { }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Return\Constant\NullDataSuccess.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Return.Abstract;
using TahaMucasirogluBlog.Domain.Return.Concrete;

namespace TahaMucasirogluBlog.Domain.Return.Constant
{
    /// <summary>
    /// Hata olmayan filtrenin sonucunda veri bulunamazsa bu hata döner
    /// </summary>
    public sealed record NullDataSuccess<T> : SuccessReturn<T>
    {
        public NullDataSuccess(
            string message = "Data Boş",
            Exception? exception = null)
            : base(message, exception ?? new ArgumentNullException(message)) { }
    }




    /// <summary>
    /// Veri dönmesi gerekirken veri gelmezse bu hata döner
    /// </summary>
    public sealed record NullDataError<T> : ErrorReturn<T>
    {
        public NullDataError(
            string message = "Data Boş",
            Exception? exception = null)
            : base(message, exception ?? new ArgumentNullException(message)) { }

        public NullDataError(IReturn ret)
            : base(ret.Message, ret.Exception ?? new ArgumentNullException(ret.Message)) { }
    }
}



=== DOSYA: TahaMucasirogluBlog\Domain\TahaMucasirogluBlog.Domain.Return\TahaMucasirogluBlog.Domain.Return.csproj ===

[İÇERİK]
﻿<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
	  <!--uyarıları hata göstererek düzgün ilerleme sağlar-->
	  <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
  </PropertyGroup>

</Project>



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Configuration\Base\EntityConfiguration.cs ===

[İÇERİK]
﻿using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using TahaMucasirogluBlog.Domain.Entities.Abstract;
using TahaMucasirogluBlog.Domain.Extensions;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Configuration.Base
{
    /// <summary>
    /// MainEntity tipi için özel ek yapılandırmalar.
    /// Şu anlık ek yapılandırmaya gerek duyulmadı ancak genişletilebilir.
    /// </summary>
    public class EntityConfiguration<TEntity> : IEntityTypeConfiguration<TEntity>
        where TEntity : class, IEntity
    {
        public virtual void Configure(EntityTypeBuilder<TEntity> builder)
        {
            //Sorguda sık kullanılanları index yapma

            builder.HasIndex(e => e.Id);
            builder.HasIndex(e => e.IsDeleted);
            builder.HasIndex(e => new { e.Id, e.IsDeleted });

            // Birincil anahtar tanımı
            builder.HasKey(e => e.Id);

            // Kayıt tarihi (otomatik, zorunlu)
            builder.Property(e => e.InsertedAt)
                   .RequiredDateTimeConfigs(columnType: "datetime2", precision: 0, defaultNow: true);

            // Güncelleme tarihi (opsiyonel)
            builder.Property(e => e.UpdatedAt)
                   .NullableDateTimeConfigs(columnType: "datetime2", precision: 0);

            // Silinme tarihi (opsiyonel, yumuşak silme için)
            builder.Property(e => e.DeletedAt)
                   .NullableDateTimeConfigs(columnType: "datetime2", precision: 0);

            // Kaydı oluşturan kullanıcı (zorunlu)
            builder.Property(e => e.InsertedBy)
                   .RequiredGuidConfigs();

            // Kaydı güncelleyen kullanıcı (opsiyonel)
            builder.Property(e => e.UpdatedBy)
                   .NullableGuidConfigs();

            // Kaydı silen kullanıcı (opsiyonel)
            builder.Property(e => e.DeletedBy)
                   .NullableGuidConfigs();

            // Yumuşak silme bayrağı
            builder.Property(e => e.IsDeleted)
                   .RequiredBoolConfigs(defaultVal: false);

            // Global filtre: Silinmiş kayıtları sorgulardan otomatik çıkarır
            builder.HasQueryFilter(e => !e.IsDeleted);
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Configuration\BlogPostCategoryConfiguration.cs ===

[İÇERİK]
﻿using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Configuration.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Configuration
{
    public class BlogPostCategoryConfiguration : EntityConfiguration<BlogPostCategory>
    {
        public override void Configure(EntityTypeBuilder<BlogPostCategory> builder)
        {
            base.Configure(builder);


            // Composite primary key: PostId + CategoryId
            builder.HasKey(pc => new { pc.PostId, pc.CategoryId });
            builder.HasKey(pc =>  pc.CategoryId );
            builder.HasKey(pc => pc.PostId );

            // Foreign key PostId → BlogPost
            builder.HasOne(pc => pc.BlogPost)
                .WithMany(bp => bp.PostCategories)
                .HasForeignKey(pc => pc.PostId)
                .OnDelete(DeleteBehavior.NoAction);

            // Foreign key CategoryId → Category
            builder.HasOne(pc => pc.Category)
                .WithMany(c => c.PostCategories)
                .HasForeignKey(pc => pc.CategoryId)
                .OnDelete(DeleteBehavior.NoAction);
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Configuration\BlogPostConfiguration.cs ===

[İÇERİK]
﻿using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Configuration.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Configuration
{
    public class BlogPostConfiguration : EntityConfiguration<BlogPost>
    {
        public override void Configure(EntityTypeBuilder<BlogPost> builder)
        {
            base.Configure(builder);

            // AuthorId -> User ilişkisi
            builder.Property(bp => bp.AuthorId)
                .IsRequired();

            builder.HasOne(bp => bp.User)
                .WithMany()
                .HasForeignKey(bp => bp.AuthorId)
                .OnDelete(DeleteBehavior.Cascade);

            // Başlık
            builder.Property(bp => bp.Title)
                .IsRequired()
                .HasMaxLength(200);

            // Slug
            builder.Property(bp => bp.Slug)
                .IsRequired()
                .HasMaxLength(200);
            builder.HasIndex(bp => bp.Slug).IsUnique();

            // İçerik
            builder.Property(bp => bp.Content)
                .IsRequired();

            // ViewCount
            builder.Property(bp => bp.ViewCount)
                .HasDefaultValue(0L)
                .IsRequired();

            builder
                .HasOne(e => e.User)
                .WithMany(e => e.Posts)
                .OnDelete(DeleteBehavior.NoAction)
                .HasForeignKey(e => e.AuthorId);

        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Configuration\BlogPostTagConfiguration.cs ===

[İÇERİK]
﻿using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Configuration.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Configuration
{
    public class BlogPostTagConfiguration : EntityConfiguration<BlogPostTag>
    {
        public override void Configure(EntityTypeBuilder<BlogPostTag> builder)
        {
            base.Configure(builder);


            // Composite primary key
            builder.HasKey(pt => new { pt.PostId, pt.TagId });
            builder.HasKey(pt =>  pt.TagId);
            builder.HasKey(pt => pt.PostId);

            // Foreign key: PostId → BlogPost
            builder.HasOne(pt => pt.BlogPost)
                   .WithMany(bp => bp.PostTags)
                   .HasForeignKey(pt => pt.PostId)
                   .OnDelete(DeleteBehavior.NoAction);

            // Foreign key: TagId → Tag
            builder.HasOne(pt => pt.Tag)
                   .WithMany(t => t.PostTags)
                   .HasForeignKey(pt => pt.TagId)
                   .OnDelete(DeleteBehavior.NoAction);
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Configuration\CategoryConfiguration.cs ===

[İÇERİK]
﻿using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Configuration.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Configuration
{
    public class CategoryConfiguration : EntityConfiguration<Category>
    {
        public override void Configure(EntityTypeBuilder<Category> builder)
        {
            base.Configure(builder);


            // ParentCategoryId → Category (self-referencing), nullable FK
            builder.HasOne(c => c.ParrentCategory)
                   .WithMany(pc => pc.SubCategories) // alt kategoriler koleksiyonu
                   .HasForeignKey(c => c.ParentCategoryId)
                   .OnDelete(DeleteBehavior.NoAction);

            // Name: zorunlu, max 100 karakter
            builder.Property(c => c.Name)
                   .IsRequired()
                   .HasMaxLength(100);

            // Slug: zorunlu, max 100 karakter, unique index
            builder.Property(c => c.Slug)
                   .IsRequired()
                   .HasMaxLength(100);
            builder.HasIndex(c => c.Slug)
                   .IsUnique();

            // Navigasyon için koleksiyon adı (Category sınıfında eklenmeli)
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Configuration\CommentConfiguration.cs ===

[İÇERİK]
﻿using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Configuration.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Configuration
{
    public class CommentConfiguration : EntityConfiguration<Comment>
    {
        public override void Configure(EntityTypeBuilder<Comment> builder)
        {
            base.Configure(builder);


            // PostId → BlogPost (zorunlu ilişki, gönderi silinince yorumlar silinsin)
            builder.HasOne(c => c.BlogPost)
                   .WithMany(bp => bp.Comments)
                   .HasForeignKey(c => c.PostId)
                   .OnDelete(DeleteBehavior.NoAction);

            // ParentComment (self-referencing) – nullable, cevaplar için
            builder.HasOne(c => c.ParentComment)
                   .WithMany(pc => pc.Replies)
                   .HasForeignKey(c => c.ParentCommentId)
                   .OnDelete(DeleteBehavior.NoAction); // silince alt yorumları bozmamak için

            // Content: zorunlu alan
            builder.Property(c => c.Content)
                   .IsRequired();

            // IsApproved: zorunlu boolean
            builder.Property(c => c.IsApproved)
                   .IsRequired();
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Configuration\ExperienceConfiguration.cs ===

[İÇERİK]
﻿using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Configuration.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Configuration
{
    public class ExperienceConfiguration : EntityConfiguration<Experience>
    {
        public override void Configure(EntityTypeBuilder<Experience> builder)
        {
            base.Configure(builder);

            builder
                .HasOne(e => e.ExperienceType)
                .WithMany()
                .HasForeignKey(e => e.ExperienceTypeId)
                .OnDelete(DeleteBehavior.NoAction);

            builder.Property(e => e.Title)
                   .IsRequired()
                   .HasMaxLength(200);

            builder.Property(e => e.Provider)
                   .IsRequired()
                   .HasMaxLength(200);

            builder.Property(e => e.Description)
                   .IsRequired();

            builder.Property(e => e.Reference)
                   .HasMaxLength(200)
                   .IsRequired(false);

            builder.HasIndex(e => e.ExperienceTypeId);
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Configuration\ExperienceTechnologyConfiguration.cs ===

[İÇERİK]
﻿using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Configuration.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Configuration
{
    public class ExperienceTechnologyConfiguration : EntityConfiguration<ExperienceTechnology>
    {
        public override void Configure(EntityTypeBuilder<ExperienceTechnology> builder)
        {
            base.Configure(builder);

            builder
                .HasOne(et => et.Experience)
                .WithMany(e => e.ExperienceTechnologies)
                .HasForeignKey(et => et.ExperienceId)
                .OnDelete(DeleteBehavior.NoAction);

            builder
                .HasOne(et => et.SubSkill)
                .WithMany()
                .HasForeignKey(et => et.SubSkillId)
                .OnDelete(DeleteBehavior.NoAction);

            builder.HasIndex(et => new { et.ExperienceId, et.SubSkillId }).IsUnique();
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Configuration\ExperienceType.cs ===

[İÇERİK]
﻿using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Configuration.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Configuration
{
    public class ExperienceTypeConfiguration : EntityConfiguration<ExperienceType>
    {
        public override void Configure(EntityTypeBuilder<ExperienceType> builder)
        {
            base.Configure(builder);

            builder.Property(et => et.Name)
                   .IsRequired()
                   .HasMaxLength(100);

            builder.HasIndex(et => et.Name).IsUnique();
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Configuration\InfoConfiguration.cs ===

[İÇERİK]
﻿using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Configuration.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Configuration
{
    public class InfoConfiguration : EntityConfiguration<Info>
    {
        public override void Configure(EntityTypeBuilder<Info> builder)
        {
            base.Configure(builder);

            builder.Property(i => i.FullName)
                   .IsRequired()
                   .HasMaxLength(200);

            builder.Property(i => i.Email)
                   .IsRequired()
                   .HasMaxLength(200);

            builder.Property(i => i.Phone)
                   .IsRequired()
                   .HasMaxLength(20);

            builder.Property(i => i.Location)
                   .IsRequired()
                   .HasMaxLength(200);

        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Configuration\SkillConfiguration.cs ===

[İÇERİK]
﻿using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Configuration.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Configuration
{
    public class SkillConfiguration : EntityConfiguration<Skill>
    {
        public override void Configure(EntityTypeBuilder<Skill> builder)
        {
            base.Configure(builder);

            builder.Property(s => s.Name)
                   .IsRequired()
                   .HasMaxLength(100);

            builder.HasIndex(s => s.Name).IsUnique();
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Configuration\SocialLinkConfiguration.cs ===

[İÇERİK]
﻿using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Base;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Configuration.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Configuration
{
    public class SocialLinkConfiguration : EntityConfiguration<SocialLink>
    {
        public override void Configure(EntityTypeBuilder<SocialLink> builder)
        {
            base.Configure(builder);

            builder.Property(e => e.Name)
                 .IsRequired()
                 .HasMaxLength(100);

            builder.Property(e => e.Url)
                  .IsRequired()
                  .HasMaxLength(500);

            builder.Property(e => e.IconClass)
                  .HasMaxLength(100);

            builder.Property(e => e.DisplayOrder)
                  .HasDefaultValue(0);

            builder.Property(e => e.IsVisible)
                  .HasDefaultValue(true);
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Configuration\SubSkillConfiguration.cs ===

[İÇERİK]
﻿using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Configuration.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Configuration
{
    public class SubSkillConfiguration : EntityConfiguration<SubSkill>
    {
        public override void Configure(EntityTypeBuilder<SubSkill> builder)
        {
            base.Configure(builder);

            builder.Property(ss => ss.Name)
                   .IsRequired()
                   .HasMaxLength(100);

            builder
                .HasOne<Skill>()
                .WithMany(s => s.SubSkills)
                .HasForeignKey(ss => ss.SkillId)
                .OnDelete(DeleteBehavior.NoAction);

            builder.HasIndex(ss => new { ss.SkillId, ss.Name }).IsUnique();
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Configuration\TagConfiguration.cs ===

[İÇERİK]
﻿using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Configuration.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Configuration
{
    public class TagConfiguration : EntityConfiguration<Tag>
    {
        public override void Configure(EntityTypeBuilder<Tag> builder)
        {
            base.Configure(builder);


            // Name: zorunlu, maksimum 100 karakter
            builder.Property(t => t.Name)
                   .IsRequired()
                   .HasMaxLength(100);

            // Slug: zorunlu, maksimum 100 karakter
            builder.Property(t => t.Slug)
                   .IsRequired()
                   .HasMaxLength(100);

            // Slug benzersiz indeks
            builder.HasIndex(t => t.Slug)
                   .IsUnique();

            // İlişki: Tag → BlogPostTag (join entity)
            builder.HasMany(t => t.PostTags)
                   .WithOne(pt => pt.Tag)
                   .HasForeignKey(pt => pt.TagId)
                   .OnDelete(DeleteBehavior.NoAction);
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Configuration\UserConfiguration.cs ===

[İÇERİK]
﻿using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Configuration.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Configuration
{
    public class UserConfiguration : EntityConfiguration<User>
    {
        public override void Configure(EntityTypeBuilder<User> builder)
        {
            base.Configure(builder);


            // FirstName alanı: zorunlu, max 50 karakter
            builder.Property(u => u.FirstName)
                   .IsRequired()
                   .HasMaxLength(50);

            // LastName alanı: zorunlu, max 50 karakter
            builder.Property(u => u.LastName)
                   .IsRequired()
                   .HasMaxLength(50);

            // Email alanı: zorunlu, max 200 karakter ve benzersiz index
            builder.Property(u => u.Email)
                   .IsRequired()
                   .HasMaxLength(200);
            builder.HasIndex(u => u.Email)
                   .IsUnique();

            // PasswordHash: zorunlu, uygun uzunlukta
            builder.Property(u => u.PasswordHash)
                   .IsRequired()
                   .HasMaxLength(200);

            // Navigasyon: User → BlogPost (1‑n)
            builder.HasMany(u => u.Posts)
                   .WithOne(bp => bp.User)
                   .HasForeignKey(bp => bp.AuthorId)
                   .OnDelete(DeleteBehavior.NoAction);

        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Context\TahaMucasirogluBlogContext.cs ===

[İÇERİK]
﻿using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Configuration;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Context
{
    public class TahaMucasirogluBlogContext : DbContext
    {
        public DbSet<BlogPost> BlogPosts { get; set; }
        public DbSet<BlogPostCategory> BlogPostsCategory { get; set; }
        public DbSet<BlogPostTag> BlogPostsTag { get; set; }
        public DbSet<Category> Categories { get; set; }
        public DbSet<Comment>Comments { get; set; }
        public DbSet<Tag> Tags { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<SocialLink> SocialLinks { get; set; }

        

        public DbSet<Experience> Experiences { get; set; }
        public DbSet<ExperienceTechnology> ExperienceTechnologies { get; set; }
        public DbSet<ExperienceType> ExperienceTypes { get; set; }
        public DbSet<Info> Infos { get; set; }
        public DbSet<Skill> Skills { get; set; }
        public DbSet<SubSkill> SubSkills { get; set; }



        public TahaMucasirogluBlogContext(DbContextOptions<TahaMucasirogluBlogContext> opt) : base(opt) { }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            modelBuilder.HasDefaultSchema("dbo");
            modelBuilder.ApplyConfiguration(new BlogPostCategoryConfiguration());
            modelBuilder.ApplyConfiguration(new BlogPostConfiguration());
            modelBuilder.ApplyConfiguration(new BlogPostTagConfiguration());
            modelBuilder.ApplyConfiguration(new CategoryConfiguration());
            modelBuilder.ApplyConfiguration(new CommentConfiguration());
            modelBuilder.ApplyConfiguration(new TagConfiguration());
            modelBuilder.ApplyConfiguration(new UserConfiguration());
            modelBuilder.ApplyConfiguration(new SocialLinkConfiguration());

            modelBuilder.ApplyConfiguration(new ExperienceConfiguration());
            modelBuilder.ApplyConfiguration(new ExperienceTechnologyConfiguration());
            modelBuilder.ApplyConfiguration(new ExperienceTypeConfiguration());
            modelBuilder.ApplyConfiguration(new InfoConfiguration());
            modelBuilder.ApplyConfiguration(new SkillConfiguration());
            modelBuilder.ApplyConfiguration(new SubSkillConfiguration());
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Migrations\20250712182652_AutoMig_2025_7_12_21_26_47.Designer.cs ===

[İÇERİK]
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TahaMucasirogluBlog.Infrastructure.Repository.Context;

#nullable disable

namespace TahaMucasirogluBlog.Infrastructure.Repository.Migrations
{
    [DbContext(typeof(TahaMucasirogluBlogContext))]
    [Migration("20250712182652_AutoMig_2025_7_12_21_26_47")]
    partial class AutoMig_2025_7_12_21_26_47
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("Id", "IsDeleted");

                    b.ToTable("BlogPosts", "dbo");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.BlogPostCategory", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PostId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Id", "IsDeleted");

                    b.ToTable("BlogPostsCategory", "dbo");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.BlogPostTag", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PostId");

                    b.HasIndex("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("TagId");

                    b.HasIndex("Id", "IsDeleted");

                    b.ToTable("BlogPostsTag", "dbo");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ParentCategoryId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("Id", "IsDeleted");

                    b.ToTable("Categories", "dbo");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("Id", "IsDeleted");

                    b.ToTable("Comments", "dbo");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExperienceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Reference")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExperienceTypeId");

                    b.HasIndex("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Id", "IsDeleted");

                    b.ToTable("Experiences", "dbo");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.ExperienceTechnology", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExperienceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("SubSkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubSkillId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("SubSkillId");

                    b.HasIndex("SubSkillId1");

                    b.HasIndex("ExperienceId", "SubSkillId")
                        .IsUnique();

                    b.HasIndex("Id", "IsDeleted");

                    b.ToTable("ExperienceTechnologies", "dbo");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.ExperienceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Id", "IsDeleted");

                    b.ToTable("ExperienceTypes", "dbo");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.Info", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Id", "IsDeleted");

                    b.ToTable("Infos", "dbo");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Id", "IsDeleted");

                    b.ToTable("Skills", "dbo");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.SocialLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Id", "IsDeleted");

                    b.ToTable("SocialLinks", "dbo");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.SubSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("SkillId1");

                    b.HasIndex("Id", "IsDeleted");

                    b.HasIndex("SkillId", "Name")
                        .IsUnique();

                    b.ToTable("SubSkills", "dbo");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("Id", "IsDeleted");

                    b.ToTable("Tags", "dbo");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Id", "IsDeleted");

                    b.ToTable("Users", "dbo");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.BlogPost", b =>
                {
                    b.HasOne("TahaMucasirogluBlog.Domain.Entities.Concrete.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.BlogPostCategory", b =>
                {
                    b.HasOne("TahaMucasirogluBlog.Domain.Entities.Concrete.Category", "Category")
                        .WithMany("PostCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TahaMucasirogluBlog.Domain.Entities.Concrete.BlogPost", "BlogPost")
                        .WithMany("PostCategories")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BlogPost");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.BlogPostTag", b =>
                {
                    b.HasOne("TahaMucasirogluBlog.Domain.Entities.Concrete.BlogPost", "BlogPost")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TahaMucasirogluBlog.Domain.Entities.Concrete.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BlogPost");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.Category", b =>
                {
                    b.HasOne("TahaMucasirogluBlog.Domain.Entities.Concrete.Category", "ParrentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParrentCategory");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.Comment", b =>
                {
                    b.HasOne("TahaMucasirogluBlog.Domain.Entities.Concrete.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TahaMucasirogluBlog.Domain.Entities.Concrete.BlogPost", "BlogPost")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BlogPost");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.Experience", b =>
                {
                    b.HasOne("TahaMucasirogluBlog.Domain.Entities.Concrete.ExperienceType", "ExperienceType")
                        .WithMany()
                        .HasForeignKey("ExperienceTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ExperienceType");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.ExperienceTechnology", b =>
                {
                    b.HasOne("TahaMucasirogluBlog.Domain.Entities.Concrete.Experience", "Experience")
                        .WithMany("ExperienceTechnologies")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TahaMucasirogluBlog.Domain.Entities.Concrete.SubSkill", "SubSkill")
                        .WithMany()
                        .HasForeignKey("SubSkillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TahaMucasirogluBlog.Domain.Entities.Concrete.SubSkill", null)
                        .WithMany("ExperienceTechnologies")
                        .HasForeignKey("SubSkillId1");

                    b.Navigation("Experience");

                    b.Navigation("SubSkill");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.SubSkill", b =>
                {
                    b.HasOne("TahaMucasirogluBlog.Domain.Entities.Concrete.Skill", null)
                        .WithMany("SubSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TahaMucasirogluBlog.Domain.Entities.Concrete.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.BlogPost", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostCategories");

                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.Category", b =>
                {
                    b.Navigation("PostCategories");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.Experience", b =>
                {
                    b.Navigation("ExperienceTechnologies");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.Skill", b =>
                {
                    b.Navigation("SubSkills");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.SubSkill", b =>
                {
                    b.Navigation("ExperienceTechnologies");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.Tag", b =>
                {
                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.User", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Migrations\20250712182652_AutoMig_2025_7_12_21_26_47.cs ===

[İÇERİK]
﻿using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace TahaMucasirogluBlog.Infrastructure.Repository.Migrations
{
    /// <inheritdoc />
    public partial class AutoMig_2025_7_12_21_26_47 : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.EnsureSchema(
                name: "dbo");

            migrationBuilder.CreateTable(
                name: "Categories",
                schema: "dbo",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ParentCategoryId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Slug = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                    InsertedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: false, defaultValueSql: "SYSDATETIME()"),
                    UpdatedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: true),
                    InsertedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UpdatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Categories", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Categories_Categories_ParentCategoryId",
                        column: x => x.ParentCategoryId,
                        principalSchema: "dbo",
                        principalTable: "Categories",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "ExperienceTypes",
                schema: "dbo",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                    InsertedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: false, defaultValueSql: "SYSDATETIME()"),
                    UpdatedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: true),
                    InsertedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UpdatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExperienceTypes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Infos",
                schema: "dbo",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FullName = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Email = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Phone = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    Location = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                    InsertedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: false, defaultValueSql: "SYSDATETIME()"),
                    UpdatedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: true),
                    InsertedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UpdatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Infos", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Skills",
                schema: "dbo",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                    InsertedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: false, defaultValueSql: "SYSDATETIME()"),
                    UpdatedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: true),
                    InsertedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UpdatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Skills", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SocialLinks",
                schema: "dbo",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Url = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false),
                    IconClass = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    DisplayOrder = table.Column<int>(type: "int", nullable: false, defaultValue: 0),
                    IsVisible = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                    InsertedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: false, defaultValueSql: "SYSDATETIME()"),
                    UpdatedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: true),
                    InsertedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UpdatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SocialLinks", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Tags",
                schema: "dbo",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    Slug = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                    InsertedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: false, defaultValueSql: "SYSDATETIME()"),
                    UpdatedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: true),
                    InsertedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UpdatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Tags", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Users",
                schema: "dbo",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FirstName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    LastName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Email = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    PasswordHash = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                    InsertedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: false, defaultValueSql: "SYSDATETIME()"),
                    UpdatedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: true),
                    InsertedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UpdatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Users", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Experiences",
                schema: "dbo",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ExperienceTypeId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Title = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Provider = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    StartDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    EndDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Reference = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                    InsertedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: false, defaultValueSql: "SYSDATETIME()"),
                    UpdatedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: true),
                    InsertedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UpdatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Experiences", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Experiences_ExperienceTypes_ExperienceTypeId",
                        column: x => x.ExperienceTypeId,
                        principalSchema: "dbo",
                        principalTable: "ExperienceTypes",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "SubSkills",
                schema: "dbo",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SkillId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    SkillId1 = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                    InsertedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: false, defaultValueSql: "SYSDATETIME()"),
                    UpdatedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: true),
                    InsertedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UpdatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SubSkills", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SubSkills_Skills_SkillId",
                        column: x => x.SkillId,
                        principalSchema: "dbo",
                        principalTable: "Skills",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_SubSkills_Skills_SkillId1",
                        column: x => x.SkillId1,
                        principalSchema: "dbo",
                        principalTable: "Skills",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "BlogPosts",
                schema: "dbo",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    AuthorId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Title = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Slug = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    Content = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ViewCount = table.Column<long>(type: "bigint", nullable: false, defaultValue: 0L),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                    InsertedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: false, defaultValueSql: "SYSDATETIME()"),
                    UpdatedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: true),
                    InsertedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UpdatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BlogPosts", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BlogPosts_Users_AuthorId",
                        column: x => x.AuthorId,
                        principalSchema: "dbo",
                        principalTable: "Users",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "ExperienceTechnologies",
                schema: "dbo",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ExperienceId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SubSkillId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    SubSkillId1 = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                    InsertedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: false, defaultValueSql: "SYSDATETIME()"),
                    UpdatedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: true),
                    InsertedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UpdatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExperienceTechnologies", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ExperienceTechnologies_Experiences_ExperienceId",
                        column: x => x.ExperienceId,
                        principalSchema: "dbo",
                        principalTable: "Experiences",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_ExperienceTechnologies_SubSkills_SubSkillId",
                        column: x => x.SubSkillId,
                        principalSchema: "dbo",
                        principalTable: "SubSkills",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_ExperienceTechnologies_SubSkills_SubSkillId1",
                        column: x => x.SubSkillId1,
                        principalSchema: "dbo",
                        principalTable: "SubSkills",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "BlogPostsCategory",
                schema: "dbo",
                columns: table => new
                {
                    PostId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CategoryId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                    InsertedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: false, defaultValueSql: "SYSDATETIME()"),
                    UpdatedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: true),
                    InsertedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UpdatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BlogPostsCategory", x => x.PostId);
                    table.ForeignKey(
                        name: "FK_BlogPostsCategory_BlogPosts_PostId",
                        column: x => x.PostId,
                        principalSchema: "dbo",
                        principalTable: "BlogPosts",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_BlogPostsCategory_Categories_CategoryId",
                        column: x => x.CategoryId,
                        principalSchema: "dbo",
                        principalTable: "Categories",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "BlogPostsTag",
                schema: "dbo",
                columns: table => new
                {
                    PostId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    TagId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                    InsertedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: false, defaultValueSql: "SYSDATETIME()"),
                    UpdatedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: true),
                    InsertedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UpdatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BlogPostsTag", x => x.PostId);
                    table.ForeignKey(
                        name: "FK_BlogPostsTag_BlogPosts_PostId",
                        column: x => x.PostId,
                        principalSchema: "dbo",
                        principalTable: "BlogPosts",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_BlogPostsTag_Tags_TagId",
                        column: x => x.TagId,
                        principalSchema: "dbo",
                        principalTable: "Tags",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "Comments",
                schema: "dbo",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    PostId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ParentCommentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Content = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsApproved = table.Column<bool>(type: "bit", nullable: false),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                    InsertedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: false, defaultValueSql: "SYSDATETIME()"),
                    UpdatedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: true),
                    DeletedAt = table.Column<DateTime>(type: "datetime2(0)", nullable: true),
                    InsertedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UpdatedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DeletedBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Comments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Comments_BlogPosts_PostId",
                        column: x => x.PostId,
                        principalSchema: "dbo",
                        principalTable: "BlogPosts",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Comments_Comments_ParentCommentId",
                        column: x => x.ParentCommentId,
                        principalSchema: "dbo",
                        principalTable: "Comments",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateIndex(
                name: "IX_BlogPosts_AuthorId",
                schema: "dbo",
                table: "BlogPosts",
                column: "AuthorId");

            migrationBuilder.CreateIndex(
                name: "IX_BlogPosts_Id",
                schema: "dbo",
                table: "BlogPosts",
                column: "Id");

            migrationBuilder.CreateIndex(
                name: "IX_BlogPosts_Id_IsDeleted",
                schema: "dbo",
                table: "BlogPosts",
                columns: new[] { "Id", "IsDeleted" });

            migrationBuilder.CreateIndex(
                name: "IX_BlogPosts_IsDeleted",
                schema: "dbo",
                table: "BlogPosts",
                column: "IsDeleted");

            migrationBuilder.CreateIndex(
                name: "IX_BlogPosts_Slug",
                schema: "dbo",
                table: "BlogPosts",
                column: "Slug",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_BlogPostsCategory_CategoryId",
                schema: "dbo",
                table: "BlogPostsCategory",
                column: "CategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_BlogPostsCategory_Id",
                schema: "dbo",
                table: "BlogPostsCategory",
                column: "Id");

            migrationBuilder.CreateIndex(
                name: "IX_BlogPostsCategory_Id_IsDeleted",
                schema: "dbo",
                table: "BlogPostsCategory",
                columns: new[] { "Id", "IsDeleted" });

            migrationBuilder.CreateIndex(
                name: "IX_BlogPostsCategory_IsDeleted",
                schema: "dbo",
                table: "BlogPostsCategory",
                column: "IsDeleted");

            migrationBuilder.CreateIndex(
                name: "IX_BlogPostsTag_Id",
                schema: "dbo",
                table: "BlogPostsTag",
                column: "Id");

            migrationBuilder.CreateIndex(
                name: "IX_BlogPostsTag_Id_IsDeleted",
                schema: "dbo",
                table: "BlogPostsTag",
                columns: new[] { "Id", "IsDeleted" });

            migrationBuilder.CreateIndex(
                name: "IX_BlogPostsTag_IsDeleted",
                schema: "dbo",
                table: "BlogPostsTag",
                column: "IsDeleted");

            migrationBuilder.CreateIndex(
                name: "IX_BlogPostsTag_TagId",
                schema: "dbo",
                table: "BlogPostsTag",
                column: "TagId");

            migrationBuilder.CreateIndex(
                name: "IX_Categories_Id",
                schema: "dbo",
                table: "Categories",
                column: "Id");

            migrationBuilder.CreateIndex(
                name: "IX_Categories_Id_IsDeleted",
                schema: "dbo",
                table: "Categories",
                columns: new[] { "Id", "IsDeleted" });

            migrationBuilder.CreateIndex(
                name: "IX_Categories_IsDeleted",
                schema: "dbo",
                table: "Categories",
                column: "IsDeleted");

            migrationBuilder.CreateIndex(
                name: "IX_Categories_ParentCategoryId",
                schema: "dbo",
                table: "Categories",
                column: "ParentCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_Categories_Slug",
                schema: "dbo",
                table: "Categories",
                column: "Slug",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Comments_Id",
                schema: "dbo",
                table: "Comments",
                column: "Id");

            migrationBuilder.CreateIndex(
                name: "IX_Comments_Id_IsDeleted",
                schema: "dbo",
                table: "Comments",
                columns: new[] { "Id", "IsDeleted" });

            migrationBuilder.CreateIndex(
                name: "IX_Comments_IsDeleted",
                schema: "dbo",
                table: "Comments",
                column: "IsDeleted");

            migrationBuilder.CreateIndex(
                name: "IX_Comments_ParentCommentId",
                schema: "dbo",
                table: "Comments",
                column: "ParentCommentId");

            migrationBuilder.CreateIndex(
                name: "IX_Comments_PostId",
                schema: "dbo",
                table: "Comments",
                column: "PostId");

            migrationBuilder.CreateIndex(
                name: "IX_Experiences_ExperienceTypeId",
                schema: "dbo",
                table: "Experiences",
                column: "ExperienceTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Experiences_Id",
                schema: "dbo",
                table: "Experiences",
                column: "Id");

            migrationBuilder.CreateIndex(
                name: "IX_Experiences_Id_IsDeleted",
                schema: "dbo",
                table: "Experiences",
                columns: new[] { "Id", "IsDeleted" });

            migrationBuilder.CreateIndex(
                name: "IX_Experiences_IsDeleted",
                schema: "dbo",
                table: "Experiences",
                column: "IsDeleted");

            migrationBuilder.CreateIndex(
                name: "IX_ExperienceTechnologies_ExperienceId_SubSkillId",
                schema: "dbo",
                table: "ExperienceTechnologies",
                columns: new[] { "ExperienceId", "SubSkillId" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ExperienceTechnologies_Id",
                schema: "dbo",
                table: "ExperienceTechnologies",
                column: "Id");

            migrationBuilder.CreateIndex(
                name: "IX_ExperienceTechnologies_Id_IsDeleted",
                schema: "dbo",
                table: "ExperienceTechnologies",
                columns: new[] { "Id", "IsDeleted" });

            migrationBuilder.CreateIndex(
                name: "IX_ExperienceTechnologies_IsDeleted",
                schema: "dbo",
                table: "ExperienceTechnologies",
                column: "IsDeleted");

            migrationBuilder.CreateIndex(
                name: "IX_ExperienceTechnologies_SubSkillId",
                schema: "dbo",
                table: "ExperienceTechnologies",
                column: "SubSkillId");

            migrationBuilder.CreateIndex(
                name: "IX_ExperienceTechnologies_SubSkillId1",
                schema: "dbo",
                table: "ExperienceTechnologies",
                column: "SubSkillId1");

            migrationBuilder.CreateIndex(
                name: "IX_ExperienceTypes_Id",
                schema: "dbo",
                table: "ExperienceTypes",
                column: "Id");

            migrationBuilder.CreateIndex(
                name: "IX_ExperienceTypes_Id_IsDeleted",
                schema: "dbo",
                table: "ExperienceTypes",
                columns: new[] { "Id", "IsDeleted" });

            migrationBuilder.CreateIndex(
                name: "IX_ExperienceTypes_IsDeleted",
                schema: "dbo",
                table: "ExperienceTypes",
                column: "IsDeleted");

            migrationBuilder.CreateIndex(
                name: "IX_ExperienceTypes_Name",
                schema: "dbo",
                table: "ExperienceTypes",
                column: "Name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Infos_Id",
                schema: "dbo",
                table: "Infos",
                column: "Id");

            migrationBuilder.CreateIndex(
                name: "IX_Infos_Id_IsDeleted",
                schema: "dbo",
                table: "Infos",
                columns: new[] { "Id", "IsDeleted" });

            migrationBuilder.CreateIndex(
                name: "IX_Infos_IsDeleted",
                schema: "dbo",
                table: "Infos",
                column: "IsDeleted");

            migrationBuilder.CreateIndex(
                name: "IX_Skills_Id",
                schema: "dbo",
                table: "Skills",
                column: "Id");

            migrationBuilder.CreateIndex(
                name: "IX_Skills_Id_IsDeleted",
                schema: "dbo",
                table: "Skills",
                columns: new[] { "Id", "IsDeleted" });

            migrationBuilder.CreateIndex(
                name: "IX_Skills_IsDeleted",
                schema: "dbo",
                table: "Skills",
                column: "IsDeleted");

            migrationBuilder.CreateIndex(
                name: "IX_Skills_Name",
                schema: "dbo",
                table: "Skills",
                column: "Name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_SocialLinks_Id",
                schema: "dbo",
                table: "SocialLinks",
                column: "Id");

            migrationBuilder.CreateIndex(
                name: "IX_SocialLinks_Id_IsDeleted",
                schema: "dbo",
                table: "SocialLinks",
                columns: new[] { "Id", "IsDeleted" });

            migrationBuilder.CreateIndex(
                name: "IX_SocialLinks_IsDeleted",
                schema: "dbo",
                table: "SocialLinks",
                column: "IsDeleted");

            migrationBuilder.CreateIndex(
                name: "IX_SubSkills_Id",
                schema: "dbo",
                table: "SubSkills",
                column: "Id");

            migrationBuilder.CreateIndex(
                name: "IX_SubSkills_Id_IsDeleted",
                schema: "dbo",
                table: "SubSkills",
                columns: new[] { "Id", "IsDeleted" });

            migrationBuilder.CreateIndex(
                name: "IX_SubSkills_IsDeleted",
                schema: "dbo",
                table: "SubSkills",
                column: "IsDeleted");

            migrationBuilder.CreateIndex(
                name: "IX_SubSkills_SkillId_Name",
                schema: "dbo",
                table: "SubSkills",
                columns: new[] { "SkillId", "Name" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_SubSkills_SkillId1",
                schema: "dbo",
                table: "SubSkills",
                column: "SkillId1");

            migrationBuilder.CreateIndex(
                name: "IX_Tags_Id",
                schema: "dbo",
                table: "Tags",
                column: "Id");

            migrationBuilder.CreateIndex(
                name: "IX_Tags_Id_IsDeleted",
                schema: "dbo",
                table: "Tags",
                columns: new[] { "Id", "IsDeleted" });

            migrationBuilder.CreateIndex(
                name: "IX_Tags_IsDeleted",
                schema: "dbo",
                table: "Tags",
                column: "IsDeleted");

            migrationBuilder.CreateIndex(
                name: "IX_Tags_Slug",
                schema: "dbo",
                table: "Tags",
                column: "Slug",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Users_Email",
                schema: "dbo",
                table: "Users",
                column: "Email",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Users_Id",
                schema: "dbo",
                table: "Users",
                column: "Id");

            migrationBuilder.CreateIndex(
                name: "IX_Users_Id_IsDeleted",
                schema: "dbo",
                table: "Users",
                columns: new[] { "Id", "IsDeleted" });

            migrationBuilder.CreateIndex(
                name: "IX_Users_IsDeleted",
                schema: "dbo",
                table: "Users",
                column: "IsDeleted");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "BlogPostsCategory",
                schema: "dbo");

            migrationBuilder.DropTable(
                name: "BlogPostsTag",
                schema: "dbo");

            migrationBuilder.DropTable(
                name: "Comments",
                schema: "dbo");

            migrationBuilder.DropTable(
                name: "ExperienceTechnologies",
                schema: "dbo");

            migrationBuilder.DropTable(
                name: "Infos",
                schema: "dbo");

            migrationBuilder.DropTable(
                name: "SocialLinks",
                schema: "dbo");

            migrationBuilder.DropTable(
                name: "Categories",
                schema: "dbo");

            migrationBuilder.DropTable(
                name: "Tags",
                schema: "dbo");

            migrationBuilder.DropTable(
                name: "BlogPosts",
                schema: "dbo");

            migrationBuilder.DropTable(
                name: "Experiences",
                schema: "dbo");

            migrationBuilder.DropTable(
                name: "SubSkills",
                schema: "dbo");

            migrationBuilder.DropTable(
                name: "Users",
                schema: "dbo");

            migrationBuilder.DropTable(
                name: "ExperienceTypes",
                schema: "dbo");

            migrationBuilder.DropTable(
                name: "Skills",
                schema: "dbo");
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Migrations\TahaMucasirogluBlogContextModelSnapshot.cs ===

[İÇERİK]
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TahaMucasirogluBlog.Infrastructure.Repository.Context;

#nullable disable

namespace TahaMucasirogluBlog.Infrastructure.Repository.Migrations
{
    [DbContext(typeof(TahaMucasirogluBlogContext))]
    partial class TahaMucasirogluBlogContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("Id", "IsDeleted");

                    b.ToTable("BlogPosts", "dbo");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.BlogPostCategory", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PostId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Id", "IsDeleted");

                    b.ToTable("BlogPostsCategory", "dbo");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.BlogPostTag", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PostId");

                    b.HasIndex("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("TagId");

                    b.HasIndex("Id", "IsDeleted");

                    b.ToTable("BlogPostsTag", "dbo");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ParentCategoryId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("Id", "IsDeleted");

                    b.ToTable("Categories", "dbo");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("Id", "IsDeleted");

                    b.ToTable("Comments", "dbo");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExperienceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Reference")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExperienceTypeId");

                    b.HasIndex("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Id", "IsDeleted");

                    b.ToTable("Experiences", "dbo");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.ExperienceTechnology", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExperienceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("SubSkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubSkillId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("SubSkillId");

                    b.HasIndex("SubSkillId1");

                    b.HasIndex("ExperienceId", "SubSkillId")
                        .IsUnique();

                    b.HasIndex("Id", "IsDeleted");

                    b.ToTable("ExperienceTechnologies", "dbo");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.ExperienceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Id", "IsDeleted");

                    b.ToTable("ExperienceTypes", "dbo");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.Info", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Id", "IsDeleted");

                    b.ToTable("Infos", "dbo");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Id", "IsDeleted");

                    b.ToTable("Skills", "dbo");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.SocialLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Id", "IsDeleted");

                    b.ToTable("SocialLinks", "dbo");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.SubSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("SkillId1");

                    b.HasIndex("Id", "IsDeleted");

                    b.HasIndex("SkillId", "Name")
                        .IsUnique();

                    b.ToTable("SubSkills", "dbo");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("Id", "IsDeleted");

                    b.ToTable("Tags", "dbo");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("InsertedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Id", "IsDeleted");

                    b.ToTable("Users", "dbo");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.BlogPost", b =>
                {
                    b.HasOne("TahaMucasirogluBlog.Domain.Entities.Concrete.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.BlogPostCategory", b =>
                {
                    b.HasOne("TahaMucasirogluBlog.Domain.Entities.Concrete.Category", "Category")
                        .WithMany("PostCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TahaMucasirogluBlog.Domain.Entities.Concrete.BlogPost", "BlogPost")
                        .WithMany("PostCategories")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BlogPost");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.BlogPostTag", b =>
                {
                    b.HasOne("TahaMucasirogluBlog.Domain.Entities.Concrete.BlogPost", "BlogPost")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TahaMucasirogluBlog.Domain.Entities.Concrete.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BlogPost");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.Category", b =>
                {
                    b.HasOne("TahaMucasirogluBlog.Domain.Entities.Concrete.Category", "ParrentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParrentCategory");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.Comment", b =>
                {
                    b.HasOne("TahaMucasirogluBlog.Domain.Entities.Concrete.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TahaMucasirogluBlog.Domain.Entities.Concrete.BlogPost", "BlogPost")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BlogPost");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.Experience", b =>
                {
                    b.HasOne("TahaMucasirogluBlog.Domain.Entities.Concrete.ExperienceType", "ExperienceType")
                        .WithMany()
                        .HasForeignKey("ExperienceTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ExperienceType");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.ExperienceTechnology", b =>
                {
                    b.HasOne("TahaMucasirogluBlog.Domain.Entities.Concrete.Experience", "Experience")
                        .WithMany("ExperienceTechnologies")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TahaMucasirogluBlog.Domain.Entities.Concrete.SubSkill", "SubSkill")
                        .WithMany()
                        .HasForeignKey("SubSkillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TahaMucasirogluBlog.Domain.Entities.Concrete.SubSkill", null)
                        .WithMany("ExperienceTechnologies")
                        .HasForeignKey("SubSkillId1");

                    b.Navigation("Experience");

                    b.Navigation("SubSkill");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.SubSkill", b =>
                {
                    b.HasOne("TahaMucasirogluBlog.Domain.Entities.Concrete.Skill", null)
                        .WithMany("SubSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TahaMucasirogluBlog.Domain.Entities.Concrete.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.BlogPost", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostCategories");

                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.Category", b =>
                {
                    b.Navigation("PostCategories");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.Experience", b =>
                {
                    b.Navigation("ExperienceTechnologies");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.Skill", b =>
                {
                    b.Navigation("SubSkills");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.SubSkill", b =>
                {
                    b.Navigation("ExperienceTechnologies");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.Tag", b =>
                {
                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("TahaMucasirogluBlog.Domain.Entities.Concrete.User", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Abstract\Base\IRepository.cs ===

[İÇERİK]
﻿using System.Linq.Expressions;
using TahaMucasirogluBlog.Domain.Entities.Abstract;
using TahaMucasirogluBlog.Domain.Return.Abstract;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base
{
    public interface IRepository<TEntity> : IDisposable, IAsyncDisposable
        where TEntity : class, IEntity
    {



        /// <summary>
        /// Filtreye uyan tek bir entity’i, Include’larıyla birlikte getirir.
        /// </summary>
        Task<IReturn<TEntity>> GetWithIncludesAsync(Expression<Func<TEntity, bool>> filter, params Expression<Func<TEntity, object>>[] includes);

        /// <summary>
        /// Filtreye uyan tek bir entity’i, Include’larıyla birlikte getirir.
        /// </summary>
        IReturn<TEntity> GetWithIncludes(Expression<Func<TEntity, bool>> filter, params Expression<Func<TEntity, object>>[] includes);


        /// <summary>
        /// Filtreye uyan tüm entity’leri, Include’larıyla birlikte getirir.
        /// </summary>
        Task<IReturn<List<TEntity>>> GetAllWithIncludesAsync(Expression<Func<TEntity, bool>>? filter = null, params Expression<Func<TEntity, object>>[] includes);


        /// <summary>
        /// Filtreye uyan tüm entity’leri, Include’larıyla birlikte getirir.
        /// </summary>
        IReturn<List<TEntity>> GetAllWithIncludes(Expression<Func<TEntity, bool>>? filter = null, params Expression<Func<TEntity, object>>[] includes);


        public IReturn<TEntity> Get(Expression<Func<TEntity, bool>> filter);
        public Task<IReturn<TEntity>> GetAsync(Expression<Func<TEntity, bool>> filter);

        public IReturn<TEntity> GetLast(Expression<Func<TEntity, bool>> filter);
        public Task<IReturn<TEntity>> GetLastAsync(Expression<Func<TEntity, bool>> filter);

        public IReturn<IEnumerable<TEntity>> GetAll(Expression<Func<TEntity, bool>>? filter = null, bool reverse = false);
        public Task<IReturn<IEnumerable<TEntity>>> GetAllAsync(Expression<Func<TEntity, bool>>? filter = null, bool reverse = false);

        public IReturn<TEntity> GetDeleted(Expression<Func<TEntity, bool>> filter);
        public Task<IReturn<TEntity>> GetDeletedAsync(Expression<Func<TEntity, bool>> filter);

        public IReturn<IEnumerable<TEntity>> GetAllDeleted(Expression<Func<TEntity, bool>>? filter = null, bool reverse = false);
        public Task<IReturn<IEnumerable<TEntity>>> GetAllDeletedAsync(Expression<Func<TEntity, bool>>? filter = null, bool reverse = false);

        public IReturn<int> Count(Expression<Func<TEntity, bool>>? filter = null);
        public Task<IReturn<int>> CountAsync(Expression<Func<TEntity, bool>>? filter = null);

        public IReturn<bool> IsExist(Expression<Func<TEntity, bool>> filter);
        public Task<IReturn<bool>> IsExistAsync(Expression<Func<TEntity, bool>> filter);

        public IReturn<TEntity> Add(TEntity entity);
        public IReturn<IEnumerable<TEntity>> Add(IEnumerable<TEntity> entity);
        public Task<IReturn<TEntity>> AddAsync(TEntity entity);
        public Task<IReturn<IEnumerable<TEntity>>> AddAsync(IEnumerable<TEntity> entity);

        public IReturn<TEntity> Update(TEntity entity);
        public IReturn<IEnumerable<TEntity>> Update(IEnumerable<TEntity> entity);
        public Task<IReturn<TEntity>> UpdateAsync(TEntity entity);
        public Task<IReturn<IEnumerable<TEntity>>> UpdateAsync(IEnumerable<TEntity> entity);

        public IReturn<TEntity> Delete(TEntity entity);
        public IReturn<IEnumerable<TEntity>> Delete(IEnumerable<TEntity> entity);
        public Task<IReturn<TEntity>> DeleteAsync(TEntity entity);
        public Task<IReturn<IEnumerable<TEntity>>> DeleteAsync(IEnumerable<TEntity> entity);

        public IReturn<TEntity> Save(TEntity entity);
        public IReturn<IEnumerable<TEntity>> Save(IEnumerable<TEntity> entity);
        public Task<IReturn<TEntity>> SaveAsync(TEntity entity);
        public Task<IReturn<IEnumerable<TEntity>>> SaveAsync(IEnumerable<TEntity> entity);

        public IReturn<TNull> CheckIsNull<TNull>(TNull? result);
        public IReturn<TNull> ErrorReturn<TNull>(Exception e);

        public void BeginTransaction();
        public Task BeginTransactionAsync();
        public void Commit();
        public Task CommitAsync();
        public void Rollback();
        public Task RollbackAsync();
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Abstract\IBlogPostCategoryRepository.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract
{
    public interface IBlogPostCategoryRepository : IRepository<BlogPostCategory>
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Abstract\IBlogPostRepository.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract
{
    public interface IBlogPostRepository : IRepository<BlogPost>
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Abstract\IBlogPostTagRepository.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract
{
    public interface IBlogPostTagRepository : IRepository<BlogPostTag>
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Abstract\ICategoryRepository.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract
{
    public interface ICategoryRepository : IRepository<Category>
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Abstract\ICommentRepository.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract
{
    public interface ICommentRepository : IRepository<Comment>
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Abstract\IExperienceRepository.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract
{
    public interface IExperienceRepository : IRepository<Experience>
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Abstract\IExperienceTechnologyRepository.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract
{
    public interface IExperienceTechnologyRepository : IRepository<ExperienceTechnology>
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Abstract\IExperienceTypeRepository.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract
{
    public interface IExperienceTypeRepository : IRepository<ExperienceType>
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Abstract\IInfoRepository.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract
{
    public interface IInfoRepository : IRepository<Info>
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Abstract\ISkillRepository.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract
{
    public interface ISkillRepository : IRepository<Skill>
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Abstract\ISocialLinkRepository.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract
{
    public interface ISocialLinkRepository : IRepository<SocialLink>
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Abstract\ISubSkillRepository.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract
{
    public interface ISubSkillRepository : IRepository<SubSkill>
    {

    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Abstract\ITagRepository.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract
{
    public interface ITagRepository : IRepository<Tag>
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Abstract\IUserRepository.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract
{
    public interface IUserRepository : IRepository<User>
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Base\Repository.cs ===

[İÇERİK]
﻿using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.Extensions.Logging;
using System.Linq.Expressions;
using TahaMucasirogluBlog.Domain.Entities.Abstract;
using TahaMucasirogluBlog.Domain.Extensions;
using TahaMucasirogluBlog.Domain.Return.Abstract;
using TahaMucasirogluBlog.Domain.Return.Concrete;
using TahaMucasirogluBlog.Domain.Return.Constant;
using TahaMucasirogluBlog.Infrastructure.Repository.Context;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Base
{
    public abstract class Repository<TEntity> : IRepository<TEntity>
        where TEntity : class, IEntity
    {
        public readonly DbContext context;
        public readonly ILogger<Repository<TEntity>> logger;
        internal IDbContextTransaction? transaction;
        public Repository(TahaMucasirogluBlogContext context, ILogger<Repository<TEntity>> logger)
        {
            this.context = context;
            this.logger = logger;
        }





        #region Includes

        public virtual async Task<IReturn<TEntity>> GetWithIncludesAsync(Expression<Func<TEntity, bool>> filter, params Expression<Func<TEntity, object>>[] includes)
        {
            try
            {
                IQueryable<TEntity> query = context.Set<TEntity>().AsQueryable();
                if (filter != null) query = query.Where(filter);
                foreach (var include in includes) query = query.Include(include);
                return CheckIsNull(await query.FirstOrDefaultAsync());
            }
            catch (Exception e)
            {
                return ErrorReturn<TEntity>(e);
            }
        }

        public virtual IReturn<TEntity> GetWithIncludes(Expression<Func<TEntity, bool>> filter, params Expression<Func<TEntity, object>>[] includes)
        {
            try
            {
                IQueryable<TEntity> query = context.Set<TEntity>().AsQueryable();
                if (filter != null) query = query.Where(filter);
                foreach (var include in includes) query = query.Include(include);
                return CheckIsNull(query.FirstOrDefault());
            }
            catch (Exception e)
            {
                return ErrorReturn<TEntity>(e);
            }
        }

        public virtual async Task<IReturn<List<TEntity>>> GetAllWithIncludesAsync(Expression<Func<TEntity, bool>>? filter = null, params Expression<Func<TEntity, object>>[] includes)
        {
            try
            {
                IQueryable<TEntity> query = context.Set<TEntity>().AsQueryable();
                if (filter != null) query = query.Where(filter);
                foreach (var include in includes) query = query.Include(include);
                return CheckIsNull(await query.ToListAsync());
            }
            catch (Exception e)
            {
                return ErrorReturn<List<TEntity>>(e);
            }
        }

        public virtual IReturn<List<TEntity>> GetAllWithIncludes(Expression<Func<TEntity, bool>>? filter = null, params Expression<Func<TEntity, object>>[] includes)
        {
            try
            {
                IQueryable<TEntity> query = context.Set<TEntity>().AsQueryable();
                if (filter != null) query = query.Where(filter);
                foreach (var include in includes) query = query.Include(include);
                return CheckIsNull(query.ToList());
            }
            catch (Exception e)
            {
                return ErrorReturn<List<TEntity>>(e);
            }
        }

        #endregion

        #region Add


        public virtual IReturn<TEntity> Add(TEntity entity)
        {
            try
            {
                entity.InsertedAt = DateTime.Now;
                context.Set<TEntity>().Add(entity);
                return Save(entity);
            }
            catch (Exception e)
            {
                return ErrorReturn<TEntity>(e);
            }
        }

        public virtual IReturn<IEnumerable<TEntity>> Add(IEnumerable<TEntity> entity)
        {
            try
            {
                entity.ChangeAll(e => e.InsertedAt = DateTime.Now);
                context.Set<TEntity>().AddRange(entity);
                return Save(entity);

            }
            catch (Exception e)
            {
                return ErrorReturn<IEnumerable<TEntity>>(e);
            }
        }

        public virtual async Task<IReturn<TEntity>> AddAsync(TEntity entity)
        {
            try
            {
                entity.InsertedAt = DateTime.Now;
                await context.Set<TEntity>().AddAsync(entity);
                return await SaveAsync(entity);
            }
            catch (Exception e)
            {
                return ErrorReturn<TEntity>(e);
            }
        }

        public virtual async Task<IReturn<IEnumerable<TEntity>>> AddAsync(IEnumerable<TEntity> entity)
        {
            try
            {
                entity.ChangeAll(e => e.InsertedAt = DateTime.Now);
                await context.Set<TEntity>().AddRangeAsync(entity);
                return await SaveAsync(entity);
            }
            catch (Exception e)
            {
                return ErrorReturn<IEnumerable<TEntity>>(e);
            }
        }


        #endregion

        #region Update


        public virtual IReturn<TEntity> Update(TEntity entity)
        {
            try
            {
                entity.UpdatedAt = DateTime.Now;
                context.Set<TEntity>().Update(entity);
                return Save(entity);
            }
            catch (Exception e)
            {
                return ErrorReturn<TEntity>(e);
            }
        }

        public virtual IReturn<IEnumerable<TEntity>> Update(IEnumerable<TEntity> entity)
        {
            try
            {
                entity.ChangeAll(e => e.UpdatedAt = DateTime.Now);
                context.Set<TEntity>().UpdateRange(entity);
                return Save(entity);
            }
            catch (Exception e)
            {
                return ErrorReturn<IEnumerable<TEntity>>(e);
            }
        }

        public virtual async Task<IReturn<TEntity>> UpdateAsync(TEntity entity)
        {
            try
            {
                entity.UpdatedAt = DateTime.Now;
                context.Set<TEntity>().Update(entity);
                return await SaveAsync(entity);
            }
            catch (Exception e)
            {
                return ErrorReturn<TEntity>(e);
            }
        }

        public virtual async Task<IReturn<IEnumerable<TEntity>>> UpdateAsync(IEnumerable<TEntity> entity)
        {
            try
            {
                entity.ChangeAll(e => e.UpdatedAt = DateTime.Now);
                context.Set<TEntity>().UpdateRange(entity);
                return await SaveAsync(entity);
            }
            catch (Exception e)
            {
                return ErrorReturn<IEnumerable<TEntity>>(e);
            }
        }


        #endregion


        #region Delete


        public virtual IReturn<TEntity> Delete(TEntity entity)
        {
            try
            {
                TEntity ent = context.Set<TEntity>().AsNoTracking().First(e => e.Id == entity.Id);
                ent.IsDeleted = true;
                ent.DeletedAt = DateTime.Now;
                context.Set<TEntity>().Update(ent);
                return Save(ent);
            }
            catch (Exception e)
            {
                return ErrorReturn<TEntity>(e);
            }
        }

        public virtual IReturn<IEnumerable<TEntity>> Delete(IEnumerable<TEntity> entity)
        {
            try
            {
                List<TEntity> list = new();
                foreach (TEntity ent in entity)
                {
                    list.Add(context.Set<TEntity>().AsNoTracking().First(e => e.Id == ent.Id));
                }
                list.ChangeAll(e => e.IsDeleted = true);
                list.ChangeAll(e => e.DeletedAt = DateTime.Now);
                context.Set<TEntity>().UpdateRange(list);
                return Save(list);
            }
            catch (Exception e)
            {
                return ErrorReturn<IEnumerable<TEntity>>(e);
            }
        }

        public virtual async Task<IReturn<TEntity>> DeleteAsync(TEntity entity)
        {
            try
            {
                TEntity ent = await context.Set<TEntity>().AsNoTracking().FirstAsync(e => e.Id == entity.Id);
                ent.IsDeleted = true;
                ent.DeletedAt = DateTime.Now;
                context.Set<TEntity>().Update(ent);
                return await SaveAsync(ent);
            }
            catch (Exception e)
            {
                return ErrorReturn<TEntity>(e);
            }
        }

        public virtual async Task<IReturn<IEnumerable<TEntity>>> DeleteAsync(IEnumerable<TEntity> entity)
        {
            try
            {
                List<TEntity> list = new();
                foreach (TEntity ent in entity)
                {
                    list.Add(await context.Set<TEntity>().AsNoTracking().FirstAsync(e => e.Id == ent.Id));
                }
                list.ChangeAll(e => e.IsDeleted = true);
                list.ChangeAll(e => e.DeletedAt = DateTime.Now);
                context.Set<TEntity>().UpdateRange(list);
                return await SaveAsync(list);
            }
            catch (Exception e)
            {
                return ErrorReturn<IEnumerable<TEntity>>(e);
            }
        }


        #endregion

        #region Get

        public virtual IReturn<TEntity> Get(Expression<Func<TEntity, bool>> filter)
        {
            try
            {
                var result = context.Set<TEntity>().AsNoTracking().FirstOrDefault(filter);
                return CheckIsNull(result);
            }
            catch (Exception e)
            {
                return ErrorReturn<TEntity>(e);
            }
        }

        public virtual async Task<IReturn<TEntity>> GetAsync(Expression<Func<TEntity, bool>> filter)
        {
            try
            {
                var result = await context.Set<TEntity>().AsNoTracking().FirstOrDefaultAsync(filter);
                return CheckIsNull(result);
            }
            catch (Exception e)
            {
                return ErrorReturn<TEntity>(e);
            }
        }

        public virtual IReturn<TEntity> GetLast(Expression<Func<TEntity, bool>> filter)
        {
            try
            {
                var result = context.Set<TEntity>().AsNoTracking().LastOrDefault(filter);
                return CheckIsNull(result);
            }
            catch (Exception e)
            {
                return ErrorReturn<TEntity>(e);
            }
        }

        public virtual async Task<IReturn<TEntity>> GetLastAsync(Expression<Func<TEntity, bool>> filter)
        {
            try
            {
                var result = await context.Set<TEntity>().AsNoTracking().LastOrDefaultAsync(filter);
                return CheckIsNull(result);
            }
            catch (Exception e)
            {
                return ErrorReturn<TEntity>(e);
            }
        }
        public virtual IReturn<IEnumerable<TEntity>> GetAll(Expression<Func<TEntity, bool>>? filter = null, bool reverse = false)
        {
            try
            {

                IQueryable<TEntity> query = context.Set<TEntity>().AsNoTracking();
                if (filter != null) query = query.Where(filter);
                if (reverse) query = query.Reverse();

                IEnumerable<TEntity> result = query.AsEnumerable();

                return CheckIsNull(result);
            }
            catch (Exception e)
            {
                return ErrorReturn<IEnumerable<TEntity>>(e);
            }

        }

        public virtual async Task<IReturn<IEnumerable<TEntity>>> GetAllAsync(Expression<Func<TEntity, bool>>? filter = null, bool reverse = false)
        {
            try
            {
                IQueryable<TEntity> query = context.Set<TEntity>().AsNoTracking();
                if (filter != null) query = query.Where(filter);
                if (reverse) query = query.Reverse();
                IEnumerable<TEntity> result = await query.ToListAsync();
                return CheckIsNull(result);
            }
            catch (Exception e)
            {
                return ErrorReturn<IEnumerable<TEntity>>(e);
            }
        }


        public virtual IReturn<TEntity> GetDeleted(Expression<Func<TEntity, bool>> filter)
        {
            try
            {
                var result = context.Set<TEntity>().IgnoreQueryFilters().AsNoTracking().Where(e => e.IsDeleted).FirstOrDefault(filter);
                return CheckIsNull(result);
            }
            catch (Exception e)
            {
                return ErrorReturn<TEntity>(e);
            }
        }

        public virtual async Task<IReturn<TEntity>> GetDeletedAsync(Expression<Func<TEntity, bool>> filter)
        {
            try
            {
                var result = await context.Set<TEntity>().IgnoreQueryFilters().AsNoTracking().Where(e => e.IsDeleted).FirstOrDefaultAsync(filter);
                return CheckIsNull(result);
            }
            catch (Exception e)
            {
                return ErrorReturn<TEntity>(e);
            }
        }

        public virtual IReturn<IEnumerable<TEntity>> GetAllDeleted(Expression<Func<TEntity, bool>>? filter = null, bool reverse = false)
        {
            try
            {

                IQueryable<TEntity> query = context.Set<TEntity>().IgnoreQueryFilters().AsNoTracking().Where(e => e.IsDeleted);
                if (filter != null) query = query.Where(filter);
                if (reverse) query = query.Reverse();
                IEnumerable<TEntity> result = query.AsEnumerable();
                return CheckIsNull(result);
            }
            catch (Exception e)
            {
                return ErrorReturn<IEnumerable<TEntity>>(e);
            }
        }

        public virtual async Task<IReturn<IEnumerable<TEntity>>> GetAllDeletedAsync(Expression<Func<TEntity, bool>>? filter = null, bool reverse = false)
        {
            try
            {

                IQueryable<TEntity> query = context.Set<TEntity>().IgnoreQueryFilters().AsNoTracking().Where(e => e.IsDeleted);
                if (filter != null) query = query.Where(filter);
                if (reverse) query = query.Reverse();
                IEnumerable<TEntity> result = await query.ToListAsync();
                return CheckIsNull(result);
            }
            catch (Exception e)
            {
                return ErrorReturn<IEnumerable<TEntity>>(e);
            }
        }


        #endregion

        #region Count


        public virtual IReturn<int> Count(Expression<Func<TEntity, bool>>? filter = null)
        {
            try
            {
                return new SuccessReturn<int>(filter == null ? context.Set<TEntity>().AsNoTracking().Count() : context.Set<TEntity>().AsNoTracking().Count(filter));
            }
            catch (Exception e)
            {
                return ErrorReturn<int>(e);
            }
        }

        public virtual async Task<IReturn<int>> CountAsync(Expression<Func<TEntity, bool>>? filter = null)
        {
            try
            {
                return new SuccessReturn<int>(filter == null ? await context.Set<TEntity>().AsNoTracking().CountAsync() : await context.Set<TEntity>().AsNoTracking().CountAsync(filter));
            }
            catch (Exception e)
            {
                return ErrorReturn<int>(e);
            }
        }

        #endregion

        #region IsExist


        public virtual IReturn<bool> IsExist(Expression<Func<TEntity, bool>> filter)
        {
            try
            {
                bool res = context.Set<TEntity>().AsNoTracking().Any(filter);
                return new SuccessReturn<bool>(data: res);
            }
            catch (Exception e)
            {
                return ErrorReturn<bool>(e);
            }
        }

        public virtual async Task<IReturn<bool>> IsExistAsync(Expression<Func<TEntity, bool>> filter)
        {
            try
            {
                bool res = await context.Set<TEntity>().AsNoTracking().AnyAsync(filter);
                return new SuccessReturn<bool>(data: res);
            }
            catch (Exception e)
            {
                return ErrorReturn<bool>(e);
            }
        }


        #endregion

        #region Save



        public virtual IReturn<TEntity> Save(TEntity entity)
        {
            try
            {
                if (context.SaveChanges() > 0)
                {
                    return new SuccessReturn<TEntity>(entity);
                }
                else
                {
                    return new ErrorReturn<TEntity>(entity);
                }
            }
            catch (Exception e)
            {
                return ErrorReturn<TEntity>(e);
            }
        }

        public virtual IReturn<IEnumerable<TEntity>> Save(IEnumerable<TEntity> entity)
        {
            try
            {
                if (context.SaveChanges() > 0)
                {
                    return new SuccessReturn<IEnumerable<TEntity>>(entity);
                }
                else
                {
                    return new ErrorReturn<IEnumerable<TEntity>>(entity);
                }
            }
            catch (Exception e)
            {
                return ErrorReturn<IEnumerable<TEntity>>(e);
            }
        }

        public virtual async Task<IReturn<TEntity>> SaveAsync(TEntity entity)
        {
            try
            {
                if (await context.SaveChangesAsync() > 0)
                {
                    return new SuccessReturn<TEntity>(entity);
                }
                else
                {
                    return new ErrorReturn<TEntity>(entity);
                }
            }

            catch (Exception e)
            {
                return ErrorReturn<TEntity>(e);
            }
        }

        public virtual async Task<IReturn<IEnumerable<TEntity>>> SaveAsync(IEnumerable<TEntity> entity)
        {
            try
            {
                if (await context.SaveChangesAsync() > 0)
                {
                    return new SuccessReturn<IEnumerable<TEntity>>(entity);
                }
                else
                {
                    return new ErrorReturn<IEnumerable<TEntity>>(entity);
                }
            }
            catch (Exception e)
            {
                return ErrorReturn<IEnumerable<TEntity>>(e);
            }
        }


        #endregion

        #region Tools

        public virtual IReturn<TNull> CheckIsNull<TNull>(TNull? result)
            => (result == null) ? new NullDataSuccess<TNull>() : new SuccessReturn<TNull>(result, "Data Dolu");



        public virtual IReturn<TNull> ErrorReturn<TNull>(Exception e)
        {
            ErrorReturn<TNull> error = new ErrorReturn<TNull>($"{typeof(TEntity).Name} ile üretilen {nameof(Repository<TEntity>)} sınıfında hata var. Hata mesajı = {e.Message}", e);
            return error;
        }
        public virtual void Dispose()
        {
            context.Dispose();
            if (transaction != null) { CleanupTransaction(); }
        }

        public virtual async ValueTask DisposeAsync()
        {
            if (transaction != null) { await CleanupTransactionAsync(); }
            await context.DisposeAsync();
        }

        public virtual void BeginTransaction()
        {
            transaction = context.Database.BeginTransaction();
        }


        public virtual async Task BeginTransactionAsync()
        {
            transaction = await context.Database.BeginTransactionAsync();
        }
        public virtual void Commit()
        {
            if (transaction == null) throw new InvalidOperationException("Transaction başlatılmadı.");
            transaction.Commit();
            CleanupTransaction();
        }
        public virtual async Task CommitAsync()
        {
            if (transaction == null) throw new InvalidOperationException("Transaction başlatılmadı.");
            await transaction.CommitAsync();
            CleanupTransaction();
        }
        public virtual void Rollback()
        {
            if (transaction == null) throw new InvalidOperationException("Transaction başlatılmadı.");
            transaction.Rollback();
            CleanupTransaction();
        }
        public virtual async Task RollbackAsync()
        {
            if (transaction == null) throw new InvalidOperationException("Transaction başlatılmadı.");
            await transaction.RollbackAsync();
            await CleanupTransactionAsync();
        }

        private void CleanupTransaction()
        {
            if (transaction != null) transaction.Dispose();
            transaction = null;
        }
        private async Task CleanupTransactionAsync()
        {
            if (transaction != null) await transaction.DisposeAsync();
            transaction = null;
        }

        #endregion

    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Concrete\BlogPostCategoryRepository.cs ===

[İÇERİK]
﻿using Microsoft.Extensions.Logging;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Context;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Concrete
{
    public class BlogPostCategoryRepository : Repository<BlogPostCategory>, IBlogPostCategoryRepository
    {
        public BlogPostCategoryRepository(TahaMucasirogluBlogContext context, ILogger<BlogPostCategoryRepository> logger) : base(context, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Concrete\BlogPostRepository.cs ===

[İÇERİK]
﻿using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Context;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Concrete
{
    public class BlogPostRepository : Repository<BlogPost>, IBlogPostRepository
    {
        public BlogPostRepository(TahaMucasirogluBlogContext context, ILogger<BlogPostRepository> logger) : base(context, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Concrete\BlogPostTagRepository.cs ===

[İÇERİK]
﻿using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Context;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Concrete
{
    public class BlogPostTagRepository : Repository<BlogPostTag>, IBlogPostTagRepository
    {
        public BlogPostTagRepository(TahaMucasirogluBlogContext context, ILogger<BlogPostTagRepository> logger) : base(context, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Concrete\CategoryRepository.cs ===

[İÇERİK]
﻿using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Context;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Concrete
{
    public class CategoryRepository : Repository<Category>, ICategoryRepository
    {
        public CategoryRepository(TahaMucasirogluBlogContext context, ILogger<CategoryRepository> logger) : base(context, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Concrete\CommentRepository.cs ===

[İÇERİK]
﻿using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Context;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Concrete
{
    public class CommentRepository : Repository<Comment>, ICommentRepository
    {
        public CommentRepository(TahaMucasirogluBlogContext context, ILogger<CommentRepository> logger) : base(context, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Concrete\ExperienceRepository.cs ===

[İÇERİK]
﻿using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Context;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Concrete
{
    public class ExperienceRepository : Repository<Experience>, IExperienceRepository
    {
        public ExperienceRepository(TahaMucasirogluBlogContext context, ILogger<ExperienceRepository> logger) : base(context, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Concrete\ExperienceTechnologyRepository.cs ===

[İÇERİK]
﻿using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Context;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Concrete
{
    public class ExperienceTechnologyRepository : Repository<ExperienceTechnology>, IExperienceTechnologyRepository
    {
        public ExperienceTechnologyRepository(TahaMucasirogluBlogContext context, ILogger<ExperienceTechnologyRepository> logger) : base(context, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Concrete\ExperienceTypeRepository.cs ===

[İÇERİK]
﻿using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Context;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Concrete
{
    public class ExperienceTypeRepository : Repository<ExperienceType>, IExperienceTypeRepository
    {
        public ExperienceTypeRepository(TahaMucasirogluBlogContext context, ILogger<ExperienceTypeRepository> logger) : base(context, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Concrete\InfoRepository.cs ===

[İÇERİK]
﻿using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Context;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Concrete
{
    public class InfoRepository : Repository<Info>, IInfoRepository
    {
        public InfoRepository(TahaMucasirogluBlogContext context, ILogger<InfoRepository> logger) : base(context, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Concrete\SkillRepository.cs ===

[İÇERİK]
﻿using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Context;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Concrete
{
    public class SkillRepository : Repository<Skill>, ISkillRepository
    {
        public SkillRepository(TahaMucasirogluBlogContext context, ILogger<SkillRepository> logger) : base(context, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Concrete\SocialLinkRepository.cs ===

[İÇERİK]
﻿using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Context;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Concrete
{
    public class SocialLinkRepository : Repository<SocialLink>, ISocialLinkRepository
    {
        public SocialLinkRepository(TahaMucasirogluBlogContext context, ILogger<SocialLinkRepository> logger) : base(context, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Concrete\SubSkillRepository.cs ===

[İÇERİK]
﻿using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Context;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Concrete
{
    public class SubSkillRepository : Repository<SubSkill>, ISubSkillRepository
    {
        public SubSkillRepository(TahaMucasirogluBlogContext context, ILogger<SubSkillRepository> logger) : base(context, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Concrete\TagRepository.cs ===

[İÇERİK]
﻿using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Context;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Concrete
{
    public class TagRepository : Repository<Tag>, ITagRepository
    {
        public TagRepository(TahaMucasirogluBlogContext context, ILogger<TagRepository> logger) : base(context, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\Repository\Concrete\UserRepository.cs ===

[İÇERİK]
﻿using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Context;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Base;

namespace TahaMucasirogluBlog.Infrastructure.Repository.Repository.Concrete
{
    public class UserRepository : Repository<User>, IUserRepository
    {
        public UserRepository(TahaMucasirogluBlogContext context, ILogger<UserRepository> logger) : base(context, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\TahaMucasirogluBlog.Infrastructure.Repository.csproj ===

[İÇERİK]
﻿<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
	  <!--uyarıları hata göstererek düzgün ilerleme sağlar-->
	  <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
  </PropertyGroup>

  <ItemGroup>
    <Folder Include="Migrations\" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\Application\TahaMucasirogluBlog.Application.Managers\TahaMucasirogluBlog.Application.Managers.csproj" />
    <ProjectReference Include="..\..\Application\TahaMucasirogluBlog.Application.Mapper\TahaMucasirogluBlog.Application.Mapper.csproj" />
    <ProjectReference Include="..\..\Application\TahaMucasirogluBlog.Application.Validation\TahaMucasirogluBlog.Application.Validation.csproj" />
  </ItemGroup>

</Project>



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\.config\dotnet-tools.json ===

[İÇERİK]
{
  "version": 1,
  "isRoot": true,
  "tools": {
    "dotnet-ef": {
      "version": "9.0.7",
      "commands": [
        "dotnet-ef"
      ],
      "rollForward": false
    }
  }
}


=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Attributes\Attributes.cs ===

[İÇERİK]
﻿using Microsoft.AspNetCore.Mvc.Filters;
using TahaMucasirogluBlog.Domain.Extensions;

namespace TahaMucasirogluBlog.Presentation.API.Attributes
{
    public class LogConnectionAttribute : ActionFilterAttribute // istenilen yerde istekleri basar
    {
        private readonly ILogger<LogConnectionAttribute> logger;

        public LogConnectionAttribute(ILogger<LogConnectionAttribute> logger)
        {
            this.logger = logger;
        }

        public override void OnActionExecuting(ActionExecutingContext context)
        {
            string message = "";
            message += $"Date = {DateTime.Now}" + "\n";
            message += $" Host = {context.HttpContext.Request.Host.Host} \n";
            message += $" Port = {context.HttpContext.Request.Host.Port} \n";
            message += $" Response Code = {context.HttpContext.Response.StatusCode} \n";
            message += $" Controller = {context.Controller.GetType().Name} \n";
            message += $" ModelState.IsValid = {context.ModelState.IsValid} \n";
            message += $" RouteData Values = {context.RouteData.Values} \n";
            message += $" User Identity = {context.HttpContext.User.Identity} \n";
            message += $" User Identity = {context.HttpContext.User.Identities.Select(u => u.Name + " - " + u.Label + " - " + u.NameClaimType.ToString()).ToJson()} \n";
            message += $" Body = {context.RouteData.Values.ToJson()} \n";
            message += $" Body Json = \n";
            message += context.ActionArguments.ToJson();
            logger.LogInformation(message);
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Controllers\Abstract\IController.cs ===

[İÇERİK]
﻿using Microsoft.AspNetCore.Mvc;
using TahaMucasirogluBlog.Domain.DTOs.Abstract;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Request;

namespace TahaMucasirogluBlog.Presentation.API.Controllers.Abstract
{
    public interface IController
    {
        public IActionResult HealthCheck();
        public IActionResult HealthCheck([FromBody] HealthCheckRequestDTO model);
        public IActionResult GetAll([FromBody] IdRequestDTO model);
        public Task<IActionResult> GetAllAsync([FromBody] IdRequestDTO model);
        public IActionResult GetById([FromBody] IdRequestDTO model);
        public Task<IActionResult> GetByIdAsync([FromBody] IdRequestDTO model);
    }
    public interface IController<TAdd> : IController
        where TAdd : class, IAddDTO
    {
        public IActionResult Add([FromBody] TAdd survey);
        public Task<IActionResult> AddAsync([FromBody] TAdd survey);
    }
    public interface IController<TAdd, TUpdate> : IController<TAdd>
        where TAdd : class, IAddDTO
        where TUpdate : class, IUpdateDTO
    {
        public IActionResult Update([FromBody] TUpdate survey);
        public Task<IActionResult> UpdateAsync([FromBody] TUpdate survey);
    }
    public interface IController<TAdd, TUpdate, TDelete> : IController<TAdd, TUpdate>
        where TAdd : class, IAddDTO
        where TUpdate : class, IUpdateDTO
        where TDelete : class, IDeleteDTO
    {
        public IActionResult Delete([FromBody] TDelete survey);
        public Task<IActionResult> DeleteAsync([FromBody] TDelete survey);
    }

}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Controllers\Base\Controller.cs ===

[İÇERİK]
﻿using Microsoft.AspNetCore.Mvc;
using TahaMucasirogluBlog.Domain.DTOs.Abstract;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Request;
using TahaMucasirogluBlog.Domain.Entities.Abstract;
using TahaMucasirogluBlog.Presentation.API.Attributes;
using TahaMucasirogluBlog.Presentation.API.Controllers.Abstract;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;

namespace TahaMucasirogluBlog.Presentation.API.Controllers.Base
{
    abstract public class Controller<TEntity, TResponse> : ControllerBase, IController
        where TEntity : class, IEntity
        where TResponse : class, IGetDTO
    {
        internal readonly IDatabaseService<TEntity, TResponse> service;
        public Controller(IDatabaseService<TEntity, TResponse> service)
        {
            this.service = service;
        }

        [HttpGet("[action]")]
        [ServiceFilter(typeof(LogConnectionAttribute))]
        public IActionResult GetAll([FromBody]IdRequestDTO model)
        {
            return new OkObjectResult(service.GetAll(model));
        }
        [HttpGet("[action]Async")]
        [ServiceFilter(typeof(LogConnectionAttribute))]
        public async Task<IActionResult> GetAllAsync([FromBody] IdRequestDTO model)
        {
            return new OkObjectResult(await service.GetAllAsync(model));
        }
        [HttpGet("[action]")]
        [ServiceFilter(typeof(LogConnectionAttribute))]
        public IActionResult GetById([FromBody] IdRequestDTO model)
        {
            return new OkObjectResult(service.GetById(model));
        }
        [HttpGet("[action]Async")]
        [ServiceFilter(typeof(LogConnectionAttribute))]
        public async Task<IActionResult> GetByIdAsync([FromBody] IdRequestDTO model)
        {
            return new OkObjectResult(await service.GetByIdAsync(model));
        }

        [HttpGet("[action]")]
        [ServiceFilter(typeof(LogConnectionAttribute))]
        public IActionResult HealthCheck()
        {
            return Ok("Sistem Çalışırıyor");
        }

        [HttpPost("[action]")]
        [ServiceFilter(typeof(LogConnectionAttribute))]
        public IActionResult HealthCheck([FromBody] HealthCheckRequestDTO model)
        {
            return Ok($"Sistem çalışıyor. İşlem Sonucu {model.Num1} + {model.Num2} = {model.Num1 + model.Num2}");
        }
    }



    abstract public class Controller<TEntity, TResponse, TAddRequest> : Controller<TEntity, TResponse>
        where TEntity : class, IEntity
        where TResponse : class, IGetDTO
        where TAddRequest : class, IAddDTO
    {
        internal new readonly IDatabaseService<TEntity, TResponse, TAddRequest> service;
        public Controller(IDatabaseService<TEntity, TResponse, TAddRequest> service) : base(service)
        {
            this.service = service;
        }

        [HttpPost("[action]")]
        [ServiceFilter(typeof(LogConnectionAttribute))]
        public virtual IActionResult Add([FromBody] TAddRequest model)
        {
            return new OkObjectResult(service.Add(model));
        }
        [HttpPost("[action]Async")]
        [ServiceFilter(typeof(LogConnectionAttribute))]
        public virtual async Task<IActionResult> AddAsync([FromBody] TAddRequest model)
        {
            return new OkObjectResult(await service.AddAsync(model));
        }
    }


    abstract public class Controller<TEntity, TResponse, TAddRequest, TUpdateRequest> : Controller<TEntity, TResponse, TAddRequest>
        where TEntity : class, IEntity
        where TResponse : class, IGetDTO
        where TAddRequest : class, IAddDTO
        where TUpdateRequest : class, IUpdateDTO
    {
        internal new readonly IDatabaseService<TEntity, TResponse, TAddRequest, TUpdateRequest> service;
        public Controller(IDatabaseService<TEntity, TResponse, TAddRequest, TUpdateRequest> service) : base(service)
        {
            this.service = service;
        }


        [HttpPost("[action]")]
        [ServiceFilter(typeof(LogConnectionAttribute))]
        public virtual IActionResult Update([FromBody] TUpdateRequest model)
        {
            return new OkObjectResult(service.Update(model));
        }
        [HttpPost("[action]Async")]
        [ServiceFilter(typeof(LogConnectionAttribute))]
        public virtual async Task<IActionResult> UpdateAsync([FromBody] TUpdateRequest model)
        {
            return new OkObjectResult(await service.UpdateAsync(model));
        }
    }

    abstract public class Controller<TEntity, TResponse, TAddRequest, TUpdateRequest, TDeleteRequest> : Controller<TEntity, TResponse, TAddRequest, TUpdateRequest>
        where TEntity : class, IEntity
        where TResponse : class, IGetDTO
        where TAddRequest : class, IAddDTO
        where TUpdateRequest : class, IUpdateDTO
        where TDeleteRequest : class, IDeleteDTO
    {
        internal new readonly IDatabaseService<TEntity, TResponse, TAddRequest, TUpdateRequest, TDeleteRequest> service;
        public Controller(IDatabaseService<TEntity, TResponse, TAddRequest, TUpdateRequest, TDeleteRequest> service) : base(service)
        {
            this.service = service;
        }

        [HttpPost("[action]")]
        [ServiceFilter(typeof(LogConnectionAttribute))]
        public virtual IActionResult Delete([FromBody] TDeleteRequest model)
        {
            return new OkObjectResult(service.Delete(model));
        }
        [HttpPost("[action]Async")]
        [ServiceFilter(typeof(LogConnectionAttribute))]
        public virtual async Task<IActionResult> DeleteAsync([FromBody] TDeleteRequest model)
        {
            return new OkObjectResult(await service.DeleteAsync(model));
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Controllers\Concrete\CvController.cs ===

[İÇERİK]
﻿using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Experience;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceTechnology;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceType;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Info;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Skill;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SocialLink;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SubSkill;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Response;
using TahaMucasirogluBlog.Domain.Return.Concrete;
using TahaMucasirogluBlog.Service.Cv.Abstract;

namespace TahaMucasirogluBlog.Presentation.API.Controllers.Concrete
{
    [Route("api/[controller]")]
    [ApiController]
    public class CvController : ControllerBase
    {
        private readonly ICvService cvService;
        public CvController(ICvService cvService)
        {
            this.cvService = cvService;
        }


        [HttpGet("[action]")]
        public IActionResult Get()
        {
            return Ok(cvService.GetCV());
        }

        [HttpGet("[action]")]
        public IActionResult GetTest()
        {
            GetExperienceTypeDTO staj = new GetExperienceTypeDTO()
            {
                Id = Guid.NewGuid(),
                Name = "Staj"
            };

            GetExperienceTypeDTO gonullu = new GetExperienceTypeDTO()
            {
                Id = Guid.NewGuid(),
                Name = "Gönüllü"
            };
            GetExperienceTypeDTO calisma = new GetExperienceTypeDTO()
            {
                Id = Guid.NewGuid(),
                Name = "İş"
            };
            GetExperienceTypeDTO proje = new GetExperienceTypeDTO()
            {
                Id = Guid.NewGuid(),
                Name = "Proje"
            };
            GetExperienceTypeDTO egitim = new GetExperienceTypeDTO()
            {
                Id = Guid.NewGuid(),
                Name = "Eğitim"
            };

            CvResponseDTO cvResponseDTO = new CvResponseDTO()
            {
                Info = new GetInfoDTO()
                {
                    Id = Guid.NewGuid(),
                    Email = "tahamucasiroglu@gmail.com",
                    FullName = "Ahmet Taha Mücasiroğlu",
                    Location = "İstanbul - İzmir - Muğla/Fethiye - Ankara",
                    Phone = "553 735 62 89",
                },

                SocialLinks = new List<GetSocialLinkDTO>()
                {
                    new GetSocialLinkDTO()
                    {
                        Id = Guid.NewGuid(),
                        Name = "LinkedIn",
                        DisplayOrder = 1,
                        IconClass = "fa-brands fa-linkedin",
                        IsVisible = true,
                        Url = "https://www.linkedin.com/in/tahamucasiroglu/"
                    },
                    new GetSocialLinkDTO()
                    {
                        Id = Guid.NewGuid(),
                        Name = "Github",
                        DisplayOrder = 2,
                        IconClass = "fa-brands fa-github",
                        IsVisible = true,
                        Url = "https://github.com/tahamucasiroglu"
                    },
                    new GetSocialLinkDTO()
                    {
                        Id = Guid.NewGuid(),
                        Name = "Mail",
                        DisplayOrder = 3,
                        IconClass = "fa-solid fa-envelope",
                        IsVisible = true,
                        Url = "mailto:tahamucasiroglu@gmail.com"
                    },
                    new GetSocialLinkDTO()
                    {
                        Id = Guid.NewGuid(),
                        Name = "Telefon",
                        DisplayOrder = 4,
                        IconClass = "fa-solid fa-phone",
                        IsVisible = true,
                        Url = "tel:+905537356289"
                    }
                },

                Skills = new List<GetSkillWithSubSkillsDTO>()
                {
                    new GetSkillWithSubSkillsDTO()
                    {
                        Id = Guid.NewGuid(),
                        Name = "Backend",
                        SubSkills = new List<GetSubSkillDTO>()
                        {
                            new GetSubSkillDTO()
                            {
                                Id = Guid.NewGuid(),
                                Name = ".Net Api Core",
                            },
                            new GetSubSkillDTO()
                            {
                                Id = Guid.NewGuid(),
                                Name = "Ef Core",
                            },
                            new GetSubSkillDTO()
                            {
                                Id = Guid.NewGuid(),
                                Name = "PostgreSQL",
                            },
                            new GetSubSkillDTO()
                            {
                                Id = Guid.NewGuid(),
                                Name =  "Sql Server / Sql Express",
                            },
                            new GetSubSkillDTO()
                            {
                                Id = Guid.NewGuid(),
                                Name = "Dapper",
                            }
                        }
                    },
                    new GetSkillWithSubSkillsDTO()
                    {
                        Id = Guid.NewGuid(),
                        Name = "Mobile",
                        SubSkills = new List<GetSubSkillDTO>()
                        {
                            new GetSubSkillDTO()
                            {
                                Id = Guid.NewGuid(),
                                Name = "Flutter",
                            },
                            new GetSubSkillDTO()
                            {
                                Id = Guid.NewGuid(),
                                Name = "Dart",
                            },
                            new GetSubSkillDTO()
                            {
                                Id = Guid.NewGuid(),
                                Name = "Rest API",
                            }
                        }
                    },
                    new GetSkillWithSubSkillsDTO()
                    {
                        Id = Guid.NewGuid(),
                        Name = "Frontend",
                        SubSkills = new List<GetSubSkillDTO>()
                        {
                            new GetSubSkillDTO()
                            {
                                Id = Guid.NewGuid(),
                                Name = ".NET MVC",
                            },
                            new GetSubSkillDTO()
                            {
                                Id = Guid.NewGuid(),
                                Name = "Javascript",
                            },
                            new GetSubSkillDTO()
                            {
                                Id = Guid.NewGuid(),
                                Name = "JQuery",
                            },
                            new GetSubSkillDTO()
                            {
                                Id = Guid.NewGuid(),
                                Name =  "React",
                            },
                            new GetSubSkillDTO()
                            {
                                Id = Guid.NewGuid(),
                                Name = "Bootstrap",
                            }
                        }
                    },
                    new GetSkillWithSubSkillsDTO()
                    {
                        Id = Guid.NewGuid(),
                        Name = "Other",
                        SubSkills = new List<GetSubSkillDTO>()
                        {
                            new GetSubSkillDTO()
                            {
                                Id = Guid.NewGuid(),
                                Name = "Python",
                            },
                            new GetSubSkillDTO()
                            {
                                Id = Guid.NewGuid(),
                                Name = "Script",
                            },
                            new GetSubSkillDTO()
                            {
                                Id = Guid.NewGuid(),
                                Name = "Web Scraping",
                            },
                            new GetSubSkillDTO()
                            {
                                Id = Guid.NewGuid(),
                                Name =  "Tensorflow",
                            },
                            new GetSubSkillDTO()
                            {
                                Id = Guid.NewGuid(),
                                Name = "Clean Arch",
                            },
                            new GetSubSkillDTO()
                            {
                                Id = Guid.NewGuid(),
                                Name =  "CQRS",
                            },
                            new GetSubSkillDTO()
                            {
                                Id = Guid.NewGuid(),
                                Name = "Git",
                            }
                        }
                    }
                },
                Experiences = new List<GetExperienceWithTechnologyAndTypeDTO>()
                {
                    new GetExperienceWithTechnologyAndTypeDTO()
                    {
                        Id = Guid.NewGuid(),
                        StartDate = DateTime.Parse("01-07-2019"),
                        EndDate = DateTime.Parse("01-08-2019"),
                        ExperienceType = staj,
                        Provider = "",
                        Title = "Seydikemer Belediyesi Bilgi İşlem",
                        Reference = "",
                        Description = "Kamu kurumunda teknik destek sağladım. Program kurulumu, kullanıcı desteği,arıza tespiti ve çözüm süreçlerinde doğrudan sahada görev aldım.",
                        SubSkills = new List<GetSubSkillDTO>()
                        {
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "Teknik Destek"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "Kullanıcı Memnuniyeti"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "Problem Çözme"
                            },
                        }
                    },
                    new GetExperienceWithTechnologyAndTypeDTO()
                    {
                        Id = Guid.NewGuid(),
                        StartDate = DateTime.Parse("01-11-2020"),
                        EndDate = DateTime.Parse("01-11-2020"),
                        ExperienceType = proje,
                        Provider = "",
                        Title = "Ayşe Tatile Çıksın - Şifreli Mesajlaşma",
                        Reference = "",
                        Description = "RSA şifreleme ile arada sunucu olmadan, doğrudan P2P iletişim yapan şifreli mesaşlaşma uygulaması.",
                        SubSkills = new List<GetSubSkillDTO>()
                        {
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "Cryptology"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "Python"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "Socket"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "Thread"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "Tkinter"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "RSA"
                            },
                        }
                    },
                    new GetExperienceWithTechnologyAndTypeDTO()
                    {
                        Id = Guid.NewGuid(),
                        StartDate = DateTime.Parse("01-06-2021"),
                        EndDate = DateTime.Parse("01-12-2021"),
                        ExperienceType = staj,
                        Provider = "",
                        Title = "NTN Yazılım - Mobil Uygulama Geliştirici",
                        Reference = "",
                        Description = "Atık toplama tesisi için geliştirilen, mobil ve tablet cihazlarda kullanılacak Flutter tabanlı uygulamanın geliştirilmesinde görev aldım.",
                        SubSkills = new List<GetSubSkillDTO>()
                        {
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "Flutter"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "Dart"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "RESTful API"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "Layered Architecture"
                            },
                        }
                    },
                    new GetExperienceWithTechnologyAndTypeDTO()
                    {
                        Id = Guid.NewGuid(),
                        StartDate = DateTime.Parse("01-09-2021"),
                        EndDate = DateTime.Parse("01-06-2022"),
                        ExperienceType = proje,
                        Provider = "",
                        Title = "TTB10 - Deepfake Video Tespiti",
                        Reference = "",
                        Description = "Tez projemiz için ürettiğimiz deepfake video tespiti. Hedef verisetinde %82'lik başarı oranı ile tamamlandı.",
                        SubSkills = new List<GetSubSkillDTO>()
                        {
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "Python"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "Tensorflow"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "Cuda"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "OpenCV"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "CNN(Convolutional Neural Networks)"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "Pandas"
                            },
                        }
                    },
                    new GetExperienceWithTechnologyAndTypeDTO()
                    {
                        Id = Guid.NewGuid(),
                        StartDate = DateTime.Parse("01-12-2022"),
                        EndDate = DateTime.Parse("01-04-2023"),
                        ExperienceType = gonullu,
                        Provider = "",
                        Title = "Bitranium Blockchain",
                        Reference = "",
                        Description = "Bitranium kripto para uygulamasında kısa süreli gönüllü çalışma sağladım. Proje sonradan kapandı.",
                        SubSkills = new List<GetSubSkillDTO>()
                        {
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "WEB3"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "Blockchain"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "React"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "Solidity"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "Contracts"
                            }
                        }
                    },
                    new GetExperienceWithTechnologyAndTypeDTO()
                    {
                        Id = Guid.NewGuid(),
                        StartDate = DateTime.Parse("01-02-2023"),
                        EndDate = DateTime.Parse("01-07-2023"),
                        ExperienceType = egitim,
                        Provider = "",
                        Title = "Turkcell Bootcamp",
                        Reference = "",
                        Description = "Turkcell GYGY 2023 C# .NET Bootcamp eğitimi. Başarıyla tamamlandı.",
                        SubSkills = new List<GetSubSkillDTO>()
                        {
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "C#"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = ".NET API"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "Architecture"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "Algorithm"
                            }
                        }
                    },
                    new GetExperienceWithTechnologyAndTypeDTO()
                    {
                        Id = Guid.NewGuid(),
                        StartDate = DateTime.Parse("01-07-2023"),
                        EndDate = DateTime.Parse("01-08-2023"),
                        ExperienceType = staj,
                        Provider = "",
                        Title = "Atmosware Backend Developer",
                        Reference = "",
                        Description = "Turkcell Bootcamp sonrası Atmosware şirketinde 1 ay süren staj programı.",
                        SubSkills = new List<GetSubSkillDTO>()
                        {
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "C#"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = ".NET API"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = ".NET MVC"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "React"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "PostgreSQL"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "SOLID"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "DI"
                            }
                        }
                    },
                    new GetExperienceWithTechnologyAndTypeDTO()
                    {
                        Id = Guid.NewGuid(),
                        StartDate = DateTime.Parse("01-04-2024"),
                        EndDate = DateTime.Parse("01-08-2024"),
                        ExperienceType = egitim,
                        Provider = "",
                        Title = "HWA .NET Bootcamp",
                        Reference = "",
                        Description = "HWA (Veli Bacik) grubunda düzenlenen bootcamp programı.",
                        SubSkills = new List<GetSubSkillDTO>()
                        {
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "C#"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = ".NET API"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "SeriLog"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "MemoryCache"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "Middleware"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "CQRS"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "Redis"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "RabbitMQ"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "gRPC"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "Microservice"
                            }
                        }
                    },
                    new GetExperienceWithTechnologyAndTypeDTO()
                    {
                        Id = Guid.NewGuid(),
                        StartDate = DateTime.Parse("01-12-2024"),
                        ExperienceType = calisma,
                        Provider = "",
                        Title = "NTN Yazılım - Full Stack Developer",
                        Reference = "",
                        Description = "NTN Yazılım Şirketinde Fullstack Developer Olarak Çalışıyorum.",
                        SubSkills = new List<GetSubSkillDTO>()
                        {
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "C#"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = ".NET API"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "Ef Core"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "Sql Server"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "JWT"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "Postman"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "Git"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "Javascript"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "JQuery"
                            },
                            new GetSubSkillDTO()
                            {
                                Id= Guid.NewGuid(),
                                Name = "Bootstrap"
                            }
                        }
                    }
                }
            };
            return Ok(new SuccessReturn<CvResponseDTO>(cvResponseDTO));
        }








    }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Controllers\Concrete\Entity\BlogPostCategoryController.cs ===

[İÇERİK]
﻿using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPost;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Presentation.API.Controllers.Base;
using TahaMucasirogluBlog.Service.Database.Abstract;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;

namespace TahaMucasirogluBlog.Presentation.API.Controllers.Concrete.Entity
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class BlogPostCategoryController : Controller<BlogPost, GetBlogPostDTO, AddBlogPostDTO, UpdateBlogPostDTO, DeleteBlogPostDTO>
    {
        public BlogPostCategoryController(IBlogPostDatabaseService service) : base(service)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Controllers\Concrete\Entity\BlogPostController.cs ===

[İÇERİK]
﻿using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPost;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Presentation.API.Controllers.Base;
using TahaMucasirogluBlog.Service.Database.Abstract;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;

namespace TahaMucasirogluBlog.Presentation.API.Controllers.Concrete.Entity
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class BlogPostController : Controller<BlogPost, GetBlogPostDTO, AddBlogPostDTO, UpdateBlogPostDTO, DeleteBlogPostDTO>
    {
        public BlogPostController(IBlogPostDatabaseService service) : base(service)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Controllers\Concrete\Entity\BlogPostTagController.cs ===

[İÇERİK]
﻿using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPostTag;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Presentation.API.Controllers.Base;
using TahaMucasirogluBlog.Service.Database.Abstract;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;

namespace TahaMucasirogluBlog.Presentation.API.Controllers.Concrete.Entity
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class BlogPostTagController : Controller<BlogPostTag, GetBlogPostTagDTO, AddBlogPostTagDTO, UpdateBlogPostTagDTO, DeleteBlogPostTagDTO>
    {
        public BlogPostTagController(IBlogPostTagDatabaseService service) : base(service)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Controllers\Concrete\Entity\CategoryController.cs ===

[İÇERİK]
﻿using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Category;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Presentation.API.Controllers.Base;
using TahaMucasirogluBlog.Service.Database.Abstract;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;

namespace TahaMucasirogluBlog.Presentation.API.Controllers.Concrete.Entity
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class CategoryController : Controller<Category, GetCategoryDTO, AddCategoryDTO, UpdateCategoryDTO, DeleteCategoryDTO>
    {
        public CategoryController(ICategoryDatabaseService service) : base(service)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Controllers\Concrete\Entity\CommentController.cs ===

[İÇERİK]
﻿
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Comment;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Presentation.API.Controllers.Base;
using TahaMucasirogluBlog.Service.Database.Abstract;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;

namespace TahaMucasirogluBlog.Presentation.API.Controllers.Concrete.Entity
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class CommentController : Controller<Comment, GetCommentDTO, AddCommentDTO, UpdateCommentDTO, DeleteCommentDTO>
    {
        public CommentController(ICommentDatabaseService service) : base(service)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Controllers\Concrete\Entity\ExperienceController.cs ===

[İÇERİK]
﻿
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Experience;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Presentation.API.Controllers.Base;
using TahaMucasirogluBlog.Service.Database.Abstract;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;

namespace TahaMucasirogluBlog.Presentation.API.Controllers.Concrete.Entity
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class ExperienceController : Controller<Experience, GetExperienceDTO, AddExperienceDTO, UpdateExperienceDTO, DeleteExperienceDTO>
    {
        public ExperienceController(IExperienceDatabaseService service) : base(service)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Controllers\Concrete\Entity\ExperienceTechnologyController.cs ===

[İÇERİK]
﻿using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceTechnology;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Presentation.API.Controllers.Abstract;
using TahaMucasirogluBlog.Presentation.API.Controllers.Base;
using TahaMucasirogluBlog.Service.Database.Abstract;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;

namespace TahaMucasirogluBlog.Presentation.API.Controllers.Concrete.Entity
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class ExperienceTechnologyController : Controller<ExperienceTechnology, GetExperienceTechnologyDTO, AddExperienceTechnologyDTO, UpdateExperienceTechnologyDTO, DeleteExperienceTechnologyDTO>
    {
        public ExperienceTechnologyController(IExperienceTechnologyDatabaseService service) : base(service)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Controllers\Concrete\Entity\ExperienceTypeController.cs ===

[İÇERİK]
﻿using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceType;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Presentation.API.Controllers.Abstract;
using TahaMucasirogluBlog.Presentation.API.Controllers.Base;
using TahaMucasirogluBlog.Service.Database.Abstract;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;

namespace TahaMucasirogluBlog.Presentation.API.Controllers.Concrete.Entity
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class ExperienceTypeController : Controller<ExperienceType, GetExperienceTypeDTO, AddExperienceTypeDTO, UpdateExperienceTypeDTO, DeleteExperienceTypeDTO>
    {
        public ExperienceTypeController(IExperienceTypeDatabaseService service) : base(service)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Controllers\Concrete\Entity\InfoController.cs ===

[İÇERİK]
﻿using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Info;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Presentation.API.Controllers.Abstract;
using TahaMucasirogluBlog.Presentation.API.Controllers.Base;
using TahaMucasirogluBlog.Service.Database.Abstract;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;

namespace TahaMucasirogluBlog.Presentation.API.Controllers.Concrete.Entity
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class InfoController : Controller<Info, GetInfoDTO, AddInfoDTO, UpdateInfoDTO, DeleteInfoDTO>
    {
        public InfoController(IInfoDatabaseService service) : base(service)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Controllers\Concrete\Entity\SkillController.cs ===

[İÇERİK]
﻿using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Skill;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Presentation.API.Controllers.Abstract;
using TahaMucasirogluBlog.Presentation.API.Controllers.Base;
using TahaMucasirogluBlog.Service.Database.Abstract;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;

namespace TahaMucasirogluBlog.Presentation.API.Controllers.Concrete.Entity
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class SkillController : Controller<Skill, GetSkillDTO, AddSkillDTO, UpdateSkillDTO, DeleteSkillDTO>
    {
        public SkillController(ISkillDatabaseService service) : base(service)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Controllers\Concrete\Entity\SocialLinkController.cs ===

[İÇERİK]
﻿using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SocialLink;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Presentation.API.Controllers.Base;
using TahaMucasirogluBlog.Service.Database.Abstract;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;

namespace TahaMucasirogluBlog.Presentation.API.Controllers.Concrete.Entity
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class SocialLinkController : Controller<SocialLink, GetSocialLinkDTO, AddSocialLinkDTO, UpdateSocialLinkDTO, DeleteSocialLinkDTO>
    {
        public SocialLinkController(ISocialLinkDatabaseService service) : base(service)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Controllers\Concrete\Entity\SubSkillController.cs ===

[İÇERİK]
﻿using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SubSkill;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Presentation.API.Controllers.Base;
using TahaMucasirogluBlog.Service.Database.Abstract;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;

namespace TahaMucasirogluBlog.Presentation.API.Controllers.Concrete.Entity
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class SubSkillController : Controller<SubSkill, GetSubSkillDTO, AddSubSkillDTO, UpdateSubSkillDTO, DeleteSubSkillDTO>
    {
        public SubSkillController(ISubSkillDatabaseService service) : base(service)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Controllers\Concrete\Entity\TagController.cs ===

[İÇERİK]
﻿using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Tag;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Presentation.API.Controllers.Base;
using TahaMucasirogluBlog.Service.Database.Abstract;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;

namespace TahaMucasirogluBlog.Presentation.API.Controllers.Concrete.Entity
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class TagController : Controller<Tag, GetTagDTO, AddTagDTO, UpdateTagDTO, DeleteTagDTO>
    {
        public TagController(ITagDatabaseService service) : base(service)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Controllers\Concrete\Entity\UserController.cs ===

[İÇERİK]
﻿using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.User;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Presentation.API.Controllers.Base;
using TahaMucasirogluBlog.Service.Database.Abstract;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;

namespace TahaMucasirogluBlog.Presentation.API.Controllers.Concrete.Entity
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class UserController : Controller<User, GetUserDTO, AddUserDTO, UpdateUserDTO, DeleteUserDTO>
    {
        public UserController(IUserDatabaseService service) : base(service)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Extensions\AuthenticationExtension.cs ===

[İÇERİK]
﻿using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using TahaMucasirogluBlog.Domain.Extensions;

namespace TahaMucasirogluBlog.Presentation.API.Extensions
{
    public static class AuthenticationExtension
    {
        public static void SetIdentity(this WebApplicationBuilder builder)
        {
            builder.Services
                .AddAuthentication(options =>
                {
                    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
                    options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
                })
                .AddJwtBearer(options =>
                {
                    //options.SaveToken = true;
                    //options.RequireHttpsMetadata = false; //TODO: Sadece geliştirme için
                    options.TokenValidationParameters = new TokenValidationParameters
                    {
                        ValidateIssuer = true,
                        ValidateAudience = true,
                        ValidateLifetime = true,
                        ValidateIssuerSigningKey = true,
                        ValidIssuer = builder.Configuration.GetJwtSettingsIssuerAppSettings(),
                        ValidAudience = builder.Configuration.GetJwtSettingsAudienceAppSettings(),
                        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration.GetJwtSettingsSecurityKeyAppSettings())),
                        ClockSkew = TimeSpan.FromMinutes(builder.Configuration.GetJwtSettingsClockSkewAppSettings()) //iletişimlerde esneklin için 3 dk
                    };
                }
                );
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Extensions\CorsExtension.cs ===

[İÇERİK]
﻿namespace TahaMucasirogluBlog.Presentation.API.Extensions
{
    public static class CorsExtension
    {
        static public void SetCors(this WebApplicationBuilder builder, string corsName, params string[] origins)
        {
            builder.Services.AddCors(options =>
            {
                options.AddPolicy(corsName, builder =>
                {
                    builder.WithOrigins(origins)
                           .AllowAnyHeader()
                           .AllowAnyMethod();
                });
            });
        }

        static public void SetAnyCors(this WebApplicationBuilder builder, string corsName)
        {
            builder.Services.AddCors(options =>
            {
                options.AddPolicy(corsName, builder =>
                {
                    builder.AllowAnyOrigin()
                           .AllowAnyHeader()
                           .AllowAnyMethod();
                });
            });
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Extensions\DatabaseExtension.cs ===

[İÇERİK]
﻿using Microsoft.EntityFrameworkCore;
using TahaMucasirogluBlog.Domain.Extensions;
using TahaMucasirogluBlog.Infrastructure.Repository.Context;

namespace TahaMucasirogluBlog.Presentation.API.Extensions
{
    static public class DatabaseExtension
    {
        static public void AddDatabases(this WebApplicationBuilder builder, Serilog.ILogger logger)
        {
            builder.AddDatabase(logger);
        }

        static public void AddDatabase(this WebApplicationBuilder builder, Serilog.ILogger logger)
        {
            int logLevel = builder.Configuration.GetAppSettingsValue<int>("DatabaseSettings:DatabaseLogLevel");
            bool enableSensitiveDataLogging = builder.Configuration.GetAppSettingsValue<bool>("DatabaseSettings:EnableSensitiveDataLogging");
            bool enableDetailedErrors = builder.Configuration.GetAppSettingsValue<bool>("DatabaseSettings:EnableDetailedErrors");
            string SqlServerConnectionStrings = builder.Configuration.GetConnectionString("SqlServerConnectionStrings") ?? throw new Exception("Connection String Bulunamadı");
            builder.Services.AddDbContext<TahaMucasirogluBlogContext>(opt =>
            {
                opt.UseSqlServer(SqlServerConnectionStrings);
                opt.UseLoggerFactory(LoggerFactory.Create(builder =>
                {
                    builder.AddConsole();
                    builder.SetMinimumLevel((LogLevel)logLevel);
                }));
                opt.UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);
                opt.LogTo(message => logger.Information(message), LogLevel.Information);
                opt.EnableSensitiveDataLogging(enableSensitiveDataLogging);
                opt.EnableDetailedErrors(enableDetailedErrors);
            });
            logger.Information($"Genel Veritabanına Bağlanıldı.\nLoglevel = {(LogLevel)logLevel}\nEnableSensitiveDataLogging = {enableSensitiveDataLogging}\nEnableDetailedErrors = {enableDetailedErrors}");
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Extensions\JsonExtension.cs ===

[İÇERİK]
﻿using Newtonsoft.Json;
namespace TahaMucasirogluBlog.Presentation.API.Extensions
{
    static public class JsonExtension
    {
        static public IMvcBuilder AddNewtonsoftJson(this WebApplicationBuilder builder)
        {
            return builder.Services
            .AddControllers()
            .AddNewtonsoftJson(opts =>
            {
                opts.SerializerSettings.ReferenceLoopHandling = ReferenceLoopHandling.Ignore;
                opts.SerializerSettings.NullValueHandling = NullValueHandling.Ignore;
            });
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Extensions\LoggerExtension.cs ===

[İÇERİK]
﻿using Serilog;
using Serilog.Events;
using Serilog.Sinks.SystemConsole.Themes;
using System.Text;
using TahaMucasirogluBlog.Domain.Extensions;

namespace TahaMucasirogluBlog.Presentation.API.Extensions
{
    static public class LoggerExtension
    {
        static public Serilog.ILogger AddLogger(this WebApplicationBuilder builder, bool LOG_CONNECTION_STATUS)
        {
            int logLevel = builder.Configuration.GetLogLevelAppSettings();

            builder.Services.AddLogging();
            return builder.AddSeriLoggerToService(logLevel, LOG_CONNECTION_STATUS);

        }

        static private Serilog.ILogger AddSeriLoggerToService(this WebApplicationBuilder builder, int logLevel, bool LOG_CONNECTION_STATUS)
        {
            if (LOG_CONNECTION_STATUS)
            {
                // Serilog yapılandırması
                Log.Logger = new LoggerConfiguration()
                    .MinimumLevel.Is((LogEventLevel)logLevel)
                    .WriteTo.Async(e => e.Console(theme: SystemConsoleTheme.Colored, outputTemplate: "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level}] {Message:lj}{NewLine}{Exception}")) // Konsola loglama
                    .WriteTo.Async(e => e.File(
                        path: "../../Logs/ApiLog-.txt", // Log dosyalarının bulunduğu klasör
                        rollingInterval: RollingInterval.Day, // Günlük loglama
                        rollOnFileSizeLimit: true,
                        fileSizeLimitBytes: 1L * 1024 * 1024 * 1024,//1GB
                        retainedFileCountLimit: 100, //100 adet 1 gb sonrası ne yapıyor bakmadım
                        outputTemplate: "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level}] {Message:lj}{NewLine}{Exception}", // Log formatı
                        encoding: Encoding.UTF8
                    )) // Performans için asenkron dosya loglama
                    .CreateLogger();
                builder.Logging.ClearProviders();
                builder.Logging.AddSerilog(Log.Logger);
                // Serilog'u kullanması için Host yapılandırması
                builder.Host.UseSerilog();
                return Log.Logger;
            }
            else
            {
                return new LoggerConfiguration().MinimumLevel.Is(LogEventLevel.Fatal).CreateLogger(); //kapatılırsa en yüksek levele setleyip olabildiğince boş gönderiyorum tam kapatma nasıl bakmadım ama bunu ileride serilog kullanan kendi servisime çevirerek tam kontrol sağlamak istiyorum.
            }
        }

    }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Extensions\MapperExtension.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Application.Mapper.MapProfile.Entity;
using TahaMucasirogluBlog.Application.Mapper.MapProfile.Response;

namespace TahaMucasirogluBlog.Presentation.API.Extensions
{
    static public class MapperExtension
    {
        public static void AddMapperMapProfile(this IServiceCollection services)
        {
            services.AddAutoMapper(typeof(BlogPostCategoryMapProfile));
            services.AddAutoMapper(typeof(BlogPostMapProfile));
            services.AddAutoMapper(typeof(BlogPostTagMapProfile));
            services.AddAutoMapper(typeof(CategoryMapProfile));
            services.AddAutoMapper(typeof(CommentMapProfile));
            services.AddAutoMapper(typeof(TagMapProfile));
            services.AddAutoMapper(typeof(UserMapProfile));
            services.AddAutoMapper(typeof(CvResponseDTOMappingProfile));
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Extensions\MiddlewaresExtension.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Presentation.API.Middlewares;

namespace TahaMucasirogluBlog.Presentation.API.Extensions
{
    static public class AddMiddlewaresExtension
    {
        static public void AddMiddlewares(this WebApplication app)
        {
            app.UseMiddleware<ErrorHandlingMiddleware>();

        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Extensions\RateLimiterExtension.cs ===

[İÇERİK]
﻿using System.Threading.RateLimiting;
using TahaMucasirogluBlog.Domain.Extensions;

namespace TahaMucasirogluBlog.Presentation.API.Extensions
{
    public static class RateLimiterExtension
    {
        static public void AddRateLimiter(this WebApplicationBuilder builder)
        {
            builder.Services.AddRateLimiter(options =>
            {
                options.AddPolicy("IpPerSecond", httpContext =>
                {
                    // Remote IP adresini al. Null ise fallback ver.
                    var ip = httpContext.Connection.RemoteIpAddress?.ToString() ?? "unknown";

                    // Partition key olarak IP'yi kullan.
                    return RateLimitPartition.GetFixedWindowLimiter(
                        partitionKey: ip,
                        factory: key => new FixedWindowRateLimiterOptions
                        {
                            PermitLimit = builder.Configuration.GetIpRateLimitFromSecondAppSettings(), // Saniyede 10 istek
                            Window = TimeSpan.FromSeconds(1),
                            QueueProcessingOrder = QueueProcessingOrder.OldestFirst,
                            QueueLimit = 0 // Kuyruğa alma, direk 429 dön
                        });
                });
            });
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Extensions\ScopedExtension.cs ===

[İÇERİK]
﻿using Microsoft.EntityFrameworkCore;
using TahaMucasirogluBlog.Application.Managers.LoggerManager;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Concrete;
using TahaMucasirogluBlog.Service.Cv.Abstract;
using TahaMucasirogluBlog.Service.Cv.Concrete;
using TahaMucasirogluBlog.Service.Database.Abstract;
using TahaMucasirogluBlog.Service.Database.Concrete;

namespace TahaMucasirogluBlog.Presentation.API.Extensions
{
    static public class ScopedExtension
    {
        public static void AddScoped(this WebApplicationBuilder builder)
        {
           



            builder.Services.AddScoped<IBlogPostCategoryRepository, BlogPostCategoryRepository>();
            builder.Services.AddScoped<IBlogPostRepository, BlogPostRepository>();
            builder.Services.AddScoped<IBlogPostTagRepository, BlogPostTagRepository>();
            builder.Services.AddScoped<ICategoryRepository, CategoryRepository>();
            builder.Services.AddScoped<ICommentRepository, CommentRepository>();
            builder.Services.AddScoped<IExperienceRepository, ExperienceRepository>();
            builder.Services.AddScoped<IExperienceTechnologyRepository, ExperienceTechnologyRepository>();
            builder.Services.AddScoped<IExperienceTypeRepository, ExperienceTypeRepository>();
            builder.Services.AddScoped<IInfoRepository, InfoRepository>();
            builder.Services.AddScoped<ISkillRepository, SkillRepository>();
            builder.Services.AddScoped<ISocialLinkRepository, SocialLinkRepository>();
            builder.Services.AddScoped<ISubSkillRepository, SubSkillRepository>();
            builder.Services.AddScoped<ITagRepository, TagRepository>();
            builder.Services.AddScoped<IUserRepository, UserRepository>();





            builder.Services.AddScoped<IBlogPostCategoryDatabaseService, BlogPostCategoryDatabaseService>();
            builder.Services.AddScoped<IBlogPostDatabaseService, BlogPostDatabaseService>();
            builder.Services.AddScoped<IBlogPostTagDatabaseService, BlogPostTagDatabaseService>();
            builder.Services.AddScoped<ICategoryDatabaseService, CategoryDatabaseService>();
            builder.Services.AddScoped<ICommentDatabaseService, CommentDatabaseService>();
            builder.Services.AddScoped<IExperienceDatabaseService, ExperienceDatabaseService>();
            builder.Services.AddScoped<IExperienceTechnologyDatabaseService, ExperienceTechnologyDatabaseService>();
            builder.Services.AddScoped<IExperienceTypeDatabaseService, ExperienceTypeDatabaseService>();
            builder.Services.AddScoped<IInfoDatabaseService, InfoDatabaseService>();
            builder.Services.AddScoped<ISkillDatabaseService, SkillDatabaseService>();
            builder.Services.AddScoped<ISocialLinkDatabaseService, SocialLinkDatabaseService>();
            builder.Services.AddScoped<ISubSkillDatabaseService, SubSkillDatabaseService>();
            builder.Services.AddScoped<ITagDatabaseService, TagDatabaseService>();
            builder.Services.AddScoped<IUserDatabaseService, UserDatabaseService>();




            builder.Services.AddScoped<ICvService, CvService>();



        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Extensions\SingletonExtension.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Application.Managers.PasswordManager;

namespace TahaMucasirogluBlog.Presentation.API.Extensions
{
    static public class SingletonExtension
    {
        public static void AddSingleton(this WebApplicationBuilder builder)
        {
            builder.Services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Extensions\ValidationExtension.cs ===

[İÇERİK]
﻿using FluentValidation;
using TahaMucasirogluBlog.Application.Validation.Concrete.Entity.BlogPost;
using TahaMucasirogluBlog.Application.Validation.Concrete.Entity.BlogPostCategory;
using TahaMucasirogluBlog.Application.Validation.Concrete.Entity.BlogPostTag;
using TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Category;
using TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Comment;
using TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Experience;
using TahaMucasirogluBlog.Application.Validation.Concrete.Entity.ExperienceTechnology;
using TahaMucasirogluBlog.Application.Validation.Concrete.Entity.ExperienceType;
using TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Info;
using TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Skill;
using TahaMucasirogluBlog.Application.Validation.Concrete.Entity.SubSkill;
using TahaMucasirogluBlog.Application.Validation.Concrete.Entity.Tag;
using TahaMucasirogluBlog.Application.Validation.Concrete.Entity.User;

namespace TahaMucasirogluBlog.Presentation.API.Extensions
{
    static public class ValidationExtension
    {
        public static void AddFluentValidationValidators(this IServiceCollection services)
        {

            services.AddValidatorsFromAssemblyContaining<AddBlogPostCategoryDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<AddBlogPostCategoryListDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<UpdateBlogPostCategoryDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<UpdateBlogPostCategoryListDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<DeleteBlogPostCategoryDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<DeleteBlogPostCategoryListDTOValidation>();

            services.AddValidatorsFromAssemblyContaining<AddBlogPostDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<AddBlogPostListDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<UpdateBlogPostDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<UpdateBlogPostListDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<DeleteBlogPostDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<DeleteBlogPostListDTOValidation>();

            services.AddValidatorsFromAssemblyContaining<AddBlogPostTagDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<AddBlogPostTagListDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<UpdateBlogPostTagDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<UpdateBlogPostTagListDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<DeleteBlogPostTagDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<DeleteBlogPostTagListDTOValidation>();

            services.AddValidatorsFromAssemblyContaining<AddCategoryDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<AddCategoryListDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<UpdateCategoryDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<UpdateCategoryListDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<DeleteCategoryDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<DeleteCategoryListDTOValidation>();

            services.AddValidatorsFromAssemblyContaining<AddCommentDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<AddCommentListDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<UpdateCommentDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<UpdateCommentListDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<DeleteCommentDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<DeleteCommentListDTOValidation>();

            services.AddValidatorsFromAssemblyContaining<AddExperienceDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<AddExperienceListDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<UpdateExperienceDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<UpdateExperienceListDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<DeleteExperienceDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<DeleteExperienceListDTOValidation>();

            services.AddValidatorsFromAssemblyContaining<AddExperienceTechnologyDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<AddExperienceTechnologyListDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<UpdateExperienceTechnologyDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<UpdateExperienceTechnologyListDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<DeleteExperienceTechnologyDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<DeleteExperienceTechnologyListDTOValidation>();

            services.AddValidatorsFromAssemblyContaining<AddExperienceTypeDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<AddExperienceTypeListDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<UpdateExperienceTypeDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<UpdateExperienceTypeListDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<DeleteExperienceTypeDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<DeleteExperienceTypeListDTOValidation>();

            services.AddValidatorsFromAssemblyContaining<AddInfoDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<AddInfoListDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<UpdateInfoDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<UpdateInfoListDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<DeleteInfoDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<DeleteInfoListDTOValidation>();

            services.AddValidatorsFromAssemblyContaining<AddSkillDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<AddSkillListDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<UpdateSkillDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<UpdateSkillListDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<DeleteSkillDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<DeleteSkillListDTOValidation>();

            services.AddValidatorsFromAssemblyContaining<AddSubSkillDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<AddSubSkillListDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<UpdateSubSkillDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<UpdateSubSkillListDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<DeleteSubSkillDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<DeleteSubSkillListDTOValidation>();

            services.AddValidatorsFromAssemblyContaining<AddTagDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<AddTagListDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<UpdateTagDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<UpdateTagListDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<DeleteTagDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<DeleteTagListDTOValidation>();

            services.AddValidatorsFromAssemblyContaining<AddUserDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<AddUserListDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<UpdateUserDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<UpdateUserListDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<DeleteUserDTOValidation>();
            services.AddValidatorsFromAssemblyContaining<DeleteUserListDTOValidation>();

        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Middlewares\ErrorHandlingMiddleware.cs ===

[İÇERİK]
﻿using System.Net;
using System.Text.Json;

namespace TahaMucasirogluBlog.Presentation.API.Middlewares
{
    public class ErrorHandlingMiddleware
    {
        private readonly RequestDelegate _next;
        private readonly ILogger<ErrorHandlingMiddleware> _logger; // Serilog ILogger

        public ErrorHandlingMiddleware(RequestDelegate next, ILogger<ErrorHandlingMiddleware> logger)
        {
            _next = next;
            _logger = logger;
        }

        public async Task InvokeAsync(HttpContext context)
        {
            try
            {
                await _next(context);
            }
            catch (Exception ex)
            {
                // Yakalanan hatayı loglayabilirsiniz
                _logger.LogError(ex, "Beklenmeyen bir hata meydana geldi.");

                await HandleExceptionAsync(context, ex);
            }
        }

        private Task HandleExceptionAsync(HttpContext context, Exception ex)
        {
            var errorResponse = new
            {
                Status = false,
                Message = ex.Message,
                ExceptionType = ex.GetType().Name
            };
            var errorJson = JsonSerializer.Serialize(errorResponse);

            context.Response.ContentType = "application/json";
            context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;
            return context.Response.WriteAsync(errorJson);
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Program.cs ===

[İÇERİK]
using System.Threading.RateLimiting;
using TahaMucasirogluBlog.Domain.Extensions;
using TahaMucasirogluBlog.Presentation.API.Extensions;

internal class Program
{
    private static void Main(string[] args)
    {
        var builder = WebApplication.CreateBuilder(args);


        builder.AddRateLimiter();

        string CorsName = builder.Configuration.GetCORSNameAppSettings();
        string CorsURLsString = builder.Configuration.GetCorsURLsAppSettings();
        string[] CorsUrls = CorsURLsString.Split(" ");
        bool AnyCors = builder.Configuration.GetAnyCorsAppSettings();


        builder.Services.AddHttpContextAccessor();
        builder.Services.AddControllers();
        builder.Services.AddEndpointsApiExplorer();
        builder.Services.AddSwaggerGen();


        Serilog.ILogger logger = builder.AddLogger(true);


        logger.Information($"CorsName  =  {CorsName}");
        logger.Information($"CorsURLsString  =  {CorsURLsString}");
        logger.Information($"AnyCors  =  {AnyCors}");

        builder.AddScoped();
        builder.AddSingleton();
        builder.AddDatabases(logger);

        builder.Services.AddMapperMapProfile();
        builder.Services.AddFluentValidationValidators();

        if (AnyCors) { builder.SetAnyCors(CorsName); } else { builder.SetCors(CorsName, CorsUrls); }

        builder.SetIdentity();




        var app = builder.Build();

        // Configure the HTTP request pipeline.
        if (app.Environment.IsDevelopment())
        {
            app.UseSwagger();
            app.UseSwaggerUI();
        }

        app.UseHttpsRedirection();

        app.UseAuthentication();
        app.UseAuthorization();

        app.MapControllers();



        app.Run();
    }
}


=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\Properties\launchSettings.json ===

[İÇERİK]
﻿{
  "$schema": "http://json.schemastore.org/launchsettings.json",
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:64596",
      "sslPort": 44306
    }
  },
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "launchUrl": "swagger",
      "applicationUrl": "http://localhost:5000",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "https": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "launchUrl": "swagger",
      "applicationUrl": "https://localhost:7060;http://localhost:5262",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "launchUrl": "swagger",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\TahaMucasirogluBlog.Presentation.API.csproj ===

[İÇERİK]
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
	  <!--uyarıları hata göstererek düzgün ilerleme sağlar-->
	  <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="8.0.11" />
    <PackageReference Include="Microsoft.AspNetCore.Mvc.NewtonsoftJson" Version="8.0.11" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="8.0.11">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="8.0.11">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.6.2" />
    <PackageReference Include="System.IdentityModel.Tokens.Jwt" Version="8.12.1" />
    <PackageReference Include="System.Threading.RateLimiting" Version="9.0.7" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\Service\TahaMucasirogluBlog.Service.Cv\TahaMucasirogluBlog.Service.Cv.csproj" />
    <ProjectReference Include="..\..\Service\TahaMucasirogluBlog.Service.Database\TahaMucasirogluBlog.Service.Database.csproj" />
  </ItemGroup>

</Project>



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\appsettings.Development.json ===

[İÇERİK]
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}



=== DOSYA: TahaMucasirogluBlog\Presentation\TahaMucasirogluBlog.Presentation.API\appsettings.json ===

[İÇERİK]
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",

  "CORS": {
    "CorsName": "TahaCors",
    "CorsURLs": "http://localhost:5001", //birden fazla ise   (boşluk) ile ayırın. başka boşluk olmasın
    "AnyCors": true
  },

  "JwtSettings": {
    "Issuer": "TahaMucasirogluBlog",
    "Audience": "TahaMucasirogluBlog",
    "SecurityKey": "8eea278f75257a0c4cbd003e2db4e0544f70af43885a4a5d0e84bf65837c2c906379a92379d8866aa029f63331be3fda0c5e4c65732f849d747157525526954f",
    "ClockSkew": 5, //dakika
    "RefreshRefreshToken": false, // false: eğer refresh token süresi biterse login ekranına atar. true: refresh token süresi biterse yeni refresh token atar ve devam eder.
    "AccessTokenExpiration": 30, //3, // Dakika
    "RefreshTokenExpiration": 4320 // Dakika (3 gün)
  },

  "DatabaseSettings": {
    "DatabaseLogLevel": 0, // 0 = hepsi   6 = hiçbiri
    "TrackQuery": false,
    "EnableSensitiveDataLogging": true,
    "EnableDetailedErrors": true
  },

  "PasswordSettings": {
    "Salt": "Taha Mucasiroglu Blog Salt" //veritabanı olduktan sonra burası ellenmemeli
  },



  "LogLevel": 0, // 0 = hepsi   6 = hiçbiri
  "ConnectionStrings": { //kullanılmıyor şuan kaldırılacak burası
    "SqlServerConnectionStrings": "Data Source=.\\TAHAMUCASIROGLU;User Id=taha;Password=123456;Initial Catalog=TAHAMUCASIROGLU_BLOG_DB;TrustServerCertificate=true;MultipleActiveResultSets=True"
  },




  "IpRateLimit": 10



}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Cv\Abstract\ICvService.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Domain.DTOs.Concrete.Response;
using TahaMucasirogluBlog.Domain.Return.Abstract;

namespace TahaMucasirogluBlog.Service.Cv.Abstract
{
    public interface ICvService
    {
        public Task<IReturn<CvResponseDTO>> GetCV();
    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Cv\Concrete\CvService.cs ===

[İÇERİK]
﻿using AutoMapper;
using Microsoft.Extensions.Logging;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Experience;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Info;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Skill;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Response;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Domain.Return.Abstract;
using TahaMucasirogluBlog.Domain.Return.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Service.Cv.Abstract;

namespace TahaMucasirogluBlog.Service.Cv.Concrete
{
    public class CvService : ICvService
    {
        private readonly IExperienceRepository experienceRepository;
        private readonly IInfoRepository infoRepository;
        private readonly ISkillRepository skillRepository;
        private readonly ILogger<CvService> logger;
        private readonly IMapper mapper;

        public CvService
            (
                IInfoRepository infoRepository,
                ISkillRepository skillRepository,
                IExperienceRepository experienceRepository,
                ILogger<CvService> logger,
                IMapper mapper
            )
        {
            this.skillRepository = skillRepository;
            this.infoRepository = infoRepository;
            this.experienceRepository = experienceRepository;
            this.logger = logger;
            this.mapper = mapper;
        }
        

        public async Task<IReturn<CvResponseDTO>> GetCV()
        {
            try
            {
                IReturn<Info> info = await infoRepository.GetLastAsync(e => !e.IsDeleted);
                IReturn<List<Skill>> skill = await skillRepository.GetAllWithIncludesAsync(null, e => e.SubSkills);
                IReturn<List<Experience>> experience = await experienceRepository.GetAllWithIncludesAsync(null, e => e.ExperienceType, e => e.ExperienceTechnologies);

                if (!info.Status || !skill.Status || !experience.Status )
                {
                    return new ErrorReturn<CvResponseDTO>("One or more database fetch operations failed.");
                }

                CvResponseDTO cvDto = new CvResponseDTO
                {
                    Info = mapper.Map<GetInfoDTO>(info.Data),
                    Skills = mapper.Map<List<GetSkillWithSubSkillsDTO>>(skill.Data),
                    Experiences = mapper.Map<List<GetExperienceWithTechnologyAndTypeDTO>>(experience.Data)
                };

                return new SuccessReturn<CvResponseDTO>(cvDto);



            }
            catch (Exception e)
            {
                logger.LogError(e, $"{nameof(CvService)} içinde {nameof(GetCV)} içinde hata var. hata mesajı = {e.Message}");
                return new ErrorReturn<CvResponseDTO>();
            }
        }



    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Cv\TahaMucasirogluBlog.Service.Cv.csproj ===

[İÇERİK]
﻿<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
	  <!--uyarıları hata göstererek düzgün ilerleme sağlar-->
	  <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
  </PropertyGroup>

  <ItemGroup>
    <Folder Include="Base\" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\TahaMucasirogluBlog.Infrastructure.Repository.csproj" />
  </ItemGroup>

</Project>



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Abstract\Base\IDatabaseService.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Abstract;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Request;
using TahaMucasirogluBlog.Domain.Entities.Abstract;
using TahaMucasirogluBlog.Domain.Return.Abstract;

namespace TahaMucasirogluBlog.Service.Database.Abstract.Base
{

    public interface IDatabaseService<TEntity, TResponse> : IDisposable, IAsyncDisposable
        where TEntity : class, IEntity
        where TResponse : class, IGetDTO
    {
        public IReturn<TResponse> GetById(IdRequestDTO model) => Get(model, e => e.Id == model.Id);
        public Task<IReturn<TResponse>> GetByIdAsync(IdRequestDTO model) => GetAsync(model, e => e.Id == model.Id);

        public IReturn<TResponse> Get(IdRequestDTO model, Expression<Func<TEntity, bool>> filter);
        public Task<IReturn<TResponse>> GetAsync(IdRequestDTO model, Expression<Func<TEntity, bool>> filter);

        public IReturn<IEnumerable<TResponse>> GetAll(IdRequestDTO model, Expression<Func<TEntity, bool>>? filter = null, bool reverse = false);
        public Task<IReturn<IEnumerable<TResponse>>> GetAllAsync(IdRequestDTO model, Expression<Func<TEntity, bool>>? filter = null, bool reverse = false);

        public IReturn<IEnumerable<TResponse>> GetAllDeleted(IdRequestDTO model, Expression<Func<TEntity, bool>>? filter = null, bool reverse = false);
        public Task<IReturn<IEnumerable<TResponse>>> GetAllDeletedAsync(IdRequestDTO model, Expression<Func<TEntity, bool>>? filter = null, bool reverse = false);

        public IReturn<TResponse> GetDeleted(IdRequestDTO model, Expression<Func<TEntity, bool>> filter);
        public Task<IReturn<TResponse>> GetDeletedAsync(IdRequestDTO model, Expression<Func<TEntity, bool>> filter);

        public IReturn<int> Count(IdRequestDTO model, Expression<Func<TEntity, bool>>? filter = null);
        public Task<IReturn<int>> CountAsync(IdRequestDTO model, Expression<Func<TEntity, bool>>? filter = null);

        public IReturn<bool> IsExist(IdRequestDTO model, Expression<Func<TEntity, bool>> filter);
        public Task<IReturn<bool>> IsExistAsync(IdRequestDTO model, Expression<Func<TEntity, bool>> filter);
    }

    public interface IDatabaseService<TEntity, TResponse, TAddRequest> : IDatabaseService<TEntity, TResponse>
        where TEntity : class, IEntity
        where TResponse : class, IGetDTO
        where TAddRequest : class, IAddDTO
    {

        public IReturn<TResponse> Add(TAddRequest entity);
        public IReturn<IEnumerable<TResponse>> Add(IEnumerable<TAddRequest> entity);
        public Task<IReturn<TResponse>> AddAsync(TAddRequest entity);
        public Task<IReturn<IEnumerable<TResponse>>> AddAsync(IEnumerable<TAddRequest> entity);


    }

    public interface IDatabaseService<TEntity, TResponse, TAddRequest, TUpdateRequest> : IDatabaseService<TEntity, TResponse, TAddRequest>
        where TEntity : class, IEntity
        where TResponse : class, IGetDTO
        where TAddRequest : class, IAddDTO
        where TUpdateRequest : class, IUpdateDTO
    {

        public IReturn<TResponse> Update(TUpdateRequest entity);
        public IReturn<IEnumerable<TResponse>> Update(IEnumerable<TUpdateRequest> entity);
        public Task<IReturn<TResponse>> UpdateAsync(TUpdateRequest entity);
        public Task<IReturn<IEnumerable<TResponse>>> UpdateAsync(IEnumerable<TUpdateRequest> entity);

    }


    public interface IDatabaseService<TEntity, TResponse, TAddRequest, TUpdateRequest, TDeleteRequest> : IDatabaseService<TEntity, TResponse, TAddRequest, TUpdateRequest>
        where TEntity : class, IEntity
        where TResponse : class, IGetDTO
        where TAddRequest : class, IAddDTO
        where TUpdateRequest : class, IUpdateDTO
        where TDeleteRequest : class, IDeleteDTO
    {

        public IReturn<TResponse> Delete(TDeleteRequest model);
        public IReturn<IEnumerable<TResponse>> Delete(IEnumerable<TDeleteRequest> model);
        public Task<IReturn<TResponse>> DeleteAsync(TDeleteRequest model);
        public Task<IReturn<IEnumerable<TResponse>>> DeleteAsync(IEnumerable<TDeleteRequest> model);


    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Abstract\IBlogPostCategoryDatabaseService.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPostCategory;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;

namespace TahaMucasirogluBlog.Service.Database.Abstract
{
    public interface IBlogPostCategoryDatabaseService : IDatabaseService<BlogPostCategory, GetBlogPostCategoryDTO, AddBlogPostCategoryDTO, UpdateBlogPostCategoryDTO, DeleteBlogPostCategoryDTO>
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Abstract\IBlogPostDatabaseService.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPost;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;

namespace TahaMucasirogluBlog.Service.Database.Abstract
{
    public interface IBlogPostDatabaseService : IDatabaseService<BlogPost, GetBlogPostDTO, AddBlogPostDTO, UpdateBlogPostDTO, DeleteBlogPostDTO>
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Abstract\IBlogPostTagDatabaseService.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPostTag;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;

namespace TahaMucasirogluBlog.Service.Database.Abstract
{
    public interface IBlogPostTagDatabaseService : IDatabaseService<BlogPostTag, GetBlogPostTagDTO, AddBlogPostTagDTO, UpdateBlogPostTagDTO, DeleteBlogPostTagDTO>
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Abstract\ICategoryDatabaseService.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Category;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;

namespace TahaMucasirogluBlog.Service.Database.Abstract
{
    public interface ICategoryDatabaseService : IDatabaseService<Category, GetCategoryDTO, AddCategoryDTO, UpdateCategoryDTO, DeleteCategoryDTO>
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Abstract\ICommentDatabaseService.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Comment;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;

namespace TahaMucasirogluBlog.Service.Database.Abstract
{
    public interface ICommentDatabaseService : IDatabaseService<Comment, GetCommentDTO, AddCommentDTO, UpdateCommentDTO, DeleteCommentDTO>
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Abstract\IExperienceDatabaseService.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Experience;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;

namespace TahaMucasirogluBlog.Service.Database.Abstract
{
    public interface IExperienceDatabaseService : IDatabaseService<Experience, GetExperienceDTO, AddExperienceDTO, UpdateExperienceDTO, DeleteExperienceDTO>
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Abstract\IExperienceTechnologyDatabaseService.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceTechnology;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;

namespace TahaMucasirogluBlog.Service.Database.Abstract
{
    public interface IExperienceTechnologyDatabaseService : IDatabaseService<ExperienceTechnology, GetExperienceTechnologyDTO, AddExperienceTechnologyDTO, UpdateExperienceTechnologyDTO, DeleteExperienceTechnologyDTO>
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Abstract\IExperienceTypeDatabaseService.cs ===

[İÇERİK]
﻿using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceType;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;

namespace TahaMucasirogluBlog.Service.Database.Abstract
{
    public interface IExperienceTypeDatabaseService : IDatabaseService<ExperienceType, GetExperienceTypeDTO, AddExperienceTypeDTO, UpdateExperienceTypeDTO, DeleteExperienceTypeDTO>
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Abstract\IInfoDatabaseService.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Info;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;
using TahaMucasirogluBlog.Service.Database.Base;

namespace TahaMucasirogluBlog.Service.Database.Abstract
{
    public interface IInfoDatabaseService : IDatabaseService<Info, GetInfoDTO, AddInfoDTO, UpdateInfoDTO, DeleteInfoDTO>
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Abstract\ISkillDatabaseService.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Skill;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;
using TahaMucasirogluBlog.Service.Database.Base;

namespace TahaMucasirogluBlog.Service.Database.Abstract
{
    public interface ISkillDatabaseService : IDatabaseService<Skill, GetSkillDTO, AddSkillDTO,UpdateSkillDTO,DeleteSkillDTO>
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Abstract\ISocialLinkDatabaseService.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SocialLink;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;

namespace TahaMucasirogluBlog.Service.Database.Abstract
{
    public interface ISocialLinkDatabaseService : IDatabaseService<SocialLink, GetSocialLinkDTO, AddSocialLinkDTO, UpdateSocialLinkDTO, DeleteSocialLinkDTO>
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Abstract\ISubSkillDatabaseService.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SubSkill;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;
using TahaMucasirogluBlog.Service.Database.Base;

namespace TahaMucasirogluBlog.Service.Database.Abstract
{
    public interface ISubSkillDatabaseService : IDatabaseService<SubSkill, GetSubSkillDTO, AddSubSkillDTO, UpdateSubSkillDTO, DeleteSubSkillDTO>
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Abstract\ITagDatabaseService.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Tag;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;

namespace TahaMucasirogluBlog.Service.Database.Abstract
{
    public interface ITagDatabaseService : IDatabaseService<Tag, GetTagDTO, AddTagDTO, UpdateTagDTO, DeleteTagDTO>
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Abstract\IUserDatabaseService.cs ===

[İÇERİK]
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.User;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;

namespace TahaMucasirogluBlog.Service.Database.Abstract
{
    public interface IUserDatabaseService : IDatabaseService<User, GetUserDTO, AddUserDTO, UpdateUserDTO, DeleteUserDTO>
    {
    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Base\DatabaseService.cs ===

[İÇERİK]
﻿using AutoMapper;
using FluentValidation;
using FluentValidation.Results;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using System.Linq.Expressions;
using TahaMucasirogluBlog.Domain.DTOs.Abstract;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Request;
using TahaMucasirogluBlog.Domain.Entities.Abstract;
using TahaMucasirogluBlog.Domain.Extensions;
using TahaMucasirogluBlog.Domain.Return.Abstract;
using TahaMucasirogluBlog.Domain.Return.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;
using TahaMucasirogluBlog.Service.Database.Abstract.Base;

namespace TahaMucasirogluBlog.Service.Database.Base
{

    public abstract class DatabaseService<TEntity>
      where TEntity : class, IEntity
    {
        internal readonly IRepository<TEntity> repository;
        internal readonly IMapper mapper;
        internal readonly IConfiguration configuration;
        internal readonly ILogger logger;
        public DatabaseService(
            IRepository<TEntity> repository,
            IMapper mapper,
            IConfiguration configuration,
            ILogger logger)
        {
            this.repository = repository;
            this.mapper = mapper;
            this.configuration = configuration;
            this.logger = logger;
        }

        public ErrorReturn<T> ValidationReturn<T>(ValidationResult validationResult)
            => new ErrorReturn<T>(message: string.Join("", validationResult.Errors.Select(e => $"{e.PropertyName} - {e.ErrorMessage}\n")));



        public IReturn<Tout> AutoReturn<Tout, Tin>(IReturn<Tin> model, string message = "", string errorMessage = "", bool log = true)
        {
            try
            {
                if (model.Status && model.Data != null)
                {
                    return new SuccessReturn<Tout>(message: message, data: mapper.Map<Tout>(model.Data));
                }
                else if (model.Status && model.Data == null)
                {
                    return new SuccessReturn<Tout>(message: message);
                }
                else //if(!model.Status)
                {
                    logger.LogError(model.Exception, $"Serivce AutoReturn Hata. \nKullanıcı Hata Mesajı = {errorMessage}\nGelen Hata Mesajı = {model.Message}\nHata = {model.Exception?.Message}");
                    return new ErrorReturn<Tout>(message: errorMessage);
                }

            }
            catch (Exception e)
            {
                logger.LogError(e, $"Serivce AutoReturn Hata. \nKullanıcı Hata Mesajı = {errorMessage}\nGelen Hata Mesajı = {model.Message}\nHata = {model.Exception?.Message}\nException Hatası = {e.Message}");
                return new ErrorReturn<Tout>();
            }

        }





    }



    public abstract class DatabaseService<TEntity, TResponse> : DatabaseService<TEntity>, IDatabaseService<TEntity, TResponse>
       where TEntity : class, IEntity
       where TResponse : class, IGetDTO
    {
        public DatabaseService(
            IRepository<TEntity> repository,
            IMapper mapper,
            IConfiguration configuration,
            ILogger<DatabaseService<TEntity, TResponse>> logger) : base(repository, mapper, configuration, logger) { }


        public virtual IReturn<int> Count(IdRequestDTO model, Expression<Func<TEntity, bool>>? filter = null)
        {
            return repository.Count(filter);
        }

        public virtual async Task<IReturn<int>> CountAsync(IdRequestDTO model, Expression<Func<TEntity, bool>>? filter = null)
        {
            return await repository.CountAsync(filter);
        }

        public virtual void Dispose()
        {
            repository.Dispose();
        }

        public virtual async ValueTask DisposeAsync()
        {
            await repository.DisposeAsync();
        }

        public virtual IReturn<TResponse> Get(IdRequestDTO model, Expression<Func<TEntity, bool>> filter)
        {
            logger.LogInformation($"{model.IslemYapanKullaniciId} idli kullanıcı, {model.Id} değeri ile birlikte, \n {filter.ToJson()} \n filtresi ile Get Sorgusu yaptı.");
            return AutoReturn<TResponse, TEntity>(repository.Get(filter));
        }

        public virtual IReturn<IEnumerable<TResponse>> GetAll(IdRequestDTO model, Expression<Func<TEntity, bool>>? filter = null, bool reverse = false)
        {
            logger.LogInformation($"{model.IslemYapanKullaniciId} idli kullanıcı, {model.Id} değeri ile birlikte, \n {filter.ToJson()} \n filtresi ile GetAll Sorgusu yaptı.");
            return AutoReturn<IEnumerable<TResponse>, IEnumerable<TEntity>>(repository.GetAll(filter));
        }

        public virtual async Task<IReturn<IEnumerable<TResponse>>> GetAllAsync(IdRequestDTO model, Expression<Func<TEntity, bool>>? filter = null, bool reverse = false)
        {
            logger.LogInformation($"{model.IslemYapanKullaniciId} idli kullanıcı, {model.Id} değeri ile birlikte, \n {filter.ToJson()} \n filtresi ile GetAllAsync Sorgusu yaptı.");
            return AutoReturn<IEnumerable<TResponse>, IEnumerable<TEntity>>(await repository.GetAllAsync(filter));
        }

        public virtual IReturn<IEnumerable<TResponse>> GetAllDeleted(IdRequestDTO model, Expression<Func<TEntity, bool>>? filter = null, bool reverse = false)
        {
            logger.LogInformation($"{model.IslemYapanKullaniciId} idli kullanıcı, {model.Id} değeri ile birlikte, \n {filter.ToJson()} \n filtresi ile GetAllDeleted Sorgusu yaptı.");
            return AutoReturn<IEnumerable<TResponse>, IEnumerable<TEntity>>(repository.GetAllDeleted(filter));
        }

        public virtual async Task<IReturn<IEnumerable<TResponse>>> GetAllDeletedAsync(IdRequestDTO model, Expression<Func<TEntity, bool>>? filter = null, bool reverse = false)
        {
            logger.LogInformation($"{model.IslemYapanKullaniciId} idli kullanıcı, {model.Id} değeri ile birlikte, \n {filter.ToJson()} \n filtresi ile GetAllDeletedAsync Sorgusu yaptı.");
            return AutoReturn<IEnumerable<TResponse>, IEnumerable<TEntity>>(await repository.GetAllDeletedAsync(filter));
        }

        public virtual async Task<IReturn<TResponse>> GetAsync(IdRequestDTO model, Expression<Func<TEntity, bool>> filter)
        {
            logger.LogInformation($"{model.IslemYapanKullaniciId} idli kullanıcı, {model.Id} değeri ile birlikte, \n {filter.ToJson()} \n filtresi ile GetAsync Sorgusu yaptı.");
            return AutoReturn<TResponse, TEntity>(await repository.GetAsync(filter));
        }

        public virtual IReturn<TResponse> GetDeleted(IdRequestDTO model, Expression<Func<TEntity, bool>> filter)
        {
            logger.LogInformation($"{model.IslemYapanKullaniciId} idli kullanıcı, {model.Id} değeri ile birlikte, \n {filter.ToJson()} \n filtresi ile GetDeleted Sorgusu yaptı.");
            return AutoReturn<TResponse, TEntity>(repository.GetDeleted(filter));
        }

        public virtual async Task<IReturn<TResponse>> GetDeletedAsync(IdRequestDTO model, Expression<Func<TEntity, bool>> filter)
        {
            logger.LogInformation($"{model.IslemYapanKullaniciId} idli kullanıcı, {model.Id} değeri ile birlikte, \n {filter.ToJson()} \n filtresi ile GetDeletedAsync Sorgusu yaptı.");
            return AutoReturn<TResponse, TEntity>(await repository.GetDeletedAsync(filter));
        }

        public virtual IReturn<bool> IsExist(IdRequestDTO model, Expression<Func<TEntity, bool>> filter)
        {
            logger.LogInformation($"{model.IslemYapanKullaniciId} idli kullanıcı, {model.Id} değeri ile birlikte, \n {filter.ToJson()} \n filtresi ile IsExist Sorgusu yaptı.");
            return repository.IsExist(filter);
        }

        public virtual async Task<IReturn<bool>> IsExistAsync(IdRequestDTO model, Expression<Func<TEntity, bool>> filter)
        {
            logger.LogInformation($"{model.IslemYapanKullaniciId} idli kullanıcı, {model.Id} değeri ile birlikte, \n {filter.ToJson()} \n filtresi ile IsExistAsync Sorgusu yaptı.");
            return await repository.IsExistAsync(filter);
        }

    }


    public abstract class DatabaseService<TEntity, TResponse, TAddRequest> : DatabaseService<TEntity, TResponse>, IDatabaseService<TEntity, TResponse, TAddRequest>
       where TEntity : class, IEntity
       where TResponse : class, IGetDTO
        where TAddRequest : class, IAddDTO
    {
        internal readonly IValidator<TAddRequest> addValidator;
        internal readonly IValidator<IEnumerable<TAddRequest>> addValidatorList;
        public DatabaseService(
            IRepository<TEntity> repository,
            IMapper mapper,
            IConfiguration configuration,
            IValidator<TAddRequest> addValidator,
            IValidator<IEnumerable<TAddRequest>> addValidatorList,
            ILogger<DatabaseService<TEntity, TResponse>> logger) : base(repository, mapper, configuration, logger)
        {
            this.addValidator = addValidator;
            this.addValidatorList = addValidatorList;
        }


        public virtual IReturn<TResponse> Add(TAddRequest entity)
        {
            ValidationResult addValidationResult = addValidator.Validate(entity);
            if (!addValidationResult.IsValid) return ValidationReturn<TResponse>(addValidationResult);
            TEntity ent = mapper.Map<TEntity>(entity);
            return AutoReturn<TResponse, TEntity>(repository.Add(ent));
        }

        public virtual IReturn<IEnumerable<TResponse>> Add(IEnumerable<TAddRequest> entity)
        {
            ValidationResult addValidationResult = addValidatorList.Validate(entity);
            if (!addValidationResult.IsValid) return ValidationReturn<IEnumerable<TResponse>>(addValidationResult);
            IEnumerable<TEntity> ent = mapper.Map<IEnumerable<TEntity>>(entity);
            return AutoReturn<IEnumerable<TResponse>, IEnumerable<TEntity>>(repository.Add(ent));
        }

        public virtual async Task<IReturn<TResponse>> AddAsync(TAddRequest entity)
        {
            ValidationResult addValidationResult = await addValidator.ValidateAsync(entity);
            if (!addValidationResult.IsValid) return ValidationReturn<TResponse>(addValidationResult);
            TEntity ent = mapper.Map<TEntity>(entity);
            return AutoReturn<TResponse, TEntity>(await repository.AddAsync(ent));
        }

        public virtual async Task<IReturn<IEnumerable<TResponse>>> AddAsync(IEnumerable<TAddRequest> entity)
        {

            ValidationResult addValidationResult = await addValidatorList.ValidateAsync(entity);
            if (!addValidationResult.IsValid) return ValidationReturn<IEnumerable<TResponse>>(addValidationResult);
            IEnumerable<TEntity> ent = mapper.Map<IEnumerable<TEntity>>(entity);
            return AutoReturn<IEnumerable<TResponse>, IEnumerable<TEntity>>(await repository.AddAsync(ent));
        }

    }

    public abstract class DatabaseService<TEntity, TResponse, TAddRequest, TUpdateRequest> : DatabaseService<TEntity, TResponse, TAddRequest>, IDatabaseService<TEntity, TResponse, TAddRequest, TUpdateRequest>
      where TEntity : class, IEntity
      where TResponse : class, IGetDTO
       where TAddRequest : class, IAddDTO
        where TUpdateRequest : class, IUpdateDTO
    {
        internal readonly IValidator<TUpdateRequest> updateValidator;
        internal readonly IValidator<IEnumerable<TUpdateRequest>> updateValidatorList;
        public DatabaseService(
            IRepository<TEntity> repository,
            IMapper mapper,
            IConfiguration configuration,
            IValidator<TAddRequest> addValidator,
            IValidator<IEnumerable<TAddRequest>> addValidatorList,
            IValidator<TUpdateRequest> updateValidator,
            IValidator<IEnumerable<TUpdateRequest>> updateValidatorList,
            ILogger<DatabaseService<TEntity, TResponse>> logger) : base(repository, mapper, configuration, addValidator, addValidatorList, logger)
        {
            this.updateValidator = updateValidator;
            this.updateValidatorList = updateValidatorList;
        }



        public virtual IReturn<TResponse> Update(TUpdateRequest entity)
        {
            ValidationResult updateValidationResult = updateValidator.Validate(entity);
            if (!updateValidationResult.IsValid) return ValidationReturn<TResponse>(updateValidationResult);
            TEntity ent = mapper.Map<TEntity>(entity);
            return AutoReturn<TResponse, TEntity>(repository.Update(ent));
        }

        public virtual IReturn<IEnumerable<TResponse>> Update(IEnumerable<TUpdateRequest> entity)
        {
            ValidationResult updateValidationResult = updateValidatorList.Validate(entity);
            if (!updateValidationResult.IsValid) return ValidationReturn<IEnumerable<TResponse>>(updateValidationResult);
            IEnumerable<TEntity> ent = mapper.Map<IEnumerable<TEntity>>(entity);
            return AutoReturn<IEnumerable<TResponse>, IEnumerable<TEntity>>(repository.Update(ent));
        }

        public virtual async Task<IReturn<TResponse>> UpdateAsync(TUpdateRequest entity)
        {
            ValidationResult updateValidationResult = await updateValidator.ValidateAsync(entity);
            if (!updateValidationResult.IsValid) return ValidationReturn<TResponse>(updateValidationResult);
            TEntity ent = mapper.Map<TEntity>(entity);
            return AutoReturn<TResponse, TEntity>(await repository.UpdateAsync(ent));
        }

        public virtual async Task<IReturn<IEnumerable<TResponse>>> UpdateAsync(IEnumerable<TUpdateRequest> entity)
        {
            ValidationResult updateValidationResult = await updateValidatorList.ValidateAsync(entity);
            if (!updateValidationResult.IsValid) return ValidationReturn<IEnumerable<TResponse>>(updateValidationResult);
            IEnumerable<TEntity> ent = mapper.Map<IEnumerable<TEntity>>(entity);
            return AutoReturn<IEnumerable<TResponse>, IEnumerable<TEntity>>(await repository.UpdateAsync(ent));
        }

    }


    public abstract class DatabaseService<TEntity, TResponse, TAddRequest, TUpdateRequest, TDeleteRequest> : DatabaseService<TEntity, TResponse, TAddRequest, TUpdateRequest>, IDatabaseService<TEntity, TResponse, TAddRequest, TUpdateRequest, TDeleteRequest>
      where TEntity : class, IEntity
      where TResponse : class, IGetDTO
       where TAddRequest : class, IAddDTO
        where TUpdateRequest : class, IUpdateDTO
        where TDeleteRequest : class, IDeleteDTO
    {
        private readonly IValidator<TDeleteRequest> deleteValidator;
        private readonly IValidator<IEnumerable<TDeleteRequest>> deleteValidatorList;
        public DatabaseService(
            IRepository<TEntity> repository,
            IMapper mapper,
            IConfiguration configuration,
            IValidator<TAddRequest> addValidator,
            IValidator<IEnumerable<TAddRequest>> addValidatorList,
            IValidator<TUpdateRequest> updateValidator,
            IValidator<IEnumerable<TUpdateRequest>> updateValidatorList,
            IValidator<TDeleteRequest> deleteValidator,
            IValidator<IEnumerable<TDeleteRequest>> deleteValidatorList,
            ILogger<DatabaseService<TEntity, TResponse>> logger) : base(repository, mapper, configuration, addValidator, addValidatorList, updateValidator, updateValidatorList, logger)
        {
            this.deleteValidator = deleteValidator;
            this.deleteValidatorList = deleteValidatorList;
        }

        public virtual IReturn<TResponse> Delete(TDeleteRequest entity)
        {
            ValidationResult deleteValidationResult = deleteValidator.Validate(entity);
            if (!deleteValidationResult.IsValid) return ValidationReturn<TResponse>(deleteValidationResult);
            return AutoReturn<TResponse, TEntity>(repository.Delete(mapper.Map<TEntity>(entity)));
        }

        public virtual IReturn<IEnumerable<TResponse>> Delete(IEnumerable<TDeleteRequest> entity)
        {
            ValidationResult deleteValidationResult = deleteValidatorList.Validate(entity);
            if (!deleteValidationResult.IsValid) return ValidationReturn<IEnumerable<TResponse>>(deleteValidationResult);
            return AutoReturn<IEnumerable<TResponse>, IEnumerable<TEntity>>(repository.Delete(mapper.Map<IEnumerable<TEntity>>(entity)));
        }

        public virtual async Task<IReturn<TResponse>> DeleteAsync(TDeleteRequest entity)
        {
            ValidationResult deleteValidationResult = await deleteValidator.ValidateAsync(entity);
            if (!deleteValidationResult.IsValid) return ValidationReturn<TResponse>(deleteValidationResult);
            return AutoReturn<TResponse, TEntity>(await repository.DeleteAsync(mapper.Map<TEntity>(entity)));
        }

        public virtual async Task<IReturn<IEnumerable<TResponse>>> DeleteAsync(IEnumerable<TDeleteRequest> entity)
        {
            ValidationResult deleteValidationResult = await deleteValidatorList.ValidateAsync(entity);
            if (!deleteValidationResult.IsValid) return ValidationReturn<IEnumerable<TResponse>>(deleteValidationResult);
            return AutoReturn<IEnumerable<TResponse>, IEnumerable<TEntity>>(await repository.DeleteAsync(mapper.Map<IEnumerable<TEntity>>(entity)));
        }
    }


}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Concrete\BlogPostCategoryDatabaseService.cs ===

[İÇERİK]
﻿using AutoMapper;
using FluentValidation;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPostCategory;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;
using TahaMucasirogluBlog.Service.Database.Abstract;
using TahaMucasirogluBlog.Service.Database.Base;

namespace TahaMucasirogluBlog.Service.Database.Concrete
{
    public class BlogPostCategoryDatabaseService : DatabaseService<BlogPostCategory, GetBlogPostCategoryDTO, AddBlogPostCategoryDTO, UpdateBlogPostCategoryDTO, DeleteBlogPostCategoryDTO>, IBlogPostCategoryDatabaseService
    {
        public BlogPostCategoryDatabaseService(IBlogPostCategoryRepository repository, IMapper mapper, IConfiguration configuration, IValidator<AddBlogPostCategoryDTO> addValidator, IValidator<IEnumerable<AddBlogPostCategoryDTO>> addValidatorList, IValidator<UpdateBlogPostCategoryDTO> updateValidator, IValidator<IEnumerable<UpdateBlogPostCategoryDTO>> updateValidatorList, IValidator<DeleteBlogPostCategoryDTO> deleteValidator, IValidator<IEnumerable<DeleteBlogPostCategoryDTO>> deleteValidatorList, ILogger<BlogPostCategoryDatabaseService> logger) : base(repository, mapper, configuration, addValidator, addValidatorList, updateValidator, updateValidatorList, deleteValidator, deleteValidatorList, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Concrete\BlogPostDatabaseService.cs ===

[İÇERİK]
﻿using AutoMapper;
using FluentValidation;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPost;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;
using TahaMucasirogluBlog.Service.Database.Abstract;
using TahaMucasirogluBlog.Service.Database.Base;

namespace TahaMucasirogluBlog.Service.Database.Concrete
{
    public class BlogPostDatabaseService : DatabaseService<BlogPost, GetBlogPostDTO, AddBlogPostDTO, UpdateBlogPostDTO, DeleteBlogPostDTO>, IBlogPostDatabaseService
    {
        public BlogPostDatabaseService(IBlogPostRepository repository, IMapper mapper, IConfiguration configuration, IValidator<AddBlogPostDTO> addValidator, IValidator<IEnumerable<AddBlogPostDTO>> addValidatorList, IValidator<UpdateBlogPostDTO> updateValidator, IValidator<IEnumerable<UpdateBlogPostDTO>> updateValidatorList, IValidator<DeleteBlogPostDTO> deleteValidator, IValidator<IEnumerable<DeleteBlogPostDTO>> deleteValidatorList, ILogger<BlogPostDatabaseService> logger) : base(repository, mapper, configuration, addValidator, addValidatorList, updateValidator, updateValidatorList, deleteValidator, deleteValidatorList, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Concrete\BlogPostTagDatabaseService.cs ===

[İÇERİK]
﻿using AutoMapper;
using FluentValidation;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.BlogPostTag;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;
using TahaMucasirogluBlog.Service.Database.Abstract;
using TahaMucasirogluBlog.Service.Database.Base;

namespace TahaMucasirogluBlog.Service.Database.Concrete
{
    public class BlogPostTagDatabaseService : DatabaseService<BlogPostTag, GetBlogPostTagDTO, AddBlogPostTagDTO, UpdateBlogPostTagDTO, DeleteBlogPostTagDTO>, IBlogPostTagDatabaseService
    {
        public BlogPostTagDatabaseService(
            IBlogPostTagRepository repository, 
            IMapper mapper, 
            IConfiguration configuration,
            IValidator<AddBlogPostTagDTO> addValidator, 
            IValidator<IEnumerable<AddBlogPostTagDTO>> addValidatorList, 
            IValidator<UpdateBlogPostTagDTO> updateValidator, 
            IValidator<IEnumerable<UpdateBlogPostTagDTO>> updateValidatorList, 
            IValidator<DeleteBlogPostTagDTO> deleteValidator, 
            IValidator<IEnumerable<DeleteBlogPostTagDTO>> deleteValidatorList, 
            ILogger<BlogPostTagDatabaseService> logger) : base(repository, mapper, configuration, addValidator, addValidatorList, updateValidator, updateValidatorList, deleteValidator, deleteValidatorList, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Concrete\CategoryDatabaseService.cs ===

[İÇERİK]
﻿using AutoMapper;
using FluentValidation;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Category;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;
using TahaMucasirogluBlog.Service.Database.Abstract;
using TahaMucasirogluBlog.Service.Database.Base;

namespace TahaMucasirogluBlog.Service.Database.Concrete
{
    public class CategoryDatabaseService : DatabaseService<Category, GetCategoryDTO, AddCategoryDTO, UpdateCategoryDTO, DeleteCategoryDTO>, ICategoryDatabaseService
    {
        public CategoryDatabaseService(ICategoryRepository repository, IMapper mapper, IConfiguration configuration, IValidator<AddCategoryDTO> addValidator, IValidator<IEnumerable<AddCategoryDTO>> addValidatorList, IValidator<UpdateCategoryDTO> updateValidator, IValidator<IEnumerable<UpdateCategoryDTO>> updateValidatorList, IValidator<DeleteCategoryDTO> deleteValidator, IValidator<IEnumerable<DeleteCategoryDTO>> deleteValidatorList, ILogger<CategoryDatabaseService> logger) : base(repository, mapper, configuration, addValidator, addValidatorList, updateValidator, updateValidatorList, deleteValidator, deleteValidatorList, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Concrete\CommentDatabaseService.cs ===

[İÇERİK]
﻿using AutoMapper;
using FluentValidation;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Comment;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;
using TahaMucasirogluBlog.Service.Database.Abstract;
using TahaMucasirogluBlog.Service.Database.Base;

namespace TahaMucasirogluBlog.Service.Database.Concrete
{
    public class CommentDatabaseService : DatabaseService<Comment, GetCommentDTO, AddCommentDTO, UpdateCommentDTO, DeleteCommentDTO>, ICommentDatabaseService
    {
        public CommentDatabaseService(ICommentRepository repository, IMapper mapper, IConfiguration configuration, IValidator<AddCommentDTO> addValidator, IValidator<IEnumerable<AddCommentDTO>> addValidatorList, IValidator<UpdateCommentDTO> updateValidator, IValidator<IEnumerable<UpdateCommentDTO>> updateValidatorList, IValidator<DeleteCommentDTO> deleteValidator, IValidator<IEnumerable<DeleteCommentDTO>> deleteValidatorList, ILogger<CommentDatabaseService> logger) : base(repository, mapper, configuration, addValidator, addValidatorList, updateValidator, updateValidatorList, deleteValidator, deleteValidatorList, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Concrete\ExperienceDatabaseService.cs ===

[İÇERİK]
﻿using AutoMapper;
using FluentValidation;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Experience;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;
using TahaMucasirogluBlog.Service.Database.Abstract;
using TahaMucasirogluBlog.Service.Database.Base;

namespace TahaMucasirogluBlog.Service.Database.Concrete
{
    public class ExperienceDatabaseService : DatabaseService<Experience, GetExperienceDTO, AddExperienceDTO, UpdateExperienceDTO, DeleteExperienceDTO>, IExperienceDatabaseService
    {
        public ExperienceDatabaseService(IExperienceRepository repository, IMapper mapper, IConfiguration configuration, IValidator<AddExperienceDTO> addValidator, IValidator<IEnumerable<AddExperienceDTO>> addValidatorList, IValidator<UpdateExperienceDTO> updateValidator, IValidator<IEnumerable<UpdateExperienceDTO>> updateValidatorList, IValidator<DeleteExperienceDTO> deleteValidator, IValidator<IEnumerable<DeleteExperienceDTO>> deleteValidatorList, ILogger<ExperienceDatabaseService> logger) : base(repository, mapper, configuration, addValidator, addValidatorList, updateValidator, updateValidatorList, deleteValidator, deleteValidatorList, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Concrete\ExperienceTechnologyDatabaseService.cs ===

[İÇERİK]
﻿using AutoMapper;
using FluentValidation;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceTechnology;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;
using TahaMucasirogluBlog.Service.Database.Abstract;
using TahaMucasirogluBlog.Service.Database.Base;

namespace TahaMucasirogluBlog.Service.Database.Concrete
{
    public class ExperienceTechnologyDatabaseService : DatabaseService<ExperienceTechnology, GetExperienceTechnologyDTO, AddExperienceTechnologyDTO, UpdateExperienceTechnologyDTO, DeleteExperienceTechnologyDTO>, IExperienceTechnologyDatabaseService
    {
        public ExperienceTechnologyDatabaseService(IExperienceTechnologyRepository repository, IMapper mapper, IConfiguration configuration, IValidator<AddExperienceTechnologyDTO> addValidator, IValidator<IEnumerable<AddExperienceTechnologyDTO>> addValidatorList, IValidator<UpdateExperienceTechnologyDTO> updateValidator, IValidator<IEnumerable<UpdateExperienceTechnologyDTO>> updateValidatorList, IValidator<DeleteExperienceTechnologyDTO> deleteValidator, IValidator<IEnumerable<DeleteExperienceTechnologyDTO>> deleteValidatorList, ILogger<ExperienceTechnologyDatabaseService> logger) : base(repository, mapper, configuration, addValidator, addValidatorList, updateValidator, updateValidatorList, deleteValidator, deleteValidatorList, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Concrete\ExperienceTypeDatabaseService.cs ===

[İÇERİK]
﻿using AutoMapper;
using FluentValidation;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.ExperienceType;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;
using TahaMucasirogluBlog.Service.Database.Abstract;
using TahaMucasirogluBlog.Service.Database.Base;

namespace TahaMucasirogluBlog.Service.Database.Concrete
{
    public class ExperienceTypeDatabaseService : DatabaseService<ExperienceType, GetExperienceTypeDTO, AddExperienceTypeDTO, UpdateExperienceTypeDTO, DeleteExperienceTypeDTO>, IExperienceTypeDatabaseService
    {
        public ExperienceTypeDatabaseService(IExperienceTypeRepository repository, IMapper mapper, IConfiguration configuration, IValidator<AddExperienceTypeDTO> addValidator, IValidator<IEnumerable<AddExperienceTypeDTO>> addValidatorList, IValidator<UpdateExperienceTypeDTO> updateValidator, IValidator<IEnumerable<UpdateExperienceTypeDTO>> updateValidatorList, IValidator<DeleteExperienceTypeDTO> deleteValidator, IValidator<IEnumerable<DeleteExperienceTypeDTO>> deleteValidatorList, ILogger<ExperienceTypeDatabaseService> logger) : base(repository, mapper, configuration, addValidator, addValidatorList, updateValidator, updateValidatorList, deleteValidator, deleteValidatorList, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Concrete\InfoDatabaseService.cs ===

[İÇERİK]
﻿using AutoMapper;
using FluentValidation;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Info;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;
using TahaMucasirogluBlog.Service.Database.Abstract;
using TahaMucasirogluBlog.Service.Database.Base;

namespace TahaMucasirogluBlog.Service.Database.Concrete
{
    public class InfoDatabaseService : DatabaseService<Info, GetInfoDTO, AddInfoDTO, UpdateInfoDTO, DeleteInfoDTO>, IInfoDatabaseService
    {
        public InfoDatabaseService(IInfoRepository repository, IMapper mapper, IConfiguration configuration, IValidator<AddInfoDTO> addValidator, IValidator<IEnumerable<AddInfoDTO>> addValidatorList, IValidator<UpdateInfoDTO> updateValidator, IValidator<IEnumerable<UpdateInfoDTO>> updateValidatorList, IValidator<DeleteInfoDTO> deleteValidator, IValidator<IEnumerable<DeleteInfoDTO>> deleteValidatorList, ILogger<InfoDatabaseService> logger) : base(repository, mapper, configuration, addValidator, addValidatorList, updateValidator, updateValidatorList, deleteValidator, deleteValidatorList, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Concrete\SkillDatabaseService.cs ===

[İÇERİK]
﻿using AutoMapper;
using FluentValidation;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Skill;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;
using TahaMucasirogluBlog.Service.Database.Abstract;
using TahaMucasirogluBlog.Service.Database.Base;

namespace TahaMucasirogluBlog.Service.Database.Concrete
{
    public class SkillDatabaseService : DatabaseService<Skill, GetSkillDTO, AddSkillDTO, UpdateSkillDTO, DeleteSkillDTO>, ISkillDatabaseService
    {
        public SkillDatabaseService(ISkillRepository repository, IMapper mapper, IConfiguration configuration, IValidator<AddSkillDTO> addValidator, IValidator<IEnumerable<AddSkillDTO>> addValidatorList, IValidator<UpdateSkillDTO> updateValidator, IValidator<IEnumerable<UpdateSkillDTO>> updateValidatorList, IValidator<DeleteSkillDTO> deleteValidator, IValidator<IEnumerable<DeleteSkillDTO>> deleteValidatorList, ILogger<SkillDatabaseService> logger) : base(repository, mapper, configuration, addValidator, addValidatorList, updateValidator, updateValidatorList, deleteValidator, deleteValidatorList, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Concrete\SocialLinkDatabaseService.cs ===

[İÇERİK]
﻿using AutoMapper;
using FluentValidation;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SocialLink;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;
using TahaMucasirogluBlog.Service.Database.Abstract;
using TahaMucasirogluBlog.Service.Database.Base;

namespace TahaMucasirogluBlog.Service.Database.Concrete
{
    public class SocialLinkDatabaseService : DatabaseService<SocialLink, GetSocialLinkDTO, AddSocialLinkDTO, UpdateSocialLinkDTO, DeleteSocialLinkDTO>, ISocialLinkDatabaseService
    {
        public SocialLinkDatabaseService(ISocialLinkRepository repository, IMapper mapper, IConfiguration configuration, IValidator<AddSocialLinkDTO> addValidator, IValidator<IEnumerable<AddSocialLinkDTO>> addValidatorList, IValidator<UpdateSocialLinkDTO> updateValidator, IValidator<IEnumerable<UpdateSocialLinkDTO>> updateValidatorList, IValidator<DeleteSocialLinkDTO> deleteValidator, IValidator<IEnumerable<DeleteSocialLinkDTO>> deleteValidatorList, ILogger<SocialLinkDatabaseService> logger) : base(repository, mapper, configuration, addValidator, addValidatorList, updateValidator, updateValidatorList, deleteValidator, deleteValidatorList, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Concrete\SubSkillDatabaseService.cs ===

[İÇERİK]
﻿using AutoMapper;
using FluentValidation;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Skill;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.SubSkill;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;
using TahaMucasirogluBlog.Service.Database.Abstract;
using TahaMucasirogluBlog.Service.Database.Base;

namespace TahaMucasirogluBlog.Service.Database.Concrete
{
    public class SubSkillDatabaseService : DatabaseService<SubSkill, GetSubSkillDTO, AddSubSkillDTO, UpdateSubSkillDTO, DeleteSubSkillDTO>, ISubSkillDatabaseService
    {
        public SubSkillDatabaseService(ISubSkillRepository repository, IMapper mapper, IConfiguration configuration, IValidator<AddSubSkillDTO> addValidator, IValidator<IEnumerable<AddSubSkillDTO>> addValidatorList, IValidator<UpdateSubSkillDTO> updateValidator, IValidator<IEnumerable<UpdateSubSkillDTO>> updateValidatorList, IValidator<DeleteSubSkillDTO> deleteValidator, IValidator<IEnumerable<DeleteSubSkillDTO>> deleteValidatorList, ILogger<SubSkillDatabaseService> logger) : base(repository, mapper, configuration, addValidator, addValidatorList, updateValidator, updateValidatorList, deleteValidator, deleteValidatorList, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Concrete\TagDatabaseService.cs ===

[İÇERİK]
﻿using AutoMapper;
using FluentValidation;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.Tag;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;
using TahaMucasirogluBlog.Service.Database.Abstract;
using TahaMucasirogluBlog.Service.Database.Base;

namespace TahaMucasirogluBlog.Service.Database.Concrete
{
    public class TagDatabaseService : DatabaseService<Tag, GetTagDTO, AddTagDTO, UpdateTagDTO, DeleteTagDTO>, ITagDatabaseService
    {
        public TagDatabaseService(ITagRepository repository, IMapper mapper, IConfiguration configuration, IValidator<AddTagDTO> addValidator, IValidator<IEnumerable<AddTagDTO>> addValidatorList, IValidator<UpdateTagDTO> updateValidator, IValidator<IEnumerable<UpdateTagDTO>> updateValidatorList, IValidator<DeleteTagDTO> deleteValidator, IValidator<IEnumerable<DeleteTagDTO>> deleteValidatorList, ILogger<TagDatabaseService> logger) : base(repository, mapper, configuration, addValidator, addValidatorList, updateValidator, updateValidatorList, deleteValidator, deleteValidatorList, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\Concrete\UserDatabaseService.cs ===

[İÇERİK]
﻿using AutoMapper;
using FluentValidation;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TahaMucasirogluBlog.Domain.DTOs.Concrete.Entity.User;
using TahaMucasirogluBlog.Domain.Entities.Concrete;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract;
using TahaMucasirogluBlog.Infrastructure.Repository.Repository.Abstract.Base;
using TahaMucasirogluBlog.Service.Database.Abstract;
using TahaMucasirogluBlog.Service.Database.Base;

namespace TahaMucasirogluBlog.Service.Database.Concrete
{
    public class UserDatabaseService : DatabaseService<User, GetUserDTO, AddUserDTO, UpdateUserDTO, DeleteUserDTO>, IUserDatabaseService
    {
        public UserDatabaseService(IUserRepository repository, IMapper mapper, IConfiguration configuration, IValidator<AddUserDTO> addValidator, IValidator<IEnumerable<AddUserDTO>> addValidatorList, IValidator<UpdateUserDTO> updateValidator, IValidator<IEnumerable<UpdateUserDTO>> updateValidatorList, IValidator<DeleteUserDTO> deleteValidator, IValidator<IEnumerable<DeleteUserDTO>> deleteValidatorList, ILogger<UserDatabaseService> logger) : base(repository, mapper, configuration, addValidator, addValidatorList, updateValidator, updateValidatorList, deleteValidator, deleteValidatorList, logger)
        {
        }
    }
}



=== DOSYA: TahaMucasirogluBlog\Service\TahaMucasirogluBlog.Service.Database\TahaMucasirogluBlog.Service.Database.csproj ===

[İÇERİK]
﻿<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
	  <!--uyarıları hata göstererek düzgün ilerleme sağlar-->
	  <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\TahaMucasirogluBlog.Infrastructure.Repository.csproj" />
  </ItemGroup>

</Project>



=== DOSYA: TahaMucasirogluBlog\TahaMucasirogluBlog.sln ===

[İÇERİK]
﻿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.14.36301.6
MinimumVisualStudioVersion = 10.0.40219.1
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Domain", "Domain", "{02EA681E-C7D8-13C7-8484-4AC65E1B71E8}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "TahaMucasirogluBlog.Domain.Entities", "Domain\TahaMucasirogluBlog.Domain.Entities\TahaMucasirogluBlog.Domain.Entities.csproj", "{863D92C7-F2CE-4F96-9BD9-A7DEA438B2CC}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "TahaMucasirogluBlog.Domain.Constant", "Domain\TahaMucasirogluBlog.Domain.Constant\TahaMucasirogluBlog.Domain.Constant.csproj", "{FDA080F1-9C53-4561-A36D-69AC9D02299B}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "TahaMucasirogluBlog.Domain.DTOs", "Domain\TahaMucasirogluBlog.Domain.DTOs\TahaMucasirogluBlog.Domain.DTOs.csproj", "{84838BD2-C3A1-4E10-B75B-1565A9CEF772}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "TahaMucasirogluBlog.Domain.Extensions", "Domain\TahaMucasirogluBlog.Domain.Extensions\TahaMucasirogluBlog.Domain.Extensions.csproj", "{41EFCF97-CB7E-469B-933F-F0AEBAC0ADAF}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "TahaMucasirogluBlog.Domain.Return", "Domain\TahaMucasirogluBlog.Domain.Return\TahaMucasirogluBlog.Domain.Return.csproj", "{83722037-7D64-40FE-9587-10AAE0D82CF9}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "TahaMucasirogluBlog.Domain.Models", "Domain\TahaMucasirogluBlog.Domain.Models\TahaMucasirogluBlog.Domain.Models.csproj", "{5A717CCC-2ECB-44BA-8ED8-551E8603A29D}"
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Application", "Application", "{92A77AE6-C1EF-479D-A626-BD7E3F330AD7}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "TahaMucasirogluBlog.Application.Managers", "Application\TahaMucasirogluBlog.Application.Managers\TahaMucasirogluBlog.Application.Managers.csproj", "{56D9FF46-F595-4691-98F9-42D274F40B65}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "TahaMucasirogluBlog.Application.Mapper", "Application\TahaMucasirogluBlog.Application.Mapper\TahaMucasirogluBlog.Application.Mapper.csproj", "{A470EE9C-8047-45FA-AED0-B7452E230B75}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "TahaMucasirogluBlog.Application.Validation", "Application\TahaMucasirogluBlog.Application.Validation\TahaMucasirogluBlog.Application.Validation.csproj", "{2DE2F0FB-3115-40A4-B987-DB1C7B344E97}"
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Infrastructure", "Infrastructure", "{3CBDD33A-B0A4-416F-A62C-664F00033D02}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "TahaMucasirogluBlog.Infrastructure.Repository", "Infrastructure\TahaMucasirogluBlog.Infrastructure.Repository\TahaMucasirogluBlog.Infrastructure.Repository.csproj", "{E43AD915-D86C-43FA-B512-711DDBA3E2AA}"
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Service", "Service", "{CFB96A99-684B-4FC5-B50C-9E66926C0305}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "TahaMucasirogluBlog.Service.Database", "Service\TahaMucasirogluBlog.Service.Database\TahaMucasirogluBlog.Service.Database.csproj", "{4C4C2121-31DD-44CE-8EE5-ACC01559C0C1}"
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Presentation", "Presentation", "{9B4E1F49-E70C-45D3-891F-6DFDD4D8E264}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "TahaMucasirogluBlog.Presentation.API", "Presentation\TahaMucasirogluBlog.Presentation.API\TahaMucasirogluBlog.Presentation.API.csproj", "{56116250-ECE1-4EB9-80ED-025D78F22677}"
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Utils", "Utils", "{6AA954D6-4BDF-4510-9E7D-3822B4602635}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "TahaMucasirogluBlog.Utils.DatabaseInstallation", "Utils\TahaMucasirogluBlog.Utils.DatabaseInstallation\TahaMucasirogluBlog.Utils.DatabaseInstallation.csproj", "{0B7CF555-A28A-4D3C-9BE5-92C18B9273CC}"
EndProject
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Client", "Client", "{4F570B7E-9CBC-4E08-9B4F-8CB54D95F360}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "TahaMucasirogluBlog.Client.TahaMucasirogluMVC", "Client\TahaMucasirogluBlog.Client.TahaMucasirogluMVC\TahaMucasirogluBlog.Client.TahaMucasirogluMVC.csproj", "{D4BBFDEA-5682-4A3B-8BFF-386D5DDA0B5B}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC", "Client\TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC\TahaMucasirogluBlog.Client.Cv.TahaMucasirogluMVC.csproj", "{BAEBF4D5-255D-4E0B-BD57-D407FACE6BED}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "TahaMucasirogluBlog.Service.Cv", "Service\TahaMucasirogluBlog.Service.Cv\TahaMucasirogluBlog.Service.Cv.csproj", "{F10DA11F-3F3F-4D9F-8FFF-4AA14DDEBFCB}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC", "Client\TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC\TahaMucasirogluBlog.Client.Admin.TahaMucasirogluMVC.csproj", "{26CCA221-3E4C-4BC7-A892-BFB815B6919C}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{863D92C7-F2CE-4F96-9BD9-A7DEA438B2CC}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{863D92C7-F2CE-4F96-9BD9-A7DEA438B2CC}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{863D92C7-F2CE-4F96-9BD9-A7DEA438B2CC}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{863D92C7-F2CE-4F96-9BD9-A7DEA438B2CC}.Release|Any CPU.Build.0 = Release|Any CPU
		{FDA080F1-9C53-4561-A36D-69AC9D02299B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{FDA080F1-9C53-4561-A36D-69AC9D02299B}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{FDA080F1-9C53-4561-A36D-69AC9D02299B}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{FDA080F1-9C53-4561-A36D-69AC9D02299B}.Release|Any CPU.Build.0 = Release|Any CPU
		{84838BD2-C3A1-4E10-B75B-1565A9CEF772}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{84838BD2-C3A1-4E10-B75B-1565A9CEF772}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{84838BD2-C3A1-4E10-B75B-1565A9CEF772}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{84838BD2-C3A1-4E10-B75B-1565A9CEF772}.Release|Any CPU.Build.0 = Release|Any CPU
		{41EFCF97-CB7E-469B-933F-F0AEBAC0ADAF}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{41EFCF97-CB7E-469B-933F-F0AEBAC0ADAF}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{41EFCF97-CB7E-469B-933F-F0AEBAC0ADAF}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{41EFCF97-CB7E-469B-933F-F0AEBAC0ADAF}.Release|Any CPU.Build.0 = Release|Any CPU
		{83722037-7D64-40FE-9587-10AAE0D82CF9}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{83722037-7D64-40FE-9587-10AAE0D82CF9}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{83722037-7D64-40FE-9587-10AAE0D82CF9}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{83722037-7D64-40FE-9587-10AAE0D82CF9}.Release|Any CPU.Build.0 = Release|Any CPU
		{5A717CCC-2ECB-44BA-8ED8-551E8603A29D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{5A717CCC-2ECB-44BA-8ED8-551E8603A29D}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{5A717CCC-2ECB-44BA-8ED8-551E8603A29D}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{5A717CCC-2ECB-44BA-8ED8-551E8603A29D}.Release|Any CPU.Build.0 = Release|Any CPU
		{56D9FF46-F595-4691-98F9-42D274F40B65}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{56D9FF46-F595-4691-98F9-42D274F40B65}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{56D9FF46-F595-4691-98F9-42D274F40B65}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{56D9FF46-F595-4691-98F9-42D274F40B65}.Release|Any CPU.Build.0 = Release|Any CPU
		{A470EE9C-8047-45FA-AED0-B7452E230B75}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{A470EE9C-8047-45FA-AED0-B7452E230B75}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{A470EE9C-8047-45FA-AED0-B7452E230B75}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{A470EE9C-8047-45FA-AED0-B7452E230B75}.Release|Any CPU.Build.0 = Release|Any CPU
		{2DE2F0FB-3115-40A4-B987-DB1C7B344E97}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{2DE2F0FB-3115-40A4-B987-DB1C7B344E97}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{2DE2F0FB-3115-40A4-B987-DB1C7B344E97}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{2DE2F0FB-3115-40A4-B987-DB1C7B344E97}.Release|Any CPU.Build.0 = Release|Any CPU
		{E43AD915-D86C-43FA-B512-711DDBA3E2AA}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{E43AD915-D86C-43FA-B512-711DDBA3E2AA}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{E43AD915-D86C-43FA-B512-711DDBA3E2AA}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{E43AD915-D86C-43FA-B512-711DDBA3E2AA}.Release|Any CPU.Build.0 = Release|Any CPU
		{4C4C2121-31DD-44CE-8EE5-ACC01559C0C1}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{4C4C2121-31DD-44CE-8EE5-ACC01559C0C1}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{4C4C2121-31DD-44CE-8EE5-ACC01559C0C1}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{4C4C2121-31DD-44CE-8EE5-ACC01559C0C1}.Release|Any CPU.Build.0 = Release|Any CPU
		{56116250-ECE1-4EB9-80ED-025D78F22677}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{56116250-ECE1-4EB9-80ED-025D78F22677}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{56116250-ECE1-4EB9-80ED-025D78F22677}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{56116250-ECE1-4EB9-80ED-025D78F22677}.Release|Any CPU.Build.0 = Release|Any CPU
		{0B7CF555-A28A-4D3C-9BE5-92C18B9273CC}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{0B7CF555-A28A-4D3C-9BE5-92C18B9273CC}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{0B7CF555-A28A-4D3C-9BE5-92C18B9273CC}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{0B7CF555-A28A-4D3C-9BE5-92C18B9273CC}.Release|Any CPU.Build.0 = Release|Any CPU
		{D4BBFDEA-5682-4A3B-8BFF-386D5DDA0B5B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{D4BBFDEA-5682-4A3B-8BFF-386D5DDA0B5B}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{D4BBFDEA-5682-4A3B-8BFF-386D5DDA0B5B}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{D4BBFDEA-5682-4A3B-8BFF-386D5DDA0B5B}.Release|Any CPU.Build.0 = Release|Any CPU
		{BAEBF4D5-255D-4E0B-BD57-D407FACE6BED}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{BAEBF4D5-255D-4E0B-BD57-D407FACE6BED}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{BAEBF4D5-255D-4E0B-BD57-D407FACE6BED}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{BAEBF4D5-255D-4E0B-BD57-D407FACE6BED}.Release|Any CPU.Build.0 = Release|Any CPU
		{F10DA11F-3F3F-4D9F-8FFF-4AA14DDEBFCB}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{F10DA11F-3F3F-4D9F-8FFF-4AA14DDEBFCB}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{F10DA11F-3F3F-4D9F-8FFF-4AA14DDEBFCB}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{F10DA11F-3F3F-4D9F-8FFF-4AA14DDEBFCB}.Release|Any CPU.Build.0 = Release|Any CPU
		{26CCA221-3E4C-4BC7-A892-BFB815B6919C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{26CCA221-3E4C-4BC7-A892-BFB815B6919C}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{26CCA221-3E4C-4BC7-A892-BFB815B6919C}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{26CCA221-3E4C-4BC7-A892-BFB815B6919C}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(NestedProjects) = preSolution
		{863D92C7-F2CE-4F96-9BD9-A7DEA438B2CC} = {02EA681E-C7D8-13C7-8484-4AC65E1B71E8}
		{FDA080F1-9C53-4561-A36D-69AC9D02299B} = {02EA681E-C7D8-13C7-8484-4AC65E1B71E8}
		{84838BD2-C3A1-4E10-B75B-1565A9CEF772} = {02EA681E-C7D8-13C7-8484-4AC65E1B71E8}
		{41EFCF97-CB7E-469B-933F-F0AEBAC0ADAF} = {02EA681E-C7D8-13C7-8484-4AC65E1B71E8}
		{83722037-7D64-40FE-9587-10AAE0D82CF9} = {02EA681E-C7D8-13C7-8484-4AC65E1B71E8}
		{5A717CCC-2ECB-44BA-8ED8-551E8603A29D} = {02EA681E-C7D8-13C7-8484-4AC65E1B71E8}
		{56D9FF46-F595-4691-98F9-42D274F40B65} = {92A77AE6-C1EF-479D-A626-BD7E3F330AD7}
		{A470EE9C-8047-45FA-AED0-B7452E230B75} = {92A77AE6-C1EF-479D-A626-BD7E3F330AD7}
		{2DE2F0FB-3115-40A4-B987-DB1C7B344E97} = {92A77AE6-C1EF-479D-A626-BD7E3F330AD7}
		{E43AD915-D86C-43FA-B512-711DDBA3E2AA} = {3CBDD33A-B0A4-416F-A62C-664F00033D02}
		{4C4C2121-31DD-44CE-8EE5-ACC01559C0C1} = {CFB96A99-684B-4FC5-B50C-9E66926C0305}
		{56116250-ECE1-4EB9-80ED-025D78F22677} = {9B4E1F49-E70C-45D3-891F-6DFDD4D8E264}
		{0B7CF555-A28A-4D3C-9BE5-92C18B9273CC} = {6AA954D6-4BDF-4510-9E7D-3822B4602635}
		{D4BBFDEA-5682-4A3B-8BFF-386D5DDA0B5B} = {4F570B7E-9CBC-4E08-9B4F-8CB54D95F360}
		{BAEBF4D5-255D-4E0B-BD57-D407FACE6BED} = {4F570B7E-9CBC-4E08-9B4F-8CB54D95F360}
		{F10DA11F-3F3F-4D9F-8FFF-4AA14DDEBFCB} = {CFB96A99-684B-4FC5-B50C-9E66926C0305}
		{26CCA221-3E4C-4BC7-A892-BFB815B6919C} = {4F570B7E-9CBC-4E08-9B4F-8CB54D95F360}
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {2C2C2F6B-91FF-435F-A510-0D6C0F7573D2}
	EndGlobalSection
EndGlobal



=== DOSYA: TahaMucasirogluBlog\Utils\TahaMucasirogluBlog.Utils.DatabaseInstallation\Program.cs ===

[İÇERİK]
﻿using System.Diagnostics;

internal class Program
{
 

    private static async Task Main(string[] args)
    {
        string projectMainDir = Directory.GetCurrentDirectory();
        projectMainDir = projectMainDir.Substring(0, projectMainDir.LastIndexOf("\\TahaMucasirogluBlog\\") + "\\TahaMucasirogluBlog\\".Length);

        Delay();
        await DbMigrations(projectMainDir);
        Delay();
        await DbUpdate(projectMainDir);

    }


    static void Delay(int delayTime = 3)
    {
        for (int i = delayTime; i >= 1; i--)
        {
            Console.WriteLine($"{i}...");
            Thread.Sleep(1000); // 1 saniye bekle
        }
    }



    static async Task DbMigrations(string projectMainDir)
    {
        
        Console.WriteLine("Db Migrations Başlıyor");
        DateTime date = DateTime.Now;
        ProcessStartInfo processStartInfo = new ProcessStartInfo();
        processStartInfo.FileName = "powershell";
        processStartInfo.Arguments = $"dotnet ef migrations add AutoMig_{date.Year}_{date.Month}_{date.Day}_{date.Hour}_{date.Minute}_{date.Second} --context TahaMucasirogluBlogContext --project Infrastructure\\TahaMucasirogluBlog.Infrastructure.Repository\\TahaMucasirogluBlog.Infrastructure.Repository.csproj --startup-project Presentation\\TahaMucasirogluBlog.Presentation.API\\TahaMucasirogluBlog.Presentation.API.csproj --output-dir Migrations";
        processStartInfo.UseShellExecute = false;
        processStartInfo.CreateNoWindow = false;
        processStartInfo.WindowStyle = ProcessWindowStyle.Normal;
        processStartInfo.WorkingDirectory = projectMainDir;
        processStartInfo.RedirectStandardInput = false;
        processStartInfo.RedirectStandardOutput = false;
        using (Process process = new Process())
        {
            process.StartInfo = processStartInfo;
            process.Start();
            await process.WaitForExitAsync();
        }
        Console.WriteLine("Db Migrations Bitti");
    }


    static async Task DbUpdate(string projectMainDir)
    {
        Console.WriteLine("Db Update Başlıyor");
        ProcessStartInfo processStartInfo = new ProcessStartInfo();
        processStartInfo.FileName = "powershell";
        processStartInfo.Arguments = $"dotnet ef database update --context TahaMucasirogluBlogContext --project Infrastructure/TahaMucasirogluBlog.Infrastructure.Repository/TahaMucasirogluBlog.Infrastructure.Repository.csproj --startup-project Presentation/TahaMucasirogluBlog.Presentation.API/TahaMucasirogluBlog.Presentation.API.csproj";
        processStartInfo.UseShellExecute = false;
        processStartInfo.CreateNoWindow = false;
        processStartInfo.WindowStyle = ProcessWindowStyle.Normal;
        processStartInfo.WorkingDirectory = projectMainDir;
        processStartInfo.RedirectStandardInput = false;
        processStartInfo.RedirectStandardOutput = false;
        using (Process process = new Process())
        {
            process.StartInfo = processStartInfo;
            process.Start();
            await process.WaitForExitAsync();
        }
        Console.WriteLine("Db Update Bitti");
    }


















}


=== DOSYA: TahaMucasirogluBlog\Utils\TahaMucasirogluBlog.Utils.DatabaseInstallation\TahaMucasirogluBlog.Utils.DatabaseInstallation.csproj ===

[İÇERİK]
﻿<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
	  <!--uyarıları hata göstererek düzgün ilerleme sağlar-->
	  <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\Presentation\TahaMucasirogluBlog.Presentation.API\TahaMucasirogluBlog.Presentation.API.csproj" />
  </ItemGroup>

</Project>
